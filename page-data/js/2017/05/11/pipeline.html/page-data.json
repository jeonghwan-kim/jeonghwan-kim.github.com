{"componentChunkName":"component---src-templates-blog-post-index-tsx","path":"/js/2017/05/11/pipeline.html","result":{"data":{"site":{"siteMetadata":{"title":"김정환 블로그","url":"https://jeonghwan-kim.github.io"}},"markdownRemark":{"id":"ffe68d3c-e644-5779-9d7b-a82159fb60ac","excerpt":"이전글: (함수형JS) 순수성, 불변성, 변경정책 앞서 설명한 순수성, 불변성, 변화 제어가 함수 조립에서 어떤 역할을 하는지 알아봤다. 이러한 특징을 이용해 함수를 더 자유롭게 조립하는 방법을 이번 글에서 살펴보겠다. curry-banner…","html":"<blockquote>\n<p>이전글: <a href=\"/js/2017/04/23/Purity-Immutability-and-Policies-for-Change.html\">(함수형JS) 순수성, 불변성, 변경정책</a></p>\n</blockquote>\n<p>앞서 설명한 <a href=\"/js/2017/04/23/Purity-Immutability-and-Policies-for-Change.html\">순수성, 불변성, 변화 제어</a>가 함수 조립에서 어떤 역할을 하는지 알아봤다. 이러한 특징을 이용해 함수를 더 자유롭게 조립하는 방법을 이번 글에서 살펴보겠다.</p>\n<p><img src=\"/assets/imgs/2017/05/pipeline.png\" alt=\"curry-banner\"></p>\n<h2 id=\"체이닝\" style=\"position:relative;\"><a href=\"#%EC%B2%B4%EC%9D%B4%EB%8B%9D\" aria-label=\"체이닝 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>체이닝</h2>\n<p>아래와 같은 함수 체이닝 기법은 코드를 매우 간결하고 읽기 쉽게 만든다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Chris\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>사람 객체를 만들어 이름과 나이를 설정한 뒤 문자열 정보를 얻는 코드다. 체이닝의 핵심은 각 함수가 this를 반환하는 것이다. person() 함수는 이렇게 구현할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> _name <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n  <span class=\"token keyword\">let</span> _age <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">setName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_name <span class=\"token operator\">=</span> name\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">setAge</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_age <span class=\"token operator\">=</span> age\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">toString</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>_this<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> _this<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>자바스크립트 유틸리티 라이브러리인 lodash, underscore 등을 사용하면 this를 반환하는 함수를 만들지 않고서도 체이닝을 사용할수 있다. chain()과 value()를 사용한 아래 코드를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> r <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">chain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 3, 9]</span></code></pre></div>\n<p>배열 [2, 1, 3]을 chain() 함수에 전달하면 특별한 lodash 객체를 반환한다. 반환된 객체가 제공하는 메소드는 [2, 1, 3] 배열를 파라매터로 전달받아 실행되는 것이 일반 lodash 객체와 다른 점이다.</p>\n<p>또한 이것은 value() 메소드가 호출되기 전까지는 실행되지 않고 기다리는 게으른(lazy) 동작이다. 아래 코드로 확인해 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> r <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">chain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 아무것도 출력하지 않음</span></code></pre></div>\n<p>tap() 메소드는 체이닝 중간에 끼여들어 전달받은 함수 console.log()를 실행한다. 위 코드에서 아직 value() 메소드를 실행하지 않았기 때문에 터미널에는 아무것도 출력되지 않을 것이다. 단지 미래 행동을 미리 설정했다고 이해하면 되겠다.</p>\n<h3 id=\"이러한-체이닝을-직접-구현해-보자\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%9F%AC%ED%95%9C-%EC%B2%B4%EC%9D%B4%EB%8B%9D%EC%9D%84-%EC%A7%81%EC%A0%91-%EA%B5%AC%ED%98%84%ED%95%B4-%EB%B3%B4%EC%9E%90\" aria-label=\"이러한 체이닝을 직접 구현해 보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이러한 체이닝을 직접 구현해 보자</h3>\n<p>lodash에서 제공하는 이러한 체이닝 기법을 직접 구현하면서 내부 동작을 이해해 보자. 아래 LazyChain 클래스 코드부터 시작해 보겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LazyChain</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_target <span class=\"token operator\">=</span> obj\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_calls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">methodName<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_calls<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target</span> <span class=\"token operator\">=></span> target<span class=\"token punctuation\">[</span>methodName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>생성자 함수에서 <code class=\"language-text\">_target</code>과 <code class=\"language-text\">_calls</code>란 내부 변수를 설정했다. 생성자 함수에서 받은 데이터를 <code class=\"language-text\">_target</code> 변수에 저장하고, 체이닝으로 추가할 함수를 <code class=\"language-text\">_calls</code> 배열에 넣을 용도다. <code class=\"language-text\">_target</code>은 체이닝으로 연결된 메소드를 실행할 때 전달 인자로 사용될 것이다.</p>\n<p>체이닝으로 연결할 함수는 invoke() 메소드로 추가할 수 있다. 타겟 객체를 받는 함수를 기존 <code class=\"language-text\">_calls</code> 배열에 추가하는데 이 함수는 methodName과 이름이 같은 메쏘드를 타겟객체에서 찾은 후 실행한다. 함수 호출뒤 체이닝을 위한 this를 반환한다.</p>\n<p>아래 LazyChain 사용법을 보면 동작을 이해하는데 수월할 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">LazyChain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"concat\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sort\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>_calls <span class=\"token comment\">// [[Function], [Function]]</span></code></pre></div>\n<p>invoke 메소드로 배열 메소드인 sort와 concat을 체이닝에 추가했다. 이 함수는 아직 실행되지 않은 형태, 즉 래핑된 형태로 <code class=\"language-text\">_calls</code> 배열에 담겨 있을 것이다. 이렇게 함수를 실행하지 않고 감싸고만 있는 것을 성크(thunk)라고 한다.</p>\n<p>그렇다면 이 성크를 실행할 메소드가 필요한데 LazyChain의 force() 메소드로 구현했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LazyChain</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">force</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_calls<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> thunk</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">thunk</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_target<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>성크 배열인 <code class=\"language-text\">_calls</code>를 리듀스로 돌려서 하나씩 실행한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">LazyChain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"concat\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sort\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">force</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 2, 3, 4, 5, 6]</span></code></pre></div>\n<p>이번에는 체이닝 중간에 끼여들수 있는, 그래서 중간 값을 확인할 용도로 사용할 tap 메소드를 만들어 보겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LazyChain</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">tap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fun</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_calls<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>함수를 인자로 받아 이것을 감싼 성크를 <code class=\"language-text\">_calls</code> 배열에 추가한다. tab은 어떤 행동을 하고나서 그 결과가 아니라 타겟객체를 그대로 반환하는 것이 invoke()와 다른 점이다. 마지막으로 체이닝을 위해 this를 반환한다.</p>\n<p>아래는 tap()을 사용한 코드다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">LazyChain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"concat\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [ 2, 1, 3, 6, 4, 5 ]</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sort\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">force</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [ 1, 2, 3, 4, 5, 6 ]</span></code></pre></div>\n<h3 id=\"체이닝의-한계\" style=\"position:relative;\"><a href=\"#%EC%B2%B4%EC%9D%B4%EB%8B%9D%EC%9D%98-%ED%95%9C%EA%B3%84\" aria-label=\"체이닝의 한계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>체이닝의 한계</h3>\n<p>LazyChain은 초기에 전달한 공통 객체 <code class=\"language-text\">_target</code>의 메소드만 연결할 수 있다는 한계를 가진다. 뿐만 아니라 LazyChaine은 초기 전달할 객체를 변이시킬 가능성도 가지고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">LazyChain</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"splice\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">force</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [2, 1] ->초기 데이터 변경됨</span></code></pre></div>\n<p>대부분의 배열 메소드는 기존 객체를 변이 시키지 않고 새로운 배열을 반환한다. splice()는 다르다. 기존 객체를 변경시키기 때문에 [2, 1, 3]에 splice 메소드 체인을 추가하면 기존 배열이 변경된다. 이것은 데이터의 불변성을 지키기 못한 것이고, 인자를 변이시키지 않는 순수 함수의 조건에도 어긋난다.</p>\n<p>다음으로 순수함수와 불변성을 유지할수 있는 파이프라이닝 기법을 소개하겠다. 우리는 여전히 함수를 조립해야 하니깐 말이다.</p>\n<h2 id=\"파이프라이닝\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B4%EB%8B%9D\" aria-label=\"파이프라이닝 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파이프라이닝</h2>\n<p>LazyChain이 객체에 종속적인 메소드를 연결한 것이라면, 아래 pipeline은 데이터와 이를 가공할 함수를 인자로 받는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">pipeline</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">seed<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>funs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  funs<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> fun</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> seed<span class=\"token punctuation\">)</span></code></pre></div>\n<p>LazyChain과 비교하면 매우 짧은 코드다. 초기 데이터는 seed로 들어오고 이것을 가지고 처리할 함수목록이 funs 배열로 들어올 것이다. 입력한 데이터를 리듀스로 돌리면서 함수를 실행해 나간다. 마치 LazyChain의 force()와 비슷한 동작이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 42</span>\n<span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> <span class=\"token operator\">-</span>n<span class=\"token punctuation\">)</span> <span class=\"token comment\">// -42</span></code></pre></div>\n<p>사용법도 간단하다. 타겟 객체를 첫번째 인자로 전달하고 나머지는 파이프라인을 구성할 함수들을 전달한다. 이렇게 만든 파이프라인에 타겟 객체를 흘려보내는 모습이 될것이다.</p>\n<p>아래는 제곱함수 sqr을 연결한 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sqr</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">*</span> n\n<span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> sqr<span class=\"token punctuation\">,</span> sqr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 16</span></code></pre></div>\n<h3 id=\"파이프라인끼리는-조합할-수-있다\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8%EB%81%BC%EB%A6%AC%EB%8A%94-%EC%A1%B0%ED%95%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8B%A4\" aria-label=\"파이프라인끼리는 조합할 수 있다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파이프라인끼리는 조합할 수 있다</h3>\n<p>파이프라인에 전달된 함수가 순수함수라면 파이프라인으로 만든 함수도 순수함수이다. 따라서 파이프라인으로 만든 함수를 다시 파이프라이닝할 수 있다. 아래 코드는 sqr 두 개를 연결한 doubleSqr 함수를 다시 sqr 함수로 연결한 코드다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">doubleSqr</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> <span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> sqr<span class=\"token punctuation\">,</span> sqr<span class=\"token punctuation\">)</span>\n<span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> doubleSqr<span class=\"token punctuation\">,</span> sqr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 256</span></code></pre></div>\n<p>이처럼 함수의 순수성을 지킴으로 인해 함수 조립의 유연성을 극대화 할 수 있다.</p>\n<h3 id=\"인자가-두-개인-함수의-조합\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%9E%90%EA%B0%80-%EB%91%90-%EA%B0%9C%EC%9D%B8-%ED%95%A8%EC%88%98%EC%9D%98-%EC%A1%B0%ED%95%A9\" aria-label=\"인자가 두 개인 함수의 조합 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인자가 두 개인 함수의 조합</h3>\n<p>파이프라이닝은 각 함수간에 데이터를 한 개만 전달할 수 있는 구조다. sqr이 인자를 하나만 받기 때문에 파이프라이닝으로 연결할 수 있었다. 만약 add 함수처럼 인자가 두 개인 함수는 어떻게 파이프라이닝으로 연결할 수 있을까?</p>\n<p>커링은 다중인자를 받는 함수를 단일 인자를 받는 함수열로 변경하는 녀석이다. 커링을 이용해 add(a, b) 처럼 두 개 인자를 받는 함수를 b는 4로 고정하고 a 하나만 받는 함수로 변경할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">curry</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fun<span class=\"token punctuation\">,</span> arg2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">arg1</span> <span class=\"token operator\">=></span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b\n<span class=\"token keyword\">const</span> add4 <span class=\"token operator\">=</span> <span class=\"token function\">curry</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>add4(6)은 add(6, 4)를 호출할 것이다. add() 함수의 인자를 1개로 고정시켰으니 이제 파이프라인으로 연결할 수 있게 되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> doubleSqr<span class=\"token punctuation\">,</span> add4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 20</span></code></pre></div>\n<h3 id=\"파이프라인의-한계\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8%EC%9D%98-%ED%95%9C%EA%B3%84\" aria-label=\"파이프라인의 한계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파이프라인의 한계</h3>\n<p>하지만 파이프라인도 한계가 있다. 함수 간에 전달되는 공통 객체의 모양이 같아야만 한다는 것이다. 파이프라인에 console.log처럼 터미널에 문자열만 출력하고 undefined 값을 반환하는 함수는 어떻게 연결할 수 있을까?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  sqr<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 4</span>\n  console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 4 출력</span>\n  sqr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span></code></pre></div>\n<p>첫번째 sqr(2)가 실행되어 숫자 4가 console.log()로 전달될 것이다. 그리고 console.log(4)는 콘솔에 숫자 4만만 출력하고 undefeind를 sql 함수로 전달한다. 결국 sqr(undefined)는 숫자형 인자가 아니라서 NaN을 반환하게 된다.</p>\n<p>물론 console.log를 래핑해 파이프라인으로 엮을 수 있겠지만 근본적인 해결 방법은 아니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  sqr<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 4</span>\n  <span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 4 출력</span>\n  sqr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 16</span></code></pre></div>\n<p>함수의 인터페이스에 구애받지 않고 함수를 자유자재로 연결하는 방법에 대해 알아보자.</p>\n<h2 id=\"데이터-흐름과-제어-흐름\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%9D%90%EB%A6%84%EA%B3%BC-%EC%A0%9C%EC%96%B4-%ED%9D%90%EB%A6%84\" aria-label=\"데이터 흐름과 제어 흐름 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 흐름과 제어 흐름</h2>\n<h3 id=\"공통모양찾기\" style=\"position:relative;\"><a href=\"#%EA%B3%B5%ED%86%B5%EB%AA%A8%EC%96%91%EC%B0%BE%EA%B8%B0\" aria-label=\"공통모양찾기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>공통모양찾기</h3>\n<p>파이프라인을 대체할수 있는 actions()라는 함수를 만들었다. 함수 목록을 acts 배열로 받아서 결과를 반환하는 함수다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">actions</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>acts</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">seed</span> <span class=\"token operator\">=></span>\n  acts<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">stateObj<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span>stateObj<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        answers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>stateObj<span class=\"token punctuation\">.</span>answers<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span>answer<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> answers<span class=\"token punctuation\">,</span> state<span class=\"token operator\">:</span> result<span class=\"token punctuation\">.</span>state <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> answers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> state<span class=\"token operator\">:</span> seed <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span></code></pre></div>\n<p>코드가 좀 복잡해졌다. 혹시 'stateObj가 공통 객체아닌가?'라고 눈치챘다면 어느정도 이해한 셈이다. 차근차근 읽어보자.</p>\n<p>우선 actions는 함수로 구성된 acts 배열을 받은 뒤, 초기값 seed를 인자로 받는 함수를 반환한다. 반환된 함수는 함수 목록을 리듀스로 돌려 실행하는데 이 때 공통객체인 stateObj 를 활용해 값을 계산한다.</p>\n<p>stateObj는 answers와 state 두 개의 키로 구성된 객체다.</p>\n<p>answers는 파이프라인으로 연결된 함수가 실행될 때마다 그 결과값을 저장하는 배열이다. 각 함수(action)가 계산한 결과(answer)를 저장하는 히스토리라고 이해하면 되겠다.</p>\n<p>state는 함수 실행시마다 그 결과값으로 갱신되는 변수다. 리듀스가 종료되면 최종 결과 값이 저장될 것이다.</p>\n<p>actions 함수는 리듀스 결과 값을 반환하는데 모든 함수의 결과값을 저장한 answers 배열과 최종 결과값을 저장한 state로 구성된 객체를 반환할 것이다.</p>\n<p>actions로 함수를 연결하기 위해서는 기존의 sqr 함수를 조금 수정해야 한다. actions에서는 전달받은 함수가 state와 answer를 가지고 있다고 가정했기 때문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sqr</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">*</span> n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">msqr</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> answer<span class=\"token operator\">:</span> <span class=\"token function\">sqr</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> state<span class=\"token operator\">:</span> <span class=\"token function\">sqr</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이렇게 정의한 msqr은 actions의 인자로 전달해서 연결할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> doubleSqr <span class=\"token operator\">=</span> <span class=\"token function\">actions</span><span class=\"token punctuation\">(</span>msqr<span class=\"token punctuation\">,</span> msqr<span class=\"token punctuation\">)</span>\n<span class=\"token function\">doubleSqr</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// { values: [ 4, 16 ], state: 16 }</span></code></pre></div>\n<h3 id=\"값을-리턴하지-않는-함수를-연결하기\" style=\"position:relative;\"><a href=\"#%EA%B0%92%EC%9D%84-%EB%A6%AC%ED%84%B4%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-%ED%95%A8%EC%88%98%EB%A5%BC-%EC%97%B0%EA%B2%B0%ED%95%98%EA%B8%B0\" aria-label=\"값을 리턴하지 않는 함수를 연결하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>값을 리턴하지 않는 함수를 연결하기</h3>\n<p>actions를 만든 목적은 파이프라이닝과 달리 결과를 반환하지 않는 함수도 연결하기 위해서다. 터미널 로그만 찍고 값을 반환하지 않는 함수 log() 함수는 어떻게 기존 함수와 연결할 수 있을까?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">log</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">msg</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mlog\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span></code></pre></div>\n<p>sqr을 actions에 전달하기 위해 sqr을 msqr로 래핑했듯이 log도 mlog로 래핑해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mlog</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">msg</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> state<span class=\"token operator\">:</span> msg <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>메세지를 받아 로그를 찍고 객체를 반환한다. 이 객체는 state에 전달받은 msg 값을 그대로 사용한다. actions에서는 mlog가 반환한 객체의 state 키를 통해 다음 함수의 전달 인자로 사용할 것이다.</p>\n<p>msqr과는 달리 mlog의 반환 객체는 answer가 없다. 즉 이 함수는 반환할 것이 없다는 의미다. actions에서는 mlog의 반환 객체에 answer 값이 없으므로 answers 배열에 undefined 값을 저장할 것이다.</p>\n<p>아래는 mlog를 기존 함수들과 연결한 코드다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> doubleSqrLog <span class=\"token operator\">=</span> <span class=\"token function\">actions</span><span class=\"token punctuation\">(</span>msqr<span class=\"token punctuation\">,</span> mlog<span class=\"token punctuation\">,</span> msqr<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">doubleSqrLog</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//'mlog 4' 가 터미널에 출력된다</span>\n<span class=\"token comment\">// { answers: [ 4, undefined, 16 ], state: 16 }</span></code></pre></div>\n<p>이처럼 actions를 통해 형태가 다른 함수를 서로 연결할 수 있다. 하지만 연결할 함수를 actions에 전달하기 위한 처리과정이 다소 번거롭다.</p>\n<h3 id=\"액션을-단순화하기-위한-lift-함수\" style=\"position:relative;\"><a href=\"#%EC%95%A1%EC%85%98%EC%9D%84-%EB%8B%A8%EC%88%9C%ED%99%94%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-lift-%ED%95%A8%EC%88%98\" aria-label=\"액션을 단순화하기 위한 lift 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>액션을 단순화하기 위한 lift() 함수</h3>\n<p>연결할 함수를 actions 전달용 함수로 변환하는 함수인 life()를 만들어 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">lift</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">answerFun<span class=\"token punctuation\">,</span> stateFun</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> answer <span class=\"token operator\">=</span> <span class=\"token function\">answerFun</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span>\n  state <span class=\"token operator\">=</span> stateFun <span class=\"token operator\">?</span> <span class=\"token function\">stateFun</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> answer\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> answer<span class=\"token punctuation\">,</span> state <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>actions는 매번 함수 호출시 answers와 state를 갱신한다. 이것을 위해 actions로 연결할 함수는 answers와 state에 어떤 값이 저장될지 설정할수 있어야할 것이다. 그래서 answerFun과 stateFun 함수를 인자로 받았다. 그리고 state를 인자로 받는 함수를 반환한다.</p>\n<p>answerFun으로 이 함수의 대답(answer)을 구하고 stateFun으로 다음 함수로 전달할 state 값을 구한다. 마지막으로 이 두 값으로 구성한 객체를 반환하는 것이 life의 역할이다.</p>\n<p>life()를 사용하는 코드를 보면 수월하게 이해할수 있을 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> lsqr <span class=\"token operator\">=</span> <span class=\"token function\">lift</span><span class=\"token punctuation\">(</span>sqr<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> llog <span class=\"token operator\">=</span> <span class=\"token function\">lift</span><span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">,</span> <span class=\"token parameter\">v</span> <span class=\"token operator\">=></span> v<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> ladd6 <span class=\"token operator\">=</span> <span class=\"token function\">life</span><span class=\"token punctuation\">(</span><span class=\"token function\">curry</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>lsqr는 answerFun에 sqr로 전달해서 만든 함수다. 반환된 함수는 state를 받는 함수를 반환할 것이다.</p>\n<p>이제 남은것은 lift로 만든 함수를 actions로 연결하는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> doubleSqrLog2 <span class=\"token operator\">=</span> <span class=\"token function\">actions</span><span class=\"token punctuation\">(</span>lsqr<span class=\"token punctuation\">,</span> llog<span class=\"token punctuation\">,</span> ladd6<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">doubleSqrLog</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// { answers: [ 4, undefined, 10 ], state: 10 }</span>\n<span class=\"token comment\">// 중간에 'mlog 4' 가 콘솔에 출력된다</span></code></pre></div>\n<p>이처럼 actions를 이용해서 리턴값이 다른 함수들을 연결할 수 있다.</p>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<p>함수 체이닝을 직접 구현해 보면서 함수 연결 방법에 대해 이해할 수 있었다. 객체 종속적인 메소드의 한계를 극복하기 위해 파이프라이닝을 구현했고 리턴타입이 다른 함수들까지 연결하기 위한 actions() 함수를 구현해 봤다.</p>\n<p>샘플코드: <a href=\"https://github.com/jeonghwan-kim/functionalstudy/tree/master/blog-sample-code/08-pipeline\">https://github.com/jeonghwan-kim/functionalstudy</a></p>\n<p>이것으로 함수형 JS 연재를 마친다. 전체 글 목록은 아래를 참고.</p>\n<blockquote>\n<ul>\n<li><a href=\"/js/2017/04/03/high-order-function-in-javascript.html\">(함수형JS) 고차 함수</a></li>\n<li><a href=\"/js/2017/04/10/function-by-function.html\">(함수형JS) 함수로 함수 만들기1 다형성</a></li>\n<li><a href=\"/js/2017/04/17/curry.html\">(함수형JS) 함수로 함수 만들기2 커링</a></li>\n<li><a href=\"/js/2017/04/21/partial-application.html\">(함수형JS) 함수로 함수 만들기3 부분적용</a></li>\n<li><a href=\"/js/2017/04/23/Purity-Immutability-and-Policies-for-Change.html\">(함수형JS) 순수성, 불변성, 변경정책</a></li>\n<li><a href=\"/js/2017/05/11/pipeline.html\">(함수형JS) 흐름기반 프로그래밍</a></li>\n</ul>\n</blockquote>","fields":{"dateStr":"2017년 05월 11일","date":"2017-05-11T00:00:00.000Z","slug":"/js/2017/05/11/pipeline.html"},"frontmatter":{"title":"흐름 기반 프로그래밍","tags":["JavaScript","functional-programming"],"seriesId":"bd02e3bf-8437-5d5c-a1d4-463b0f61eadb","videoId":null,"featured_image":"/assets/imgs/2017/04/17/functional-javascript-thumbnail.png","featuredImage":null},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EC%B2%B4%EC%9D%B4%EB%8B%9D\">체이닝</a></p>\n<ul>\n<li><a href=\"#%EC%9D%B4%EB%9F%AC%ED%95%9C-%EC%B2%B4%EC%9D%B4%EB%8B%9D%EC%9D%84-%EC%A7%81%EC%A0%91-%EA%B5%AC%ED%98%84%ED%95%B4-%EB%B3%B4%EC%9E%90\">이러한 체이닝을 직접 구현해 보자</a></li>\n<li><a href=\"#%EC%B2%B4%EC%9D%B4%EB%8B%9D%EC%9D%98-%ED%95%9C%EA%B3%84\">체이닝의 한계</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B4%EB%8B%9D\">파이프라이닝</a></p>\n<ul>\n<li><a href=\"#%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8%EB%81%BC%EB%A6%AC%EB%8A%94-%EC%A1%B0%ED%95%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8B%A4\">파이프라인끼리는 조합할 수 있다</a></li>\n<li><a href=\"#%EC%9D%B8%EC%9E%90%EA%B0%80-%EB%91%90-%EA%B0%9C%EC%9D%B8-%ED%95%A8%EC%88%98%EC%9D%98-%EC%A1%B0%ED%95%A9\">인자가 두 개인 함수의 조합</a></li>\n<li><a href=\"#%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8%EC%9D%98-%ED%95%9C%EA%B3%84\">파이프라인의 한계</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%9D%90%EB%A6%84%EA%B3%BC-%EC%A0%9C%EC%96%B4-%ED%9D%90%EB%A6%84\">데이터 흐름과 제어 흐름</a></p>\n<ul>\n<li><a href=\"#%EA%B3%B5%ED%86%B5%EB%AA%A8%EC%96%91%EC%B0%BE%EA%B8%B0\">공통모양찾기</a></li>\n<li><a href=\"#%EA%B0%92%EC%9D%84-%EB%A6%AC%ED%84%B4%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-%ED%95%A8%EC%88%98%EB%A5%BC-%EC%97%B0%EA%B2%B0%ED%95%98%EA%B8%B0\">값을 리턴하지 않는 함수를 연결하기</a></li>\n<li><a href=\"#%EC%95%A1%EC%85%98%EC%9D%84-%EB%8B%A8%EC%88%9C%ED%99%94%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-lift-%ED%95%A8%EC%88%98\">액션을 단순화하기 위한 lift() 함수</a></li>\n</ul>\n</li>\n<li><a href=\"#%EC%A0%95%EB%A6%AC\">정리</a></li>\n</ul>"},"series":{"id":"bd02e3bf-8437-5d5c-a1d4-463b0f61eadb","title":"함수형 프로그래밍"},"video":null,"allMarkdownRemark":{"nodes":[{"id":"c973665d-5f8e-5250-8db8-93af43fde289","fields":{"slug":"/js/2017/04/03/high-order-function-in-javascript.html","date":"2017-04-03T00:00:00.000Z"},"frontmatter":{"title":"고차 함수","seriesId":"bd02e3bf-8437-5d5c-a1d4-463b0f61eadb"}},{"id":"cc8945c8-f0fc-5865-b777-ae8b6d53b448","fields":{"slug":"/js/2017/04/10/function-by-function.html","date":"2017-04-10T00:00:00.000Z"},"frontmatter":{"title":"함수로 함수 만들기1 다형성","seriesId":"bd02e3bf-8437-5d5c-a1d4-463b0f61eadb"}},{"id":"f951a2e6-a649-50ff-b2b8-02e7599daaff","fields":{"slug":"/js/2017/04/17/curry.html","date":"2017-04-17T00:00:00.000Z"},"frontmatter":{"title":"함수로 함수 만들기2 커링","seriesId":"bd02e3bf-8437-5d5c-a1d4-463b0f61eadb"}},{"id":"bca7b56d-6363-5e79-b825-7285ea55c53f","fields":{"slug":"/js/2017/04/21/partial-application.html","date":"2017-04-21T00:00:00.000Z"},"frontmatter":{"title":"함수로 함수 만들기3 부분적용","seriesId":"bd02e3bf-8437-5d5c-a1d4-463b0f61eadb"}},{"id":"53ca74d7-6d84-5680-99b8-2765d74787fb","fields":{"slug":"/js/2017/04/23/Purity-Immutability-and-Policies-for-Change.html","date":"2017-04-23T00:00:00.000Z"},"frontmatter":{"title":"순수성, 불변성, 변경정책","seriesId":"bd02e3bf-8437-5d5c-a1d4-463b0f61eadb"}},{"id":"ffe68d3c-e644-5779-9d7b-a82159fb60ac","fields":{"slug":"/js/2017/05/11/pipeline.html","date":"2017-05-11T00:00:00.000Z"},"frontmatter":{"title":"흐름 기반 프로그래밍","seriesId":"bd02e3bf-8437-5d5c-a1d4-463b0f61eadb"}}]}},"pageContext":{"slug":"/js/2017/05/11/pipeline.html","date":"2017-05-11T00:00:00.000Z","seriesId":"bd02e3bf-8437-5d5c-a1d4-463b0f61eadb","videoId":null,"previous":{"fields":{"slug":"/js/2017/04/23/Purity-Immutability-and-Policies-for-Change.html","date":"2017-04-23T00:00:00.000Z","beforeGatsby":true},"frontmatter":{"title":"순수성, 불변성, 변경정책","category":"series","permalink":"js/2017/04/23/Purity-Immutability-and-Policies-for-Change.html","seriesId":"bd02e3bf-8437-5d5c-a1d4-463b0f61eadb","videoId":null}},"next":{"fields":{"slug":"/js/2017/05/15/webpack.html","date":"2017-05-15T00:00:00.000Z","beforeGatsby":true},"frontmatter":{"title":"웹팩의 기본 개념","category":"dev","permalink":"js/2017/05/15/webpack.html","seriesId":null,"videoId":"59f0bdf2-e898-50db-8800-52a3fa758f04"}}}},"staticQueryHashes":["1591182808"]}