{"componentChunkName":"component---src-templates-blog-post-index-tsx","path":"/series/2019/12/10/frontend-dev-env-webpack-basic.html","result":{"data":{"site":{"siteMetadata":{"title":"김정환 블로그","url":"https://jeonghwan-kim.github.io","series":[{"id":20200102,"title":"프론트엔드 개발환경의 이해"},{"id":20181201,"title":"Node.js 코드랩"},{"id":20171002,"title":"Express.js 만들기"},{"id":20170422,"title":"함수형 프로그래밍"},{"id":20150222,"title":"Hapi.js로 API 서버 시작하기"},{"id":20160611,"title":"앵귤러로 Todo앱 만들기"}],"videos":[{"id":1,"url":"https://www.inflearn.com/course/프론트엔드-개발환경","thumb":"https://cdn.inflearn.com/public/courses/324671/course_cover/638eee1a-6381-402d-a17b-3724751414f1/frontend-env-eng.png","title":"프론트엔드 개발환경의 이해와 실습"},{"id":2,"url":"https://www.inflearn.com/course/vuejs","thumb":"https://cdn.inflearn.com/wp-content/uploads/kjh_Vuejs-3.jpg","title":"트렐로 개발로 배우는 Vuejs, Vuex, Vue-Router 프론트엔드 실전 기술"},{"id":3,"url":"https://www.inflearn.com/course/순수js-vuejs-개발-강좌","thumb":"https://cdn.inflearn.com/wp-content/uploads/vuejsandpure.png","title":"실습 UI 개발로 배워보는 순수 javascript 와 VueJS 개발"},{"id":4,"url":"https://www.inflearn.com/course/테스트주도개발-tdd-nodejs-api","thumb":"https://cdn.inflearn.com/wp-content/uploads/nodetdd.png","title":"테스트주도개발(TDD)로 만드는 NodeJS API 서버"},{"id":5,"url":"https://www.inflearn.com/course/tdd-견고한-소프트웨어-만들기","thumb":"https://cdn.inflearn.com/wp-content/uploads/software-1.jpg","title":"견고한 JS 소프트웨어 만들기"},{"id":6,"url":"https://www.youtube.com/watch?v=_QCNqV_EfzE","thumb":"/assets/imgs/youtube_20200407.jpg","title":"알아두면 쓸데있는 VSCode 노하우"}]}},"markdownRemark":{"id":"5d0b2d29-5875-5945-9cad-c1e7308cef69","excerpt":"1. 배경 먼저 모듈에 대해 이야기 해보자.\n문법 수준에서 모듈을 지원하기 시작한 것은 ES2015부터다.\nimport/export 구문이 없었던 모듈 이전 상황을 살펴보는 것이 웹팩 등장 배경을 설명하는데 수월할 것 같다. 아래 덧셈 함수를 보자. math.js: app.js…","html":"<h1 id=\"1-배경\" style=\"position:relative;\"><a href=\"#1-%EB%B0%B0%EA%B2%BD\" aria-label=\"1 배경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 배경</h1>\n<p>먼저 모듈에 대해 이야기 해보자.\n문법 수준에서 모듈을 지원하기 시작한 것은 ES2015부터다.\nimport/export 구문이 없었던 모듈 이전 상황을 살펴보는 것이 웹팩 등장 배경을 설명하는데 수월할 것 같다.</p>\n<p>아래 덧셈 함수를 보자.</p>\n<p>math.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 전역 공간에 sum이 노출</span></code></pre></div>\n<p>app.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></code></pre></div>\n<p>위 코드는 모두 하나의 HTML 파일 안에서 로딩해야만 실행된다.\nmath.js가 로딩되면 app.js는 이름 공간에서 'sum'을 찾은 뒤 이 함수를 실행한다.\n문제는 'sum'이 전역 공간에 노출된다는 것.\n다른 파일에서도 'sum'이란 이름을 사용한다면 충돌한다.</p>\n<h2 id=\"11-iife-방식의-모듈\" style=\"position:relative;\"><a href=\"#11-iife-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EB%AA%A8%EB%93%88\" aria-label=\"11 iife 방식의 모듈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1 IIFE 방식의 모듈</h2>\n<p>이러한 문제를 예방하기 위해 스코프를 사용한다.\n함수 스코프를 만들어 외부에서 안으로 접근하지 못하도록 공간을 격리하는 것이다.\n스코프 안에서는 자신만의 이름 공간이 존재하므로 스코프 외부와 이름 충돌을 막을 수 있다.</p>\n<p>math.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> math <span class=\"token operator\">=</span> math <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// math 네임스페이스</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  math<span class=\"token punctuation\">.</span>sum <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 네이스페이스에 추가</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>같은 코드를 즉시실행함수로 감쌌기 때문에 다른 파일에서 이 안으로 접근할 수가 없다.\n심지어 같은 파일일지라도 말이다.\n자바스크립트 함수 스코프의 특징이다.\n'sum'이란 이름은 즉시실행함수 안에 감추어졌기 때문에 외부에서는 같은 이름을 사용해도 괜찮다.\n전역에 등록한 'math'라는 이름 공간만 잘 활용하면 된다.</p>\n<h2 id=\"12-다양한-모듈-스펙\" style=\"position:relative;\"><a href=\"#12-%EB%8B%A4%EC%96%91%ED%95%9C-%EB%AA%A8%EB%93%88-%EC%8A%A4%ED%8E%99\" aria-label=\"12 다양한 모듈 스펙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.2 다양한 모듈 스펙</h2>\n<p>이러한 방식으로 자바스크립트 모듈을 구현하는 대표적인 명세가 AMD와 CommonJS다.</p>\n<p><strong><a href=\"http://www.commonjs.org/\">CommonJS</a></strong>는 자바스크립트를 사용하는 모든 환경에서 모듈을 하는 것이 목표다.\nexports 키워드로 모듈을 만들고 require() 함수로 불러 들이는 방식이다.\n대표적으로 서버 사이드 플래폼인 Node.js에서 이를 사용한다.</p>\n<p>math.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">exports <span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>app.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> math <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./math.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmath<span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></code></pre></div>\n<p><strong><a href=\"https://github.com/amdjs/amdjs-api/wiki/AMD\">AMD</a></strong>(Asynchronous Module Definition)는 비동기로 로딩되는 환경에서 모듈을 사용하는 것이 목표다.\n주로 브라우져 환경이다.</p>\n<p><strong><a href=\"https://github.com/umdjs/umd\">UMD</a></strong>(Universal Module Definition)는 AMD기반으로 CommonJS 방식까지 지원하는 통합 형태다.</p>\n<p>이렇게 각 커뮤니티에서 각자의 스펙을 제안하다가 <strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\">ES2015에서 표준 모듈 시스템</a></strong>을 내 놓았다.\n지금은 바벨과 웹팩을 이용해 모듈 시스템을 사용하는 것이 일반적이다.\nES2015 모듈 시스템의 모습을 살펴보자.</p>\n<p>math.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>app.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> math <span class=\"token keyword\">from</span> <span class=\"token string\">'./math.js'</span><span class=\"token punctuation\">;</span>\nmath<span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></code></pre></div>\n<p><code class=\"language-text\">export</code> 구문으로 모듈을 만들고 <code class=\"language-text\">import</code> 구문으로 가져올 수 있다.</p>\n<h2 id=\"13-브라우져의-모듈-지원\" style=\"position:relative;\"><a href=\"#13-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%B8%EC%9D%98-%EB%AA%A8%EB%93%88-%EC%A7%80%EC%9B%90\" aria-label=\"13 브라우져의 모듈 지원 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.3 브라우져의 모듈 지원</h2>\n<p>안타깝게도 모든 브라우져에서 모듈 시스템을 지원하지는 않는다.\n인터넷 익스플로러를 포함한 몇 몇 브라우져에서는 여전히 모듈을 사용하지 못한다.\n가장 많이 사용하는 크롬 브라우져만 잠시 살펴보자.\n(<a href=\"https://developers.google.com/web/updates/2017/09/nic61#modules\">버전 61부터 모듈시스템을 지원</a> 한다)</p>\n<p>index.html:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>app.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><code class=\"language-text\">&lt;script&gt;</code> 태그로 로딩할 때 <code class=\"language-text\">type=&quot;text/javascript&quot;</code> 대신 <code class=\"language-text\">type=&quot;module&quot;</code>을 사용한다.\napp.js는 모듈을 사용할 수 있다.</p>\n<p>그러나 브라우져에 무관하게 모듈을 사용하고 싶은데...... 이제야 웹팩이 나올 차례다.</p>\n<h1 id=\"2-엔트리아웃풋\" style=\"position:relative;\"><a href=\"#2-%EC%97%94%ED%8A%B8%EB%A6%AC%EC%95%84%EC%9B%83%ED%92%8B\" aria-label=\"2 엔트리아웃풋 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 엔트리/아웃풋</h1>\n<p><a href=\"https://webpack.js.org/\">웹팩</a>은 여러개 파일을 하나의 파일로 합쳐주는 번들러(bundler)다.\n하나의 시작점(entry point)으로부터 의존적인 모듈을 전부 찾아내서 하나의 결과물을 만들어 낸다.\napp.js부터 시작해 math.js 파일을 찾은 뒤 하나의 파일로 만드는 방식이다.</p>\n<p>간단히 웹팩으로 번들링 작업을 해보자.</p>\n<p>번들 작업을 하는 <a href=\"https://github.com/webpack/webpack\">webpack</a> 패키지와 웹팩 터미널 도구인 <a href=\"https://github.com/webpack/webpack-cli\">webpack-cli</a>를 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install -D webpack webpack-cli</code></pre></div>\n<p>설치 완료하면 <code class=\"language-text\">node_modules/.bin</code> 폴더에 실행 가능한 명령어가 몇 개 생긴다.\nwebpack과 webpack-cli가 있는데 둘 중 하나를 실행하면 된다.\n<code class=\"language-text\">--help</code> 옵션으로 사용 방법을 확인해 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ node_modules/.bin/webpack --help\n\n  --mode                 Enable production optimizations or development hints.\n                                     [선택: &quot;development&quot;, &quot;production&quot;, &quot;none&quot;]\n  --entry      The entry point(s) of the compilation.                   [문자열]\n  --output, -o                  The output path and file for compilation assets</code></pre></div>\n<p><code class=\"language-text\">--mode</code>, <code class=\"language-text\">--entry</code>, <code class=\"language-text\">--output</code> 세 개 옵션만 사용하면 코드를 묶을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ node_modules/.bin/webpack --mode development --entry ./src/app.js --output dist/main.js</code></pre></div>\n<ul>\n<li><code class=\"language-text\">--mode</code>는 웹팩 실행 모드는 의미하는데 개발 버전인 development를 지정한다</li>\n<li><code class=\"language-text\">--entry</code>는 시작점 경로를 지정하는 옵션이다</li>\n<li><code class=\"language-text\">--output</code>은 번들링 결과물을 위치할 경로다</li>\n</ul>\n<p>위 명령어를 실행하면 dist/main.js에 번들된 결과가 저장된다.</p>\n<p><img src=\"/assets/imgs/2019/12/11/webpack-bundle-result.jpg\" alt=\"웹팩 번들 결과\"></p>\n<p>이 코드를 index.html에 로딩하면 번들링 전과 똑같은 결과를 만든다.</p>\n<p>index.html:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>dist/main.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>옵션 중 <code class=\"language-text\">--config</code> 항목을 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ node_modules/.bin/webpack --help\n\n  --config               Path to the config file\n                         [문자열] [기본: webpack.config.js or webpackfile.js]</code></pre></div>\n<p>이 옵션은 웹팩 설정파일의 경로를 지정할 수 있는데 기본 파일명이 webpack.config.js 혹은 webpackfile.js다.\n<code class=\"language-text\">webpack.config.js</code> 파일을 만들어 방금 터미널에서 사용한 옵션을 코드로 구성해 보자.</p>\n<p>webpack.config.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  mode<span class=\"token operator\">:</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span>\n  entry<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    main<span class=\"token operator\">:</span> <span class=\"token string\">'./src/app.js'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  output<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    filename<span class=\"token operator\">:</span> <span class=\"token string\">'[name].js'</span><span class=\"token punctuation\">,</span>\n    path<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>터미널에서 사용한 옵션인 mode, entry, ouput을 설정한다.</p>\n<ul>\n<li><code class=\"language-text\">mode</code>는 'development' 문자열을 사용했다.</li>\n<li><code class=\"language-text\">entry</code>는 어플리케이션 진입점인 src/app.js로 설정한다.</li>\n<li>\n<p><code class=\"language-text\">ouput</code>에 설정한  '[name]'은 entry에 추가한 main이 문자열로 들어오는 방식이다.</p>\n<ul>\n<li><code class=\"language-text\">output.path</code>는 절대 경로를 사용하기 때문에 path 모듈의 resolve() 함수를 사용해서 계산했다. (path는 노드 코어 모듈 중 하나로 경로를 처리하는 기능을 제공한다)</li>\n</ul>\n</li>\n</ul>\n<p>웹팩 실행을 위한 NPM 커스텀 명령어를 추가한다.</p>\n<p>package.json:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./node_modules/.bin/webpack\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>모든 옵션을 웹팩 설정 파일로 옮겼기 때문에 단순히 webpack 명령어만 실행한다.\n이제부터는 <code class=\"language-text\">npm run build</code>로 웹팩 작업을 지시할 수 있다.</p>\n<h1 id=\"3-로더\" style=\"position:relative;\"><a href=\"#3-%EB%A1%9C%EB%8D%94\" aria-label=\"3 로더 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 로더</h1>\n<h2 id=\"31-로더의-역할\" style=\"position:relative;\"><a href=\"#31-%EB%A1%9C%EB%8D%94%EC%9D%98-%EC%97%AD%ED%95%A0\" aria-label=\"31 로더의 역할 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1 로더의 역할</h2>\n<p>웹팩은 모든 파일을 모듈로 바라본다.\n자바스크립트로 만든 모듈 뿐만아니라 스타일시트, 이미지, 폰트까지도 전부 모듈로 보기 때문에 import 구문을 사용하면 자바스크립트 코드 안으로 가져올수 있다.</p>\n<p>이것이 가능한 이유는 웹팩의 <strong>로더</strong> 덕분이다.\n로더는 타입스크립트 같은 다른 언어를 자바스크립트 문법으로 변환해 주거나 이미지를 data URL 형식의 문자열로 변환한다.\n뿐만아니라 CSS 파일을 자바스크립트에서 직접 로딩할수 있도록 해준다.</p>\n<h2 id=\"32-커스텀-로더-만들기\" style=\"position:relative;\"><a href=\"#32-%EC%BB%A4%EC%8A%A4%ED%85%80-%EB%A1%9C%EB%8D%94-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"32 커스텀 로더 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2 커스텀 로더 만들기</h2>\n<p>로더를 사용하기 전에 동작 원리를 이해하기 위해 로더를 직접 만들어 보자.</p>\n<p>myloader.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">myloader</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">content</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myloader가 동작함'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> content<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>함수로 만들수 있는데 로더가 읽은 파일의 내용이 함수 인자 content로 전달된다.\n로더가 동작하는지 확인하는 용도로 로그만 찍고 곧장 content를 돌려 준다.</p>\n<p>로더를 사용하려면 웹팩 설정파일의 <code class=\"language-text\">module</code> 객체에 추가한다.</p>\n<p>webpack.config.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n    test<span class=\"token operator\">:</span> <span class=\"token regex\">/\\.js$/</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// .js 확장자로 끝나는 모든 파일</span>\n    use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./myloader.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 방금 만든 로더를 적용한다</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">module.rules</code> 배열에 모듈을 추가하는데 test와 use로 구성된 객체를 전달한다.</p>\n<p><code class=\"language-text\">test</code>에는 로딩에 적용할 파일을 지정한다.\n파일명 뿐만아니라 파일 패턴을 정규표현식으로 지정할수 있는데 위 코드는 .js 확장자를 갖는 모든 파일을 처리하겠다는 의미다.</p>\n<p><code class=\"language-text\">use</code>에는 이 패턴에 해당하는 파일에 적용할 로더를 설정하는 부분이다.\n방금 만든 myloader 함수의 경로를 지정한다.</p>\n<p>이제 <code class=\"language-text\">npm run build</code>로 웹팩을 실행해 보자.</p>\n<p><img src=\"/assets/imgs/2019/12/11/custom-loader-result.jpg\" alt=\"웹팩 번들 결과\"></p>\n<p>터미널에 'myloader가 동작함' 문자열이 찍힌다.\nmyloader() 함수가 동작한 것이다.</p>\n<p>빌드결과를 살펴보면 이전과 동일하다.\n로더가 뭔가를 처리하기 위해서 간단한 변환 작업을 추가해 보자.\n소스에 있는 모든 console.log() 함수를 alert() 함수로 변경하도록 말이다.</p>\n<p>myloader.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">myloader</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">content</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myloader가 동작함'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'console.log('</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'alert('</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// console.log( -> alert( 로 치환</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>빌드후 확인하면 다음과 같이 console.log() 함수가 alert() 함수로 변경되었다.</p>\n<p><img src=\"/assets/imgs/2019/12/11/custom-loader-result-2.jpg\" alt=\"웹팩 번들 결과\"></p>\n<h1 id=\"4-자주-사용하는-로더\" style=\"position:relative;\"><a href=\"#4-%EC%9E%90%EC%A3%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%A1%9C%EB%8D%94\" aria-label=\"4 자주 사용하는 로더 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 자주 사용하는 로더</h1>\n<p>로더의 동작 원리를 살펴 보았으니 이번에는 몇몇 자주 사용하는 로더를 소개하겠다.</p>\n<h2 id=\"41-css-loader\" style=\"position:relative;\"><a href=\"#41-css-loader\" aria-label=\"41 css loader permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.1 css-loader</h2>\n<p>웹팩은 모든것을 모듈로 바라보기 때문에 자바스크립트 뿐만 아니라 스타일시트로 import 구문으로 불러 올수 있다.</p>\n<p>app.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token string\">'./style.css'</span></code></pre></div>\n<p>style.css:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> green<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>CSS 파일을 자바스크립트에서 불러와 사용하려면 CSS를 모듈로 변환하는 작업이 필요하다.\n<a href=\"https://github.com/webpack-contrib/css-loader\">css-loader</a>가 그러한 역할을 하는데 우리 코드에서 CSS 파일을 모듈처럼 불러와 사용할 수 있게끔 해준다.</p>\n<p>먼저 로더를 설치 하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install -D css-loader</code></pre></div>\n<p>웹팩 설정에 로더를 추가한다.</p>\n<p>webpack.config.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n      test<span class=\"token operator\">:</span> <span class=\"token regex\">/\\.css$/</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// .css 확장자로 끝나는 모든 파일</span>\n      use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// css-loader를 적용한다</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>웹팩은 엔트리 포인트부터 시작해서 모듈을 검색하다가 CSS 파일을 찾으면 css-loader로 처리할 것이다.\nuse.loader에 로더 경로를 설정하는 대신 배열에 로더 이름을 문자열로 전달해도 된다.</p>\n<p>빌드 한 결과 CSS코드가 자바스크립트로 변환된 것을 확인할 수 있다.</p>\n<p><img src=\"/assets/imgs/2019/12/11/css-loader.jpg\" alt=\"웹팩 번들 결과\"></p>\n<h2 id=\"42-style-loader\" style=\"position:relative;\"><a href=\"#42-style-loader\" aria-label=\"42 style loader permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.2 style-loader</h2>\n<p>모듈로 변경된 스타일 시트는 돔에 추가되어야만 브라우져가 해석할 수 있다.\ncss-loader로 처리하면 자바스크립트 코드로만 변경되었을 뿐 돔에 적용되지 않았기 때문에 스트일이 적용되지 않았다.</p>\n<p><a href=\"https://github.com/webpack-contrib/style-loader\">style-loader</a>는 자바스크립트로 변경된 스타일을 동적으로 돔에 추가하는 로더이다.\nCSS를 번들링하기 위해서는 css-loader와 style-loader를 함께 사용한다.</p>\n<p>먼저 스타일 로더를 다운로드 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install -D style-loader</code></pre></div>\n<p>그리고 웹팩 설정에 로더를 추가한다.</p>\n<p>package.json:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n      test<span class=\"token operator\">:</span> <span class=\"token regex\">/\\.css$/</span><span class=\"token punctuation\">,</span>\n      use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'style-loader'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// style-loader를 앞에 추가한다</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>배열로 설정하면 뒤에서부터 앞으로 순서대로 로더가 동작한다.\n위 설정은 모든 .css 확장자로 끝나는 모듈을 읽어 들여 css-loader를 적용하고 그 다음 style-loader를 적용한다.</p>\n<p><img src=\"/assets/imgs/2019/12/11/style-loader.jpg\" alt=\"웹팩 번들 결과\"></p>\n<h2 id=\"43-file-loader\" style=\"position:relative;\"><a href=\"#43-file-loader\" aria-label=\"43 file loader permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.3 file-loader</h2>\n<p>CSS 뿐만 아니라 소스코드에서 사용하는 모든 파일을 모듈로 사용하게끔 할 수 있다.\n파일을 모듈 형태로 지원하고 웹팩 아웃풋에 파일을 옮겨주는 것이 <a href=\"https://github.com/webpack-contrib/file-loader\">file-loader</a>가 하는 일이다.\n가령 CSS에서 url() 함수에 이미지 파일 경로를 지정할 수 있는데 웹팩은 file-loader를 이용해서 이 파일을 처리한다.</p>\n<p>style.css:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>bg.png<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>배경 이미지를 bg.png 파일로 지정했다.</p>\n<p>웹팩은 엔트리 포인트인 app.js가 로딩하는 style.css 파일을 읽을 것이다.\n그리고 이 스타일시트는 url() 함수로 bg.png를 사용하는데 이때 로더를 동작시킨다.</p>\n<p>webpack.config.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n      test<span class=\"token operator\">:</span> <span class=\"token regex\">/\\.png$/</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// .png 확장자로 마치는 모든 파일</span>\n      loader<span class=\"token operator\">:</span> <span class=\"token string\">'file-loader'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 파일 로더를 적용한다</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>웹팩이 .png 파일을 발견하면 file-loader를 실행할 것이다.\n로더가 동작하고 나면 아웃풋에 설정한 경로로 이미지 파일을 복사된다.\n아래 그림처럼 파일명이 해쉬코드로 변경 되었다.\n캐쉬 갱신을 위한 처리로 보인다.</p>\n<p><img src=\"/assets/imgs/2019/12/11/file-loader.jpg\" alt=\"웹팩 번들 결과\"></p>\n<p>하지만 이대로 index.html 파일을 브라우져에 로딩하면 이미지를 제대로 로딩하지 못할 것이다.\nCSS를 로딩하면 background-image: url(bg.png) 코드에 의해 동일 폴더에서 이미지를 찾으려고 시도할 것이다.\n그러나 웹팩으로 빌드한 이미지 파일은 output인 dist 폴더 아래로 이동했기 때문에 이미지 로딩에 실패할 것이다.</p>\n<p>file-loader 옵션을 조정해서 경로를 바로 잡아 주어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n      test<span class=\"token operator\">:</span> <span class=\"token regex\">/\\.png$/</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// .png 확장자로 마치는 모든 파일</span>\n      loader<span class=\"token operator\">:</span> <span class=\"token string\">'file-loader'</span><span class=\"token punctuation\">,</span>\n      options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        publicPath<span class=\"token operator\">:</span> <span class=\"token string\">'./dist/'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// prefix를 아웃풋 경로로 지정</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'[name].[ext]?[hash]'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 파일명 형식</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">publicPath</code> 옵션은 file-loader가 처리하는 파일을 모듈로 사용할 때 경로 앞에 추가되는 문자열이다.\noutput에 설정한 'dist' 폴더에 이미지 파일을 옮길 것이므로 publicPath 값을 이것으로로 지정했다.\n파일을 사용하는 측에서는 'bg.png'를 'dist/bg.png'로 변경하여 사용할 것이다.</p>\n<p>또한 <code class=\"language-text\">name</code> 옵션을 사용했는데 이것은 로더가 파일을 아웃풋에 복사할때 사용하는 파일 이름이다.\n기본적으로 설정된 해쉬값을 쿼리스트링으로 옮겨서 'bg.png?6453a9c65953c5c28aa2130dd437bbde' 형식으로 파일을 요청하도록 변경했다.</p>\n<p><img src=\"/assets/imgs/2019/12/11/file-loader-2.jpg\" alt=\"파일로더 결과 2\"></p>\n<p>이렇게 스타일시트에서 불러온 파일이 동작한다.</p>\n<p><img src=\"/assets/imgs/2019/12/11/file-loader-3.jpg\" alt=\"파일로더 결과 3\"></p>\n<h2 id=\"44-url-loader\" style=\"position:relative;\"><a href=\"#44-url-loader\" aria-label=\"44 url loader permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.4 url-loader</h2>\n<p>사용하는 이미지 갯수가 많다면 네트웍 리소스를 사용하는 부담이 있고 사이트 성능에 영향을 줄 수도 있다.\n만약 한 페이지에서 작은 이미지를 여러 개 사용한다면 <a href=\"https://en.wikipedia.org/wiki/Data_URI_scheme\">Data URI Scheme</a>을 이용하는 방법이 더 나은 경우도 있다.\n이미지를 Base64로 인코딩하여 문자열 형태로 소스코드에 넣는 형식이다.</p>\n<p><a href=\"https://github.com/webpack-contrib/url-loader\">url-loader</a>는 이러한 처리를 자동화해주는 녀석이다.</p>\n<p>먼저 로더를 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install -D url-loader</code></pre></div>\n<p>그리고 웹팩 설정을 추가한다.\nwebpack.config.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  test<span class=\"token operator\">:</span> <span class=\"token regex\">/\\.png$/</span><span class=\"token punctuation\">,</span>\n  use<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    loader<span class=\"token operator\">:</span> <span class=\"token string\">'url-loader'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// url 로더를 설정한다</span>\n    options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      publicPath<span class=\"token operator\">:</span> <span class=\"token string\">'./dist/'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// file-loader와 동일</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">'[name].[ext]?[hash]'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// file-loader와 동일</span>\n      limit<span class=\"token operator\">:</span> <span class=\"token number\">5000</span> <span class=\"token comment\">// 5kb 미만 파일만 data url로 처리</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>file-loader와 옵션 설정이 거의 비슷하고 마지막 <code class=\"language-text\">limit</code> 속성만 추가했다.\n모듈로 사용한 파일중 크기가 5kb 미만인 파일만 url-loader를 적용하는 설정이다.\n만약 이보다 크면 file-loader가 처리하는데 옵션 중 <a href=\"https://github.com/webpack-contrib/url-loader#options\">fallback</a> 기본값이 file-loader이기 때문이다.</p>\n<p>빌드 결과를 보면 small.png 파일이 문자열로 변경되어 있는 것을 확인 할 수 있다.\n반면 5kb 이상인 bg.png는 여전히 파일로 존재한다.</p>\n<p><img src=\"/assets/imgs/2019/12/11/url-loader-1.jpg\" alt=\"url 로더 결과 1\"></p>\n<p>브라우저에서도 확인하면 스타일스트에 small.png가 Data url형태로 변환되어 있다.</p>\n<p><img src=\"/assets/imgs/2019/12/11/url-loader-2.jpg\" alt=\"url 로더 결과 2\"></p>\n<p>아이콘처럼 용량이 작거나 사용 빈도가 높은 이미지는 파일을 그대로 사용하기 보다는 Data URI Scheeme을 적용하기 위해 url-loader를 사용하면 좋겠다.</p>\n<h1 id=\"5-플러그인\" style=\"position:relative;\"><a href=\"#5-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8\" aria-label=\"5 플러그인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 플러그인</h1>\n<h2 id=\"51-플러그인의-역할\" style=\"position:relative;\"><a href=\"#51-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8%EC%9D%98-%EC%97%AD%ED%95%A0\" aria-label=\"51 플러그인의 역할 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.1 플러그인의 역할</h2>\n<p>웹팩에서 알아야 할 마지막 기본 개념이 플러그인이다.\n로더가 파일 단위로 처리하는 반면 플러그인은 번들된 결과물을 처리한다.\n번들된 자바스크립트를 난독화 한다거나 특정 텍스트를 추출하는 용도로 사용한다.</p>\n<p>이것도 사용하기에 앞서 동작 원리를 이해하기 위해 플러그인을 직접 만들어 보자.</p>\n<h2 id=\"52-커스텀-플러그인-만들기\" style=\"position:relative;\"><a href=\"#52-%EC%BB%A4%EC%8A%A4%ED%85%80-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"52 커스텀 플러그인 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.2 커스텀 플러그인 만들기</h2>\n<p>웹팩 문서의 <a href=\"https://webpack.js.org/contribute/writing-a-plugin/\">Writing a plugin</a>을 보면 클래스로 플러그인을 정의 하도록 한다.\n<a href=\"https://webpack.js.org/contribute/writing-a-plugin/#basic-plugin-architecture\">헬로월드 코드</a>를 가져다 그대로 실행 붙여보자.</p>\n<p>myplugin.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyPlugin</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">compiler</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    compiler<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">.</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span><span class=\"token string\">'My Plugin'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">stats</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'MyPlugin: done'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> MyPlugin<span class=\"token punctuation\">;</span></code></pre></div>\n<p>로더와 다르게 플러그인은 클래스로 제작한다.\napply 함수를 구현하면 되는데 이 코드에서는 인자로 받은 compiler 객체 안에 있는 tap() 함수를 사용하는 코드다.\n플러그인 작업이 완료되는(done) 시점에 로그를 찍는 코드인것 같다.</p>\n<p>플러그인을 웹팩 설정에 추가한다.</p>\n<p>webpack.config.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> MyPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./myplugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>웹팩 설정 객체의 <code class=\"language-text\">plugins</code> 배열에 설정한다.\n클래스로 제공되는 플러그인의 생성자 함수를 실행해서 넘기는 방식이다.</p>\n<p>웹팩으로 빌드해 보자.</p>\n<p><img src=\"/assets/imgs/2019/12/11/myplugin.jpg\" alt=\"myplugin\"></p>\n<p>로그가 찍힌걸 보니 플러그인이 동작했다.</p>\n<p>그런데 파일이 여러 개인데 로그는 한 번만 찍혔다.\n모듈이 파일 하나 혹은 여러 개에 대해 동작하는 반면 플러그인은 하나로 번들링된 결과물을 대상으로 동작 한다.\n우리 예제에서는 main.js로 결과물이 하나이기 때문에 플러그인이 한 번만 동작한 것이라 추측할 수 있다.</p>\n<p>그러면 어떻게 번들 결과에 접근할 수 있을까?\n웹팩 내장 플러그인 <a href=\"https://github.com/lcxfs1991/banner-webpack-plugin/blob/master/index.js\">BannerPlugin 코드</a>를 참고하자.</p>\n<p>myplugin.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyPlugin</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">compiler</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    compiler<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">.</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span><span class=\"token string\">'My Plugin'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">stats</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'MyPlugin: done'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// compiler.plugin() 함수로 후처리한다</span>\n    compiler<span class=\"token punctuation\">.</span><span class=\"token function\">plugin</span><span class=\"token punctuation\">(</span><span class=\"token string\">'emit'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">compilation<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> source <span class=\"token operator\">=</span> compilation<span class=\"token punctuation\">.</span>assets<span class=\"token punctuation\">[</span><span class=\"token string\">'main.js'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>compiler.plugin() 함수의 두번재 인자 콜백함수는 emit 이벤트가 발생하면 실행되는 녀석인 모양이다.\n번들된 결과가 compilation 객체에 들어 있는데 compilation.assets['main.js'].source() 함수로 접근할 수 있다.\n실행하면 터미널에 번들링된 결과물을 확인할 수 있다.</p>\n<p><img src=\"/assets/imgs/2019/12/11/myplugin-2.jpg\" alt=\"myplugin\"></p>\n<p>이걸 이용해서 번들 결과 상단에 아래와 같은 배너를 추가하는 플러그인으로 만들어 보자.</p>\n<p>myplugin.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyPlugin</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">compiler</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    compiler<span class=\"token punctuation\">.</span><span class=\"token function\">plugin</span><span class=\"token punctuation\">(</span><span class=\"token string\">'emit'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">compilation<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> source <span class=\"token operator\">=</span> compilation<span class=\"token punctuation\">.</span>assets<span class=\"token punctuation\">[</span><span class=\"token string\">'main.js'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      compilation<span class=\"token punctuation\">.</span>assets<span class=\"token punctuation\">[</span><span class=\"token string\">'main.js'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">source</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> banner <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">'/**'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">' * 이것은 BannerPlugin이 처리한 결과입니다.'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">' * Build Date: 2019-10-10'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">' */'</span>\n          <span class=\"token string\">''</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> banner <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span> <span class=\"token operator\">+</span> source<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>번들 소스를 얻어오는 함수 source()를 재정의 했다.\n배너 문자열과 기존 소스 코드를 합친 문자열을 반환하도록 말이다.</p>\n<p>빌드하고 결과물을 확인해 보면 다음과 같다.</p>\n<p><img src=\"/assets/imgs/2019/12/11/myplugin-3.jpg\" alt=\"myplugin 3\"></p>\n<h1 id=\"6-\b자주-사용하는-플러그인\" style=\"position:relative;\"><a href=\"#6-%08%EC%9E%90%EC%A3%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8\" aria-label=\"6 \b자주 사용하는 플러그인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. \b자주 사용하는 플러그인</h1>\n<p>개발하면서 플러그인을 직접 작성할 일은 거의 없었다.\n웹팩에서 직접 제공하는 플러그인을 사용하거나 써드파티 라이브러리를 찾아 사용하는데 자주 사용하는 플러그인에 대해 알아보자.</p>\n<h2 id=\"61-bannerplugin\" style=\"position:relative;\"><a href=\"#61-bannerplugin\" aria-label=\"61 bannerplugin permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.1 BannerPlugin</h2>\n<p>MyPlugin와 비슷한 것이 <a href=\"https://webpack.js.org/plugins/banner-plugin/\">BannerPlugin</a>이다.\n결과물에 빌드 정보나 커밋 버전같은 걸 추가할 수 있다.</p>\n<p>webpack.config.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> webpack <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>BannerPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      banner<span class=\"token operator\">:</span> <span class=\"token string\">'이것은 배너 입니다'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span></code></pre></div>\n<p>생성자 함수에 전달하는 옵션 객체의 banner 속성에 문자열을 전달한다.\n웹팩 컴파일 타임에 얻을 수 있는 정보, 가령 빌드 시간이나 커밋정보를 전달하기위해 함수로 전달할 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>BannerPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">banner</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">빌드 날짜: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>배너 정보가 많다면 별로 파일로 분리하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> banner <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./banner.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>BannerPlugin</span><span class=\"token punctuation\">(</span>banner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>빌드 날짜 외에서 커밋 해쉬와 빌드한 유저 정보까지 추가해 보자.</p>\n<p>banner.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> childProcess <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'child_process'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">banner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> commit <span class=\"token operator\">=</span> childProcess<span class=\"token punctuation\">.</span><span class=\"token function\">execSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'git rev-parse --short HEAD'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> childProcess<span class=\"token punctuation\">.</span><span class=\"token function\">execSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'git config user.name'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">commitVersion: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>commit<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Build Date: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>date<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Author: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>user<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>빌드한뒤 플러그인이 처리한 결과는 다음과 같다.</p>\n<p><img src=\"/assets/imgs/2019/12/11/banner-plugin.jpg\" alt=\"BannerPlugin\"></p>\n<h2 id=\"62-defineplugin\" style=\"position:relative;\"><a href=\"#62-defineplugin\" aria-label=\"62 defineplugin permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.2 DefinePlugin</h2>\n<p>어플리케이션은 개발환경과 운영환경으로 나눠서 운영한다.\n가령 환경에 따라 API 서버 주소가 다를 수 있다.\n같은 소스 코드를 두 환경에 배포하기 위해서는 이러한 환경 의존적인 정보를 소스가 아닌 곳에서 관리하는 것이 좋다.\n배포할 때마다 코드를 수정하는 것은 곤란하기 때문이다.</p>\n<p>웹팩은 이러한 환경 정보를 제공하기 위해 <a href=\"https://webpack.js.org/plugins/define-plugin/\">DefinePlugin</a>을 제공한다.</p>\n<p>webpack.config.js</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> webpack <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>DefinePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>빈 객체를 전달해도 기본적으로 넣어주는 값이 있다.\n노드 환경정보인 process.env.NODE<em>ENV 인데 웹팩 설정의 mode에 설정한 값이 여기에 들어간다.\n\"development\"를 설정했기 때문에 어플리케이션 코드에서 process.env.NODE</em>ENV 변수로 접근하면 \"development\" 값을 얻을 수 있다.</p>\n<p>app.js</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"development\"</span></code></pre></div>\n<p>이 외에도 웹팩 컴파일 시간에 결정되는 값을 전역 상수 문자열로 어플리케이션에 주입할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>DefinePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">TWO</span><span class=\"token operator\">:</span> <span class=\"token string\">'1+1'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>TWO라는 전역 변수에 <code class=\"language-text\">1+1</code> 이란 코드 조각을 넣었다.\n실제 어플리케이션 코드에서 이것을 출력해보면 2가 나올 것이다.</p>\n<p>app.js</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">TWO</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span></code></pre></div>\n<p>코드가 아닌 값을 입력하려면 문자열화 한 뒤 넘긴다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>DefinePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">VERSION</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token string\">'v.1.2.3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">PRODUCTION</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">MAX_COUNT</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token number\">999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'api.domain'</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://dev.api.domain.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>app.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">VERSION</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'v.1.2.3'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PRODUCTION</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MAX_COUNT</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 999</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>api<span class=\"token punctuation\">.</span>domain<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'http://dev.api.domain.com'</span></code></pre></div>\n<p>빌드 타임에 결정된 값을 어플리이션에 전달할 때는 이 플러그인을 사용하자.</p>\n<h2 id=\"63-htmlwebpackplugin\" style=\"position:relative;\"><a href=\"#63-htmlwebpackplugin\" aria-label=\"63 htmlwebpackplugin permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.3 HtmlWebpackPlugin</h2>\n<p>이번엔 써드 파티 패키지에 대해 알아보자.\n<a href=\"https://github.com/jantimon/html-webpack-plugin/\">HtmlWebpackPlugin</a>은 HTML 파일을 후처리하는데 사용한다.\n빌드 타임의 값을 넣거나 코드를 압축할수 있다.</p>\n<p>먼저 패키지를 다운로드 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install -D html-webpack-plugin</code></pre></div>\n<p>이 플러그인으로 빌드하면 HTML파일로 아웃풋에 생성될 것이다.\nindex.html 파일을 src/index.html로 옮긴뒤 다음과 같이 작성해 보자.</p>\n<p>src/index.html:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\">&lt;!DOCTYPE html></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>타이틀&lt;%= env %><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- 로딩 스크립트 제거 --></span>\n    <span class=\"token comment\">&lt;!-- &lt;script src=\"dist/main.js\">&lt;/script> --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>타이틀 부분에 ejs 문법을 이용하는데 <code class=\"language-text\">&lt;%= env %&gt;</code> 는 전달받은 env 변수 값을 출력한다.\nHtmlWebpackPlugin은 이 변수에 데이터를 주입시켜 동적으로 HTML 코드를 생성한다.</p>\n<p>뿐만 아니라 웹팩으로 빌드한 결과물을 자동으로 로딩하는 코드를 주입해 준다.\n때문에 스크립트 로딩 코드도 제거했다.</p>\n<p>webpack.config.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> HtmlWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token punctuation\">{</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      template<span class=\"token operator\">:</span> <span class=\"token string\">'./src/index.html'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 템플릿 경로를 지정</span>\n      templateParameters<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 템플릿에 주입할 파라매터 변수 지정</span>\n        env<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'development'</span> <span class=\"token operator\">?</span> <span class=\"token string\">'(개발용)'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>환경 변수에 따라 타이틀 명 뒤에 \"(개발용)\" 문자열을 붙이거나 떼거나 하도록 했다.\nNODE<em>ENV=development 로 설정해서 빌드하면 빌드결과 \"타이틀(개발용)\"으로 나온다.\nNODE</em>ENV=production 으로 설정해서 빌드하면 빌드결과 \"타이틀\"로 나온다.</p>\n<p><img src=\"/assets/imgs/2019/12/11/html-template-plugin.jpg\" alt=\"HtmlWebpackPlugin\"></p>\n<p>개발 환경과 달리 운영 환경에서는 파일을 압축하고 불필요한 주석을 제거하는 것이 좋다.</p>\n<p>webpack.config.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  minify<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'production'</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n    collapseWhitespace<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 빈칸 제거</span>\n    removeComments<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 주석 제거</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>(<a href=\"https://github.com/jantimon/html-webpack-plugin/issues/1094\">문서에는\u001d minifiy 옵션이 웹팩 버전 3 기준으로 되어 있다</a>)</p>\n<p>환경변수에 따라 minify 옵션을 켰다.\n<code class=\"language-text\">NOE_ENV=production npm run build</code>로 빌드하면 아래처럼 코드가 압축된다.\n물론 주석도 제거 되었다.</p>\n<p><img src=\"/assets/imgs/2019/12/11/html-template-plugin-2.jpg\" alt=\"HtmlWebpackPlugin 2\"></p>\n<p>정적파일을 배포하면 즉각 브라우져에 반영되지 않는 경우가 있다.\n브라우져 캐쉬가 원인일 경우가 있는데 이를 위한 예방 옵션도 있다.</p>\n<p>webpack.config.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  hash<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 정적 파일을 불러올때 쿼리문자열에 웹팩 해쉬값을 추가한다</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">hash: true</code> 옵션을 추가하면 빌드할 시 생성하는 해쉬값을 정적파일 로딩 주소의 쿼리 문자열로 붙여서 HTML을 생성한다.</p>\n<p><img src=\"/assets/imgs/2019/12/11/html-template-plugin-3.jpg\" alt=\"HtmlWebpackPlugin 3\"></p>\n<h2 id=\"64-cleanwebpackplugin\" style=\"position:relative;\"><a href=\"#64-cleanwebpackplugin\" aria-label=\"64 cleanwebpackplugin permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.4 CleanWebpackPlugin</h2>\n<p><a href=\"https://github.com/johnagan/clean-webpack-plugin\">CleanWebpackPlugin</a>은 빌드 이전 결과물을 제거하는 플러그인이다.\n빌드 결과물은 아웃풋 경로에 모이는데 과거 파일이 남아 있을수 있다.\n이전 빌드내용이 덮여 씌여지면 상관없지만 그렇지 않으면 아웃풋 폴더에 여전히 남아 있을 수 있다.</p>\n<p>임시로 아웃풋 폴더에 foo.js 파일을 만든 후 다시 빌드해 보자...... 파일이 남아 있다.</p>\n<p><img src=\"/assets/imgs/2019/12/11/clean-webpack-plugin.jpg\" alt=\"CleanWebpackPlugin\"></p>\n<p>이러한 현상을 CleanWebpackPlugin으로 해결해 보자.\n먼저 패키지를 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install -D clean-webpack-plugin</code></pre></div>\n<p>웹팩 설정을 추가한다.</p>\n<p>webpack.config.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> CleanWebpackPlugin <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clean-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">CleanWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>빌드 결과 foo.js가 깨끗히 사라졌다.\n아웃풋 폴더인 dist 폴더가 모두 삭제된후 결과물이 생성되었기 때문이다.</p>\n<h2 id=\"65-minicssextractplugin\" style=\"position:relative;\"><a href=\"#65-minicssextractplugin\" aria-label=\"65 minicssextractplugin permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.5 MiniCssExtractPlugin</h2>\n<p>스타일시트가 점점 많아지면 하나의 자바스크립트 결과물로 만드는 것이 부담일 수 있다.\n번들 결과에서 스트일시트 코드만 뽑아서 별도의 CSS 파일로 만들어 역할에 따라 파일을 분리하는 것이 좋다.\n브라우져에서 큰 파일 하나를 내려받는 것 보다, 여러 개의 작은 파일을 동시에 다운로드하는 것이 더 빠르다.</p>\n<p>개발 환경에서는 CSS를 하나의 모듈로 처리해도 상관없지만 프로덕션 환경에서는 분리하는 것이 효과적이다.\n<a href=\"https://github.com/webpack-contrib/mini-css-extract-plugin\">MiniCssExtractPlugin</a>은 CSS를 별로 파일로 뽑아내는 플러그인이다.</p>\n<p>먼저 패키지를 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install -D mini-css-extract-plugin</code></pre></div>\n<p>웹팩 설정을 추가한다.</p>\n<p>webpack.config.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> MiniCssExtractPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mini-css-extract-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token operator\">...</span><span class=\"token punctuation\">(</span>\n      process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'production'</span>\n      <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MiniCssExtractPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>filename<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[name].css</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span>\n      <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>프로덕션 환경일 경우만 이 플러그인을 추가했다.\n<code class=\"language-text\">filename</code>에 설정한 값으로 아웃풋 경로에 CSS 파일이 생성될 것이다.</p>\n<p>개발 환경에서는 css-loader에의해 자바스크립트 모듈로 변경된 스타일시트를 적용하기위해 style-loader를 사용했다.\n반면 프로덕션 환경에서는 별도의 CSS 파일으로 추출하는 플러그인을 적용했으므로 다른 로더가 필요하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n      test<span class=\"token operator\">:</span> <span class=\"token regex\">/\\.css$/</span><span class=\"token punctuation\">,</span>\n      use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'production'</span>\n        <span class=\"token operator\">?</span> MiniCssExtractPlugin<span class=\"token punctuation\">.</span>loader  <span class=\"token comment\">// 프로덕션 환경</span>\n        <span class=\"token operator\">:</span> <span class=\"token string\">'style-loader'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 개발 환경</span>\n        <span class=\"token string\">'css-loader'</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>플러그인에서 제공하는 MiniCssExtractPlugin.loader 로더를 추가한다.</p>\n<p><code class=\"language-text\">NODE_ENV=production npm run build</code>로 결과를 확인해보자.</p>\n<p><img src=\"/assets/imgs/2019/12/11/mini-css-extract-plugin.jpg\" alt=\"MiniCssExtractPlugin\"></p>\n<p>dist/main.css가 생성되었고 index.html에 이 파일을 로딩하는 코드가 추가되었다.</p>\n<h1 id=\"7-정리\" style=\"position:relative;\"><a href=\"#7-%EC%A0%95%EB%A6%AC\" aria-label=\"7 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. 정리</h1>\n<p>ECMAScript2015 이전에는 모듈을 만들기 위해 즉시실행함수와 네임스페이스 패턴을 사용했다.\n이후 각 커뮤니티에서 모듈 시스템 스펙이 나왔고 웹팩은 ECMAScript2015 모듈시스템을 쉽게 사용하도록 돕는 역할을 한다.</p>\n<p>엔트리포인트를 시작으로 연결되어 었는 모든 모듈을 하나로 합쳐서 결과물을 만드는 것이 웹팩의 역할이다.\n자바스크립트 모듈 뿐만 아니라 스타일시트, 이미지 파일까지도 모듈로 제공해 주기 때문에 일관적으로 개발할 수 있다.</p>\n<p>웹팩의 로더와 플러그인의 원리에 대해 살펴보았고 자주 사용하는 것들의 기본적인 사용법에 대해 익혔다.</p>","fields":{"date":"2019년 12월 10일","slug":"/series/2019/12/10/frontend-dev-env-webpack-basic.html","beforeGatsby":true},"frontmatter":{"title":"프론트엔드 개발환경의 이해: 웹팩(기본)","tags":["webpack"],"seriesId":20200102,"videoId":1},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#1-%EB%B0%B0%EA%B2%BD\">1. 배경</a></p>\n<ul>\n<li><a href=\"#11-iife-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EB%AA%A8%EB%93%88\">1.1 IIFE 방식의 모듈</a></li>\n<li><a href=\"#12-%EB%8B%A4%EC%96%91%ED%95%9C-%EB%AA%A8%EB%93%88-%EC%8A%A4%ED%8E%99\">1.2 다양한 모듈 스펙</a></li>\n<li><a href=\"#13-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%B8%EC%9D%98-%EB%AA%A8%EB%93%88-%EC%A7%80%EC%9B%90\">1.3 브라우져의 모듈 지원</a></li>\n</ul>\n</li>\n<li><a href=\"#2-%EC%97%94%ED%8A%B8%EB%A6%AC%EC%95%84%EC%9B%83%ED%92%8B\">2. 엔트리/아웃풋</a></li>\n<li>\n<p><a href=\"#3-%EB%A1%9C%EB%8D%94\">3. 로더</a></p>\n<ul>\n<li><a href=\"#31-%EB%A1%9C%EB%8D%94%EC%9D%98-%EC%97%AD%ED%95%A0\">3.1 로더의 역할</a></li>\n<li><a href=\"#32-%EC%BB%A4%EC%8A%A4%ED%85%80-%EB%A1%9C%EB%8D%94-%EB%A7%8C%EB%93%A4%EA%B8%B0\">3.2 커스텀 로더 만들기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#4-%EC%9E%90%EC%A3%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%A1%9C%EB%8D%94\">4. 자주 사용하는 로더</a></p>\n<ul>\n<li><a href=\"#41-css-loader\">4.1 css-loader</a></li>\n<li><a href=\"#42-style-loader\">4.2 style-loader</a></li>\n<li><a href=\"#43-file-loader\">4.3 file-loader</a></li>\n<li><a href=\"#44-url-loader\">4.4 url-loader</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#5-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8\">5. 플러그인</a></p>\n<ul>\n<li><a href=\"#51-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8%EC%9D%98-%EC%97%AD%ED%95%A0\">5.1 플러그인의 역할</a></li>\n<li><a href=\"#52-%EC%BB%A4%EC%8A%A4%ED%85%80-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0\">5.2 커스텀 플러그인 만들기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#6-%08%EC%9E%90%EC%A3%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8\">6. \b자주 사용하는 플러그인</a></p>\n<ul>\n<li><a href=\"#61-bannerplugin\">6.1 BannerPlugin</a></li>\n<li><a href=\"#62-defineplugin\">6.2 DefinePlugin</a></li>\n<li><a href=\"#63-htmlwebpackplugin\">6.3 HtmlWebpackPlugin</a></li>\n<li><a href=\"#64-cleanwebpackplugin\">6.4 CleanWebpackPlugin</a></li>\n<li><a href=\"#65-minicssextractplugin\">6.5 MiniCssExtractPlugin</a></li>\n</ul>\n</li>\n<li><a href=\"#7-%EC%A0%95%EB%A6%AC\">7. 정리</a></li>\n</ul>"},"allMarkdownRemark":{"edges":[{"node":{"id":"e4135042-a89d-59ae-8a2a-a9af6b245c41","fields":{"slug":"/series/2019/12/09/frontend-dev-env-npm.html","date":"2019-12-09T00:00:00.000Z"},"frontmatter":{"title":"프론트엔드 개발환경의 이해: NPM","seriesId":20200102}}},{"node":{"id":"5d0b2d29-5875-5945-9cad-c1e7308cef69","fields":{"slug":"/series/2019/12/10/frontend-dev-env-webpack-basic.html","date":"2019-12-10T00:00:00.000Z"},"frontmatter":{"title":"프론트엔드 개발환경의 이해: 웹팩(기본)","seriesId":20200102}}},{"node":{"id":"80f2b4e1-8403-5729-9b4c-9cff739f0e4d","fields":{"slug":"/series/2019/12/22/frontend-dev-env-babel.html","date":"2019-12-22T00:00:00.000Z"},"frontmatter":{"title":"프론트엔드 개발환경의 이해: Babel","seriesId":20200102}}},{"node":{"id":"46a2b40e-c285-5478-93ba-6a0e407d9e79","fields":{"slug":"/series/2019/12/30/frontend-dev-env-lint.html","date":"2019-12-30T00:00:00.000Z"},"frontmatter":{"title":"프론트엔드 개발환경의 이해: 린트","seriesId":20200102}}},{"node":{"id":"b4f4ac66-88f6-5d5b-a353-f9258058a94c","fields":{"slug":"/series/2020/01/02/frontend-dev-env-webpack-intermediate.html","date":"2020-01-02T00:00:00.000Z"},"frontmatter":{"title":"프론트엔드 개발환경의 이해: 웹팩(심화)","seriesId":20200102}}}]}},"pageContext":{"slug":"/series/2019/12/10/frontend-dev-env-webpack-basic.html","date":"2019-12-10T00:00:00.000Z","seriesId":20200102,"previous":{"fields":{"slug":"/dev/2019/08/12/ie-cache.html","date":"2019-08-12T00:00:00.000Z","beforeGatsby":true},"frontmatter":{"title":"IE의 ajax 캐시 이슈를 처리하는 방법","category":"dev","permalink":null,"seriesId":null}},"next":{"fields":{"slug":"/series/2019/12/22/frontend-dev-env-babel.html","date":"2019-12-22T00:00:00.000Z","beforeGatsby":true},"frontmatter":{"title":"프론트엔드 개발환경의 이해: Babel","category":"series","permalink":null,"seriesId":20200102}}}}}