{"componentChunkName":"component---src-templates-blog-post-index-tsx","path":"/series/2018/12/11/node-web-11_router-use.html","result":{"data":{"site":{"siteMetadata":{"title":"김정환 블로그","url":"https://jeonghwan-kim.github.io"}},"markdownRemark":{"id":"e7a83581-aec2-50ad-8f02-844c3d80d72a","html":"<h2 id=\"목표\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%ED%91%9C\" aria-label=\"목표 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌳목표</h2>\n<p>라우터 기능을 만들어 다양한 경로를 처리할 수 있습니다.</p>\n<h2 id=\"기존-라운팅의-한계\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EC%A1%B4-%EB%9D%BC%EC%9A%B4%ED%8C%85%EC%9D%98-%ED%95%9C%EA%B3%84\" aria-label=\"기존 라운팅의 한계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기존 라운팅의 한계</h2>\n<p>지금까지 우리가 만든 어플리케이션은 정적파일을 제외한 모든 요청을 index 미들웨어가 처리합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">logger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">serveStatic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>error404<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></code></pre></div>\n<p>\"GET /foo\" 로 요청하더라도 index 미들웨어가 동작해서 index.html 파일을 제공하는 것이죠. 아, 물론 에러가 발생하면 다르지만요.</p>\n<p>만약 아래와 같이 코딩할 수 있다면 어떨까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> indexController<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/foo\"</span><span class=\"token punctuation\">,</span> fooController<span class=\"token punctuation\">)</span></code></pre></div>\n<p>특정 주소(\"/\")의 요청이 있을 경우만 설정한 미들웨어(indexController)를 실행하도록 하는 방법입니다. 물론 \"/foo\" 경로로 요청하면 fooController가 동작는 거지요.</p>\n<h2 id=\"use-메소드에-라우터-기능-추가\" style=\"position:relative;\"><a href=\"#use-%EB%A9%94%EC%86%8C%EB%93%9C%EC%97%90-%EB%9D%BC%EC%9A%B0%ED%84%B0-%EA%B8%B0%EB%8A%A5-%EC%B6%94%EA%B0%80\" aria-label=\"use 메소드에 라우터 기능 추가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>use() 메소드에 라우터 기능 추가</h2>\n<p>미들웨어 등록 함수인 use를 조금 확장해 보겠습니다.\n경로까지 인자로 추가해 볼까요?\n미들웨어를 실행할 때 등록한 경로와 지금 들어온 요청 주소가 일치할 때만 그 미들웨어 함수를 실행하도록 하는 것입니다.</p>\n<h2 id=\"실습---라우터-기능-구현\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%8A%B5---%EB%9D%BC%EC%9A%B0%ED%84%B0-%EA%B8%B0%EB%8A%A5-%EA%B5%AC%ED%98%84\" aria-label=\"실습   라우터 기능 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐤실습 - 라우터 기능 구현</h2>\n<p>먼저 지난 시간까지 작성한 코드로 이동합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ git checkout -f module/logger-color</code></pre></div>\n<p>app.use(path, fn)으로 메소드를 확장해 보세요.</p>\n<p><em>힌트: fn._path에 path를 저장</em></p>\n<h2 id=\"-풀이\" style=\"position:relative;\"><a href=\"#-%ED%92%80%EC%9D%B4\" aria-label=\" 풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐤 풀이</h2>\n<p>같이 풀이 보죠. use() 메소드가 정의된 src/Application.js 파일을 먼저 수정합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">use</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">path<span class=\"token punctuation\">,</span> fn</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> path <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> fn <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fn<span class=\"token punctuation\">.</span>_path <span class=\"token operator\">=</span> path\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> path <span class=\"token operator\">==</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fn <span class=\"token operator\">=</span> path\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Usage: use(path, fn) or use(fn)\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  _middleware<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>path 인자는 선택사항이기 때문에 이 부분을 유연하게 처리해 주어야 하는데 if/else 구문이 그 코드입니다.</p>\n<p>중요한 것은 두번째 미들웨어 인자 fn의 _path 속성에 경로를 저장한 부분입니다.\n이 후 미들웨어를 실행할 때 이 문자열과 요청URL를 비교한 뒤 함수를 실행할 것이 거든요.\n참고로 자바스크립트 함수는 이렇게 객체 형식으로 프러퍼티를 추가 할 수 있습니다.</p>\n<p>이제 run() 메소드가 정의된 src/Middleware.js 파일로 이동하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">_run</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">i<span class=\"token punctuation\">,</span> err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextMw<span class=\"token punctuation\">.</span>_path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 경로를 비교한다</span>\n    <span class=\"token keyword\">const</span> pathMatched <span class=\"token operator\">=</span> _req<span class=\"token punctuation\">.</span>url <span class=\"token operator\">===</span> nextMw<span class=\"token punctuation\">.</span>_path\n    <span class=\"token keyword\">return</span> pathMatched <span class=\"token operator\">?</span> <span class=\"token function\">nextMw</span><span class=\"token punctuation\">(</span>_req<span class=\"token punctuation\">,</span> _res<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">_run</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">nextMw</span><span class=\"token punctuation\">(</span>_req<span class=\"token punctuation\">,</span> _res<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>use() 메소드에서 저장한 경로정보는 nextMw._path를 통해 접근할수 있습니다.\n실제 요청 URL(_req.url)과 비교해서 경로가 같으면 미들웨어를 실행합니다.\n그렇지 않으면 다음 미들웨어를 찾는 방식이죠. (_run(i + 1))</p>\n<h2 id=\"라우터-사용\" style=\"position:relative;\"><a href=\"#%EB%9D%BC%EC%9A%B0%ED%84%B0-%EC%82%AC%EC%9A%A9\" aria-label=\"라우터 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>라우터 사용</h2>\n<p>app.js에 있는 index 미들웨어와 error 미들웨어를 모듈로 분리하겠습니다.</p>\n<p>먼저 routers/index.js 파일에 index 미들웨어를 옮깁니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">listPosts</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> publicPath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"../public\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  listPosts<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>포스트 목록을 보여준다는 의미에서 listPosts 라는 이름의 함수를 만들어 모듈로 노출하였습니다.</p>\n<p>middlewares/errors.js에 error404, error 미들웨어도 옮기겨 보지요.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">error404</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">error</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  error404<span class=\"token punctuation\">,</span>\n  error<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>마지막으로 app.js 가 얼마나 단순하게 개선되었는지 확인해 봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> serveStatic <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./middlewares/serve-static\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> logger <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./middlewares/logger\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> errors <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./middlewares/errors\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./routes/index\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> App <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./src/Application\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">logger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">serveStatic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">.</span><span class=\"token function\">listPosts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>errors<span class=\"token punctuation\">.</span><span class=\"token function\">error404</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>errors<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> app</code></pre></div>\n<p>Application 인스턴스를 만들고 여기에 미들웨어를 추가하는 코드만 들어 있죠.\n이것만 보더라도 서버 어플리케이션이 어떤 동작을 하는지 가늠할 수 있을 것 같습니다.</p>\n<p>뿐만아니라 기능도 미세하게 달라 집니다. 이젠 제대로 404 응답을 할 수 있죠.</p>\n<p>만약 정의 되지 않은 경로, 가령 \"/foo\"로 요청을 한다고 합시다.\n서버에서는 logger -> serveStatic 미들웨어까지 가다가 index.listPost는 건너 뛰어 버리겠죠. 경로가 맞지 않으니깐요. erros.error404 미들웨어를 만나게 되고 비로 Not Found 문자열을 응답하게 될 것입니다.</p>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<ul>\n<li>경로에 따라 컨트롤러를 설정하는 use() 메소드를 구현했습니다.</li>\n<li>어플리케이션 코드를 단순하게 개선하였습니다.</li>\n</ul>\n<p><a href=\"/series/2018/12/01/node-web-0_index.html\">목차 바로가기</a></p>","frontmatter":{"slug":"/series/2018/12/11/node-web-11_router-use.html","date":"2018-12-11T00:00:00.000Z","title":"[Node.js코드랩] 11.라우터 use","tags":["lecture"],"series":"Node.js 코드랩","videoId":null,"featuredImage":null},"tableOfContents":"<ul>\n<li><a href=\"#%EB%AA%A9%ED%91%9C\">🌳목표</a></li>\n<li><a href=\"#%EA%B8%B0%EC%A1%B4-%EB%9D%BC%EC%9A%B4%ED%8C%85%EC%9D%98-%ED%95%9C%EA%B3%84\">기존 라운팅의 한계</a></li>\n<li><a href=\"#use-%EB%A9%94%EC%86%8C%EB%93%9C%EC%97%90-%EB%9D%BC%EC%9A%B0%ED%84%B0-%EA%B8%B0%EB%8A%A5-%EC%B6%94%EA%B0%80\">use() 메소드에 라우터 기능 추가</a></li>\n<li><a href=\"#%EC%8B%A4%EC%8A%B5---%EB%9D%BC%EC%9A%B0%ED%84%B0-%EA%B8%B0%EB%8A%A5-%EA%B5%AC%ED%98%84\">🐤실습 - 라우터 기능 구현</a></li>\n<li><a href=\"#-%ED%92%80%EC%9D%B4\">🐤 풀이</a></li>\n<li><a href=\"#%EB%9D%BC%EC%9A%B0%ED%84%B0-%EC%82%AC%EC%9A%A9\">라우터 사용</a></li>\n<li><a href=\"#%EC%A0%95%EB%A6%AC\">정리</a></li>\n</ul>","excerpt":"🌳목표 라우터 기능을 만들어 다양한 경로를 처리할 수 있습니다. 기존 라운팅의 한계 지금까지 우리가 만든 어플리케이션은 정적파일을 제외한 모든 요청을 index 미들웨어가 처리합니다. \"GET /foo\" 로 요청하더라도 index 미들웨어가 동작해서 index.html…"},"video":null,"allMarkdownRemark":{"nodes":[{"id":"95a7d198-fe1f-5683-9354-26e10e6ed386","frontmatter":{"slug":"/series/2018/12/01/node-web-1_orientation.html","date":"2018-12-01T00:00:00.000Z","title":"[Node.js 코드랩] 1.오리엔테이션","series":"Node.js 코드랩"}},{"id":"a8108e92-6a5b-5e9a-abc8-d5ce7a4df068","frontmatter":{"slug":"/series/2018/12/02/node-web-2_http.html","date":"2018-12-02T00:00:00.000Z","title":"[Node.js코드랩] 2.기본 모듈 http","series":"Node.js 코드랩"}},{"id":"93e7c545-496f-5d72-957d-f008eb7c39a9","frontmatter":{"slug":"/series/2018/12/03/node-web-3_refactoring.html","date":"2018-12-03T00:00:00.000Z","title":"[Node.js코드랩] 3.리팩토링","series":"Node.js 코드랩"}},{"id":"37f993ac-ef58-526b-adbe-abc7e3505e51","frontmatter":{"slug":"/series/2018/12/04/node-web-4_application.html","date":"2018-12-04T00:00:00.000Z","title":"[Node.js코드랩] 4.어플리케이션","series":"Node.js 코드랩"}},{"id":"cd6299da-2ab2-5adf-a8db-bbe0d42af1d7","frontmatter":{"slug":"/series/2018/12/05/node-web-5_debug.html","date":"2018-12-05T00:00:00.000Z","title":"[Node.js코드랩] 5.커스텀 모듈 Debug","series":"Node.js 코드랩"}},{"id":"08348d20-d465-58cb-b4db-39b890338ccd","frontmatter":{"slug":"/series/2018/12/06/node-web-6_static-files.html","date":"2018-12-06T00:00:00.000Z","title":"[Node.js코드랩] 6.정적 파일","series":"Node.js 코드랩"}},{"id":"b68d9eaa-a4c6-5777-a93d-16d3078cf2bc","frontmatter":{"slug":"/series/2018/12/07/node-web-7_serve-static.html","date":"2018-12-07T00:00:00.000Z","title":"[Node.js코드랩] 7.커스텀 모듈 serve-static","series":"Node.js 코드랩"}},{"id":"e3c125ca-6dff-5e31-87ec-3dfc3680d0e5","frontmatter":{"slug":"/series/2018/12/08/node-web-8_middleware.html","date":"2018-12-08T00:00:00.000Z","title":"[Node.js코드랩] 8.미들웨어","series":"Node.js 코드랩"}},{"id":"e10b1985-61e4-5677-be28-ab18339da690","frontmatter":{"slug":"/series/2018/12/09/node-web-9_middleware2.html","date":"2018-12-09T00:00:00.000Z","title":"[Node.js코드랩] 9.미들웨어 활용","series":"Node.js 코드랩"}},{"id":"8be694c5-7499-5e3e-b04d-d2950261e5aa","frontmatter":{"slug":"/series/2018/12/10/node-web-10_logger.html","date":"2018-12-10T00:00:00.000Z","title":"[Node.js코드랩] 10.커스텀 모듈 logger","series":"Node.js 코드랩"}},{"id":"e7a83581-aec2-50ad-8f02-844c3d80d72a","frontmatter":{"slug":"/series/2018/12/11/node-web-11_router-use.html","date":"2018-12-11T00:00:00.000Z","title":"[Node.js코드랩] 11.라우터 use","series":"Node.js 코드랩"}},{"id":"ab75e9ac-309f-5ac4-b35e-6e5b2f10d60e","frontmatter":{"slug":"/series/2018/12/12/node-web-12_get-posts-api.html","date":"2018-12-12T00:00:00.000Z","title":"[Node.js코드랩] 12.포스트 조회 API","series":"Node.js 코드랩"}},{"id":"cb680042-acc5-5270-80bb-37bcf46274ad","frontmatter":{"slug":"/series/2018/12/13/node-web-13_res.html","date":"2018-12-13T00:00:00.000Z","title":"[Node.js코드랩] 13. 응답 객체","series":"Node.js 코드랩"}},{"id":"4d8231da-f718-5744-905c-d013886497d6","frontmatter":{"slug":"/series/2018/12/14/node-web-14_req.html","date":"2018-12-14T00:00:00.000Z","title":"[Node.js코드랩] 14. 요청 객체","series":"Node.js 코드랩"}},{"id":"a122150a-1341-5337-be8f-a12a260e69a2","frontmatter":{"slug":"/series/2018/12/15/node-web-15_get_post.html","date":"2018-12-15T00:00:00.000Z","title":"[Node.js코드랩] 15.라우터 Get, Post","series":"Node.js 코드랩"}},{"id":"d83a8980-ace4-529e-adb0-61dc9151e698","frontmatter":{"slug":"/series/2018/12/16/node-web-16_body-parser.html","date":"2018-12-16T00:00:00.000Z","title":"[Node.js코드랩] 16. body-parser","series":"Node.js 코드랩"}},{"id":"e264676e-7d8a-5ed0-89c8-471d13b53841","frontmatter":{"slug":"/series/2018/12/17/node-web-17_expressjs.html","date":"2018-12-17T00:00:00.000Z","title":"[Node.js코드랩] 17. Express.js","series":"Node.js 코드랩"}},{"id":"46d0d52a-0c7a-51d0-bf8f-59530a74613e","frontmatter":{"slug":"/series/2018/12/17/node-web-18_summary.html","date":"2018-12-17T00:00:00.000Z","title":"[Node.js코드랩] 18. 마무리","series":"Node.js 코드랩"}}]}},"pageContext":{"slug":"/series/2018/12/11/node-web-11_router-use.html","date":"2018-12-11T00:00:00.000Z","series":"Node.js 코드랩","videoId":null,"previous":{"frontmatter":{"slug":"/series/2018/12/10/node-web-10_logger.html","date":"2018-12-10T00:00:00.000Z","title":"[Node.js코드랩] 10.커스텀 모듈 logger","category":"연재물","series":"Node.js 코드랩","videoId":null}},"next":{"frontmatter":{"slug":"/series/2018/12/12/node-web-12_get-posts-api.html","date":"2018-12-12T00:00:00.000Z","title":"[Node.js코드랩] 12.포스트 조회 API","category":"연재물","series":"Node.js 코드랩","videoId":null}}}},"staticQueryHashes":["2263867198"]}