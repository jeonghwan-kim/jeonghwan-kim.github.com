{"componentChunkName":"component---src-templates-blog-post-index-tsx","path":"/series/2018/12/12/node-web-12_get-posts-api.html","result":{"data":{"site":{"siteMetadata":{"title":"김정환 블로그","url":"https://jeonghwan-kim.github.io"}},"markdownRemark":{"id":"24b0b3cf-a4ba-5f7b-a5a9-d3366bf6721b","excerpt":"🌳목표 이전 시간에 구현한 라우터 기능을 이용해서 API를 하나 만들어 보겠습니다. 어떤 API죠? 먼저 실습을 위한 브랜치로 이동해 볼까요? 서버를 구동하고 브라우져로 접속해보세요.  \"Loading...\" 메세지가 사라지지 않네요.\n뭔가를 로딩하고 있는데 잘 안되는가 봅니다.  크…","html":"<h2 id=\"목표\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%ED%91%9C\" aria-label=\"목표 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌳목표</h2>\n<p>이전 시간에 구현한 라우터 기능을 이용해서 API를 하나 만들어 보겠습니다.</p>\n<h2 id=\"어떤-api죠\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EB%96%A4-api%EC%A3%A0\" aria-label=\"어떤 api죠 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어떤 API죠?</h2>\n<p>먼저 실습을 위한 브랜치로 이동해 볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ git checkout -f route/get-posts-spec</code></pre></div>\n<p>서버를 구동하고 브라우져로 접속해보세요.</p>\n<p><img src=\"/assets/imgs/2018/12/12/result_1.png\"></p>\n<p>\"Loading...\" 메세지가 사라지지 않네요.\n뭔가를 로딩하고 있는데 잘 안되는가 봅니다.</p>\n<p><img src=\"/assets/imgs/2018/12/12/result_2.png\"></p>\n<p>크롬 개발자 도구를 확인하면 \"GET /api/posts\" 요청을 보냈는데 404 Not Found 응답을 받았군요.</p>\n<p>프론트엔드 코드를 살펴보면 정확한 원인을 알 수 있을것 같군요.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">loadTimeline</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">el</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  el<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"Loading...\"</span>\n\n  api\n    <span class=\"token punctuation\">.</span><span class=\"token function\">getPosts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>loadTimeline은 페이지가 로드될때 실행되는 함수입니다.\n\"Loading...\" 문자열을 돔에 출력하고 getPosts() 호출하고 응답을 기다리고 있네요.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> api <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getPosts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">http</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/api/posts'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">http</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">method<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> req <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span>  <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  req<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n  req<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/x-www-form-urlencoded\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  req<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">evt</span> <span class=\"token operator\">=></span> <span class=\"token comment\">// ...</span>\n  req<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>getPosts() 메소드는 http 요청을 보내고 있구요.\nGET 메소드와 \"/api/posts\" 주소로 AJAX 요청을 보내는 것을 확인할 수 있습니다.</p>\n<p>서버에서는 이 엔트포인트가 없기 때문에 404로 응답한 것이 문제의 원인입니다.</p>\n<h2 id=\"실습---포스트-조회-api를-구현해-보세요\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%8A%B5---%ED%8F%AC%EC%8A%A4%ED%8A%B8-%EC%A1%B0%ED%9A%8C-api%EB%A5%BC-%EA%B5%AC%ED%98%84%ED%95%B4-%EB%B3%B4%EC%84%B8%EC%9A%94\" aria-label=\"실습   포스트 조회 api를 구현해 보세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐤실습 - 포스트 조회 API를 구현해 보세요.</h2>\n<p>\"GET /api/posts\" 엔드포인트를 구현하세요.</p>\n<p><em>힌트: route/api/post.js 파일에 구현, 아래 목업 데이터 사용</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> title<span class=\"token operator\">:</span> <span class=\"token string\">\"post 3\"</span><span class=\"token punctuation\">,</span> body<span class=\"token operator\">:</span> <span class=\"token string\">\"this is post 3\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> title<span class=\"token operator\">:</span> <span class=\"token string\">\"post 2\"</span><span class=\"token punctuation\">,</span> body<span class=\"token operator\">:</span> <span class=\"token string\">\"this is post 2\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> title<span class=\"token operator\">:</span> <span class=\"token string\">\"post 1\"</span><span class=\"token punctuation\">,</span> body<span class=\"token operator\">:</span> <span class=\"token string\">\"this is post 1\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<h2 id=\"풀이\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4\" aria-label=\"풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐤풀이</h2>\n<p>그럼 같이 풀어 보겠습니다.</p>\n<p>routes/api 폴더에 posts.js 파일을 먼저 만듭니다.\n여기에 코드를 작성하데 두 부분으로 나눠서 설명할게요.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> title<span class=\"token operator\">:</span> <span class=\"token string\">\"post 3\"</span><span class=\"token punctuation\">,</span> body<span class=\"token operator\">:</span> <span class=\"token string\">\"this is post 3\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> title<span class=\"token operator\">:</span> <span class=\"token string\">\"post 2\"</span><span class=\"token punctuation\">,</span> body<span class=\"token operator\">:</span> <span class=\"token string\">\"this is post 2\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> title<span class=\"token operator\">:</span> <span class=\"token string\">\"post 1\"</span><span class=\"token punctuation\">,</span> body<span class=\"token operator\">:</span> <span class=\"token string\">\"this is post 1\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>데이터를 저장할 posts 배열을 만들었습니다.\n힌트에 있는 목업 데이터를 그대로 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">index</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">)</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>posts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  index<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>\"/posts\" 요청에 대한 컨트롤러 함수를 만들 것이기 때문에 미들웨어 함수로 인터페이스를 맞추었습니다.</p>\n<p>API는 JSON 형식을 사용하기 때문에 Content-Type 헤더를 \"application/json\"으로 맞추었구요.\n문자열을 보낼때는 JSON.stringfiy() 함수를 이용해 자바스크립트 객체를 문자열로 변환하였습니다.</p>\n<p>그럼 이 컨트롤러를 등록해야하는데요 어디서 할까요?\n네, 맞습니다. 이것도 미들웨어 함수이기 때문에 app.js에서 use() 메소드로 등록해야겠지요.</p>\n<p>그리고 이 index 함수를 모듈로 노출해 줍니다.\n기본적인 조회 기능이기 때문에 함수 이름을 index로 정했답니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">const</span> apiPost <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./routes/api/post\"</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">.</span><span class=\"token function\">listPosts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/posts\"</span><span class=\"token punctuation\">,</span> apiPost<span class=\"token punctuation\">.</span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 라우트 컨트롤러를 추가합니다</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>errors<span class=\"token punctuation\">.</span><span class=\"token function\">error404</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>\"/\" 라우트를 추가한 방법과 동일하게 \"/api/posts\" 라우트도 그 아래 추가합니다.</p>\n<p>그럼 서버를 재실행하고 확인해 볼까요?</p>\n<p><img src=\"/assets/imgs/2018/12/12/result_3.png\"></p>\n<p>API로 응답받은 데이터를 화면에 잘 뿌려주었습니다.</p>\n<p>우리가 만들었던 API 컨트롤러는 비지니스 로직 섹션으로 왼쪽 아랫 부분으로 구분했습니다.</p>\n<p><img src=\"/assets/imgs/2018/12/12/struct.png\"></p>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<ul>\n<li>포스트 조회 API를 구현했습니다.</li>\n<li>JSON 형식의 응답을 알아 보았습니다.</li>\n</ul>\n<p><a href=\"/series/2018/12/01/node-web-0_index.html\">목차 바로가기</a></p>","fields":{"dateStr":"2018년 12월 12일","date":"2018-12-12T00:00:00.000Z","slug":"/series/2018/12/12/node-web-12_get-posts-api.html"},"frontmatter":{"title":"[Node.js코드랩] 12.포스트 조회 API","tags":["lecture"],"seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab","videoId":null,"featured_image":null,"featuredImage":null},"tableOfContents":"<ul>\n<li><a href=\"#%EB%AA%A9%ED%91%9C\">🌳목표</a></li>\n<li><a href=\"#%EC%96%B4%EB%96%A4-api%EC%A3%A0\">어떤 API죠?</a></li>\n<li><a href=\"#%EC%8B%A4%EC%8A%B5---%ED%8F%AC%EC%8A%A4%ED%8A%B8-%EC%A1%B0%ED%9A%8C-api%EB%A5%BC-%EA%B5%AC%ED%98%84%ED%95%B4-%EB%B3%B4%EC%84%B8%EC%9A%94\">🐤실습 - 포스트 조회 API를 구현해 보세요.</a></li>\n<li><a href=\"#%ED%92%80%EC%9D%B4\">🐤풀이</a></li>\n<li><a href=\"#%EC%A0%95%EB%A6%AC\">정리</a></li>\n</ul>"},"series":{"id":"555b6438-4a71-51d0-9156-a1d5ca4d5eab","title":"Node.js 코드랩"},"video":null,"allMarkdownRemark":{"nodes":[{"id":"bfbe2949-f7c2-5861-9d73-2145263850e4","fields":{"slug":"/series/2018/12/01/node-web-1_orientation.html","date":"2018-12-01T00:00:00.000Z"},"frontmatter":{"title":"[Node.js 코드랩] 1.오리엔테이션","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"6b4ab14d-846e-5796-9799-c42848621979","fields":{"slug":"/series/2018/12/02/node-web-2_http.html","date":"2018-12-02T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 2.기본 모듈 http","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"b1aec7ac-3401-50bb-9b3a-1f3c0dba816d","fields":{"slug":"/series/2018/12/03/node-web-3_refactoring.html","date":"2018-12-03T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 3.리팩토링","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"f913d343-bfee-554b-a190-0fafe4a15e8f","fields":{"slug":"/series/2018/12/04/node-web-4_application.html","date":"2018-12-04T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 4.어플리케이션","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"396ff93e-7740-5750-99a0-ffc8f44b2264","fields":{"slug":"/series/2018/12/05/node-web-5_debug.html","date":"2018-12-05T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 5.커스텀 모듈 Debug","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"6d2c51d4-140e-578b-ae28-edd6344f42df","fields":{"slug":"/series/2018/12/06/node-web-6_static-files.html","date":"2018-12-06T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 6.정적 파일","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"18013d48-931e-5f5f-97bb-5aa784075b6f","fields":{"slug":"/series/2018/12/07/node-web-7_serve-static.html","date":"2018-12-07T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 7.커스텀 모듈 serve-static","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"3932b2c9-7cfb-53c5-8357-5f7a790ae295","fields":{"slug":"/series/2018/12/08/node-web-8_middleware.html","date":"2018-12-08T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 8.미들웨어","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"33c47777-8e9e-5a68-85f9-66c1af1ca735","fields":{"slug":"/series/2018/12/09/node-web-9_middleware2.html","date":"2018-12-09T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 9.미들웨어 활용","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"7c15a535-3372-5d73-808d-aa2ea5af15ae","fields":{"slug":"/series/2018/12/10/node-web-10_logger.html","date":"2018-12-10T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 10.커스텀 모듈 logger","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"e2b3798a-86c0-550d-9a37-647495cdd2dd","fields":{"slug":"/series/2018/12/11/node-web-11_router-use.html","date":"2018-12-11T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 11.라우터 use","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"24b0b3cf-a4ba-5f7b-a5a9-d3366bf6721b","fields":{"slug":"/series/2018/12/12/node-web-12_get-posts-api.html","date":"2018-12-12T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 12.포스트 조회 API","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"adfb350e-c1d2-5c85-ac6f-d07936575db2","fields":{"slug":"/series/2018/12/13/node-web-13_res.html","date":"2018-12-13T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 13. 응답 객체","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"ef8af36e-4bde-584b-b29b-20046d4aa669","fields":{"slug":"/series/2018/12/14/node-web-14_req.html","date":"2018-12-14T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 14. 요청 객체","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"fbdbd5e4-2a16-5369-a455-6523a1d9b433","fields":{"slug":"/series/2018/12/15/node-web-15_get_post.html","date":"2018-12-15T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 15.라우터 Get, Post","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"2b2e4511-3367-52ea-9524-9d420ab686c1","fields":{"slug":"/series/2018/12/16/node-web-16_body-parser.html","date":"2018-12-16T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 16. body-parser","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"de643e18-6338-5d9f-908c-48a6d5624cba","fields":{"slug":"/series/2018/12/17/node-web-17_expressjs.html","date":"2018-12-17T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 17. Express.js","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"d47788ec-de07-5a9a-a09b-ba1ebfd67418","fields":{"slug":"/series/2018/12/17/node-web-18_summary.html","date":"2018-12-17T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 18. 마무리","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}}]}},"pageContext":{"slug":"/series/2018/12/12/node-web-12_get-posts-api.html","date":"2018-12-12T00:00:00.000Z","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab","videoId":null,"previous":{"fields":{"slug":"/series/2018/12/11/node-web-11_router-use.html","date":"2018-12-11T00:00:00.000Z","beforeGatsby":true},"frontmatter":{"title":"[Node.js코드랩] 11.라우터 use","category":"series","permalink":null,"seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab","videoId":null}},"next":{"fields":{"slug":"/series/2018/12/13/node-web-13_res.html","date":"2018-12-13T00:00:00.000Z","beforeGatsby":true},"frontmatter":{"title":"[Node.js코드랩] 13. 응답 객체","category":"series","permalink":null,"seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab","videoId":"a3385ae2-3c3c-585d-b4ee-fe73484ece62"}}}},"staticQueryHashes":[]}