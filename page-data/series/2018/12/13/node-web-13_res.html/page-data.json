{
    "componentChunkName": "component---src-templates-blog-post-index-tsx",
    "path": "/series/2018/12/13/node-web-13_res.html",
    "result": {"data":{"site":{"siteMetadata":{"title":"김정환 블로그","url":"https://jeonghwan-kim.github.io"}},"markdownRemark":{"id":"42f9d27e-b2eb-5861-a763-9d2671a05cec","html":"<h2 id=\"목표\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%ED%91%9C\" aria-label=\"목표 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌳목표</h2>\n<p>익스프레스와 유사한 응답 객체인 Response 모듈을 만듭니다.</p>\n<h2 id=\"response-모듈\" style=\"position:relative;\"><a href=\"#response-%EB%AA%A8%EB%93%88\" aria-label=\"response 모듈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Response 모듈</h2>\n<p>앞으로 웹 개발을 할 때 API는 자주 사용 될 것입니다.\n단일 페이지 어플리케이션에서는 거의 모든 데이터를 API 형태로 다루기 때문이죠.</p>\n<p>이 때 서버는 JSON 형식으로 데이터를 응답해야 하는데 꽤 자주 사용되는 코드가 될 듯 싶습니다.</p>\n<p>뿐만아니라 상태 코드를 포함한 헤더 설정도 모든 엔드 포인트마다 사용될 것 같구요.</p>\n<p>이러한 응답 처리를 위한 \"Response\" 라는 모듈을 만들어 볼 거에요.</p>\n<p>시리즈 초반에 소개했던 http.createServer() 메소드를 기억하나요?\n이것의 콜백함수가 인자로 받는 응답 객체 res를 확장해서 만들어 보겠습니다.</p>\n<h2 id=\"요구사항-확인\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD-%ED%99%95%EC%9D%B8\" aria-label=\"요구사항 확인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요구사항 확인</h2>\n<p>테스트 코드가 있는 브랜치로 체크아웃 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ git checkout -f response/spec</code></pre></div>\n<p>src/Response.spec.js 코드에 요구사항을 기록한 테스트 코드가 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status 메소드를 노출한다\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span>should<span class=\"token punctuation\">.</span>have<span class=\"token punctuation\">.</span><span class=\"token function\">property</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">should</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> res<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"set 메소드를 노출한다\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span>should<span class=\"token punctuation\">.</span>have<span class=\"token punctuation\">.</span><span class=\"token function\">property</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"set\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">should</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> res<span class=\"token punctuation\">.</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">should</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>set<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"send 메소드를 노출한다\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span>should<span class=\"token punctuation\">.</span>have<span class=\"token punctuation\">.</span><span class=\"token function\">property</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"send\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">should</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> res<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"json 메소드를 노출한다\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span>should<span class=\"token punctuation\">.</span>have<span class=\"token punctuation\">.</span><span class=\"token function\">property</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"json\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">should</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> res<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>함수 유무만 판단하는 간단한 테스트 케이스인데요, 각 함수의 역할은 다음과 같아요.</p>\n<ul>\n<li><code>status(code)</code>: 상태 코드를 설정</li>\n<li><code>set(key, value)</code>: 헤더 값을 key/value로 설정</li>\n<li><code>send(text)</code>: 문자 응답</li>\n<li><code>json(object)</code>: 제이슨 응답</li>\n</ul>\n<h2 id=\"실습---response-모듈을-만들어-보세요\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%8A%B5---response-%EB%AA%A8%EB%93%88%EC%9D%84-%EB%A7%8C%EB%93%A4%EC%96%B4-%EB%B3%B4%EC%84%B8%EC%9A%94\" aria-label=\"실습   response 모듈을 만들어 보세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐤실습 - Response 모듈을 만들어 보세요</h2>\n<p>res 객체를 이용해 Response 모듈을 구현해 보세요.\n위에서 설명한 4개 메소드를 모두 구현해야 합니다.</p>\n<p><em>힌트: res 객체를 확장해서 만들기</em></p>\n<h2 id=\"풀이\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4\" aria-label=\"풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐤풀이</h2>\n<p>다 만들수 있었나요? 그럼 같이 풀어 보겠습니다. 👨🏻‍🏫</p>\n<p>먼저 src 폴더에 Response.js 파일을 만듭니다.\n다섯 부분으로 나눠 코드를 입력할게요</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Response</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>res<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res is required\"</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> Response</code></pre></div>\n<p>Response 모듈은 기존의 res 객체를 인자로 받습니다.\n없을 경우 즉시 에러를 던져 프로그램을 종료하구요.</p>\n<p>res를 확장한 뒤 마지막에 반환해 줍니다. (아직 확장 코드는 없습니다)</p>\n<p>그럼 메소드를 하나씩 추가해 보죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">res<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span>\n  res<span class=\"token punctuation\">.</span>status <span class=\"token operator\">||</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">code</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 기존 객체에 안전하게 추가</span>\n    res<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> code\n    <span class=\"token keyword\">return</span> res <span class=\"token comment\">// 함수 체이닝을 위해</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>상태값을 설정하는 status() 메소드를 구현합니다.\nres는 이미 사용하고 있는 객체이기 때문에 기존 키를 덮어 쓰지 않기 위해 <code>||</code> 연산을 사용했습니다.</p>\n<p>statusCode를 설정한 후 res를 그대로 반환했습니다.\n이것은 편리하게 사용하도록 하기 위한 함수 체이닝 기법입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">res<span class=\"token punctuation\">.</span>set <span class=\"token operator\">=</span>\n  res<span class=\"token punctuation\">.</span>set <span class=\"token operator\">||</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> res <span class=\"token comment\">// 함수 체이닝을 위해</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>키/값을 인자로 받아 헤더에 세팅하는 set() 메소드 입니다.\nsetHeader() 메소드로 헤더값을 설정하고, 역시 함수 체이닝을 위해 res를 반환합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">res<span class=\"token punctuation\">.</span>send <span class=\"token operator\">=</span>\n  res<span class=\"token punctuation\">.</span>send <span class=\"token operator\">||</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>res<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/plain\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>문자열을 text로 받아 end() 메소드로 응답하는 send() 메소드입니다.\n만약 getHeader()로 조회한 뒤 설정된 Content-Type 헤더가 없다면 \"text/plain\"으로 기본값을 설정합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">res<span class=\"token punctuation\">.</span>json <span class=\"token operator\">=</span>\n  res<span class=\"token punctuation\">.</span>json <span class=\"token operator\">||</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">)</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>json() 메소드는 헤더와 바디를 제이슨 형식으로 응답합니다.</p>\n<h2 id=\"실습---response-모듈을-application에서-사용해-보세요\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%8A%B5---response-%EB%AA%A8%EB%93%88%EC%9D%84-application%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%B4-%EB%B3%B4%EC%84%B8%EC%9A%94\" aria-label=\"실습   response 모듈을 application에서 사용해 보세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐤실습 - Response 모듈을 Application에서 사용해 보세요</h2>\n<p>이렇게 구현한 Response 모듈을 Application에서 사용해야 웹 서버가 제대로 동작할 것입니다.\n마치 Middleware 모듈을 Application에서 활용한 것 처럼 말이죠.</p>\n<p>Application 코드를 수정하여 Response 메소드를 활용할 수 있도록 개선해 보세요.\n코드를 작성하지 못하신 분은 브랜치 이동후 진행하시기 바랍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ git checkout -f response/methods</code></pre></div>\n<p><em>힌트: Middleware.run(req, res) 부분 변경, route/index.js, api/posts.js 변경</em></p>\n<h2 id=\"풀이-1\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4-1\" aria-label=\"풀이 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐤풀이</h2>\n<p>같이 풀어 볼까요?</p>\n<p>src/Application.js에서 req, res 객체를 사용한 부분이 어디일까요?\n네, 바로 미들웨어 구동 메소드인 run() 부분이죠.\n미들웨어 함수에 주입하기 위해 여기서부터 req, res를 인자로 전달하는 구조입니다.</p>\n<p>이 분을 우리가 만든 Response 객체로 교체하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Response <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./Response'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Application</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> _middleware <span class=\"token operator\">=</span> <span class=\"token function\">Middleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> _server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    _middleware<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> <span class=\"token function\">Response</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Response 객체로 교체</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// ...</span></code></pre></div>\n<p>비교적 간단하지요?</p>\n<p>그럼 각 미들웨어 함수에서는 기존의 res 메소드 뿐만 아니라 Response 객체의 메소드까지 사용할 수 있게 되었습니다.</p>\n<p>현재까지 라우트 컨트롤러가 2개죠?</p>\n<ul>\n<li>index.listPosts()</li>\n<li>apiPost.index()</li>\n</ul>\n<p>이걸 새로 제작한 메소드를 이용해 더 심플한 코드로 개선해 보겠습니다.</p>\n<p>index.listPosts()는 routers/index.js에 정의 되어 있죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">listPosts</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>publicPath<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/index.html</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err\n\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>상태코드를 설정하는 status()와 헤더를 설정하는 set(), 그리고 응답하는 send() 메소드를 사용했습니다.\n특히 함수 체이닝을 지원하기 때문에 코드를 한 줄로 작성한 부분을 눈여겨 보시기 바랍니다.</p>\n<p>apiPost.index()는 api/posts.js에 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">index</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>posts<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>json 응답은 이렇게 간단히 설정할수 있습니다.</p>\n<p>코드를 더 단순하게 만들고 싶다면 자주 사용하는 200 상태 코드는 기본 인자값으로 설정하는 방법도 있겠네요.</p>\n<p><img src=\"/assets/imgs/2018/12/13/struct.png\" alt=\"\"></p>\n<p>방금 만들었던 Response 모듈이 익스프레스JS의 세 번째 모듈 되시겠습니다! (초록색 부분)</p>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<ul>\n<li>응답 처리를 개선하기위해 Response 모듈을 만들었습니다.</li>\n<li>stauts(), set(), send(), json() 메소드를 추가로 지원합니다.</li>\n</ul>\n<p><a href=\"/series/2018/12/01/node-web-0_index.html\">목차 바로가기</a></p>","frontmatter":{"slug":"/series/2018/12/13/node-web-13_res.html","date":"2018-12-13T00:00:00.000Z","title":"[Node.js코드랩] 13. 응답 객체","tags":["lecture"],"seriesId":"series-2018-12-01-weplanet-codelab","videoId":"video-inflean-nodejs","featuredImage":null},"tableOfContents":"<ul>\n<li><a href=\"#%EB%AA%A9%ED%91%9C\">🌳목표</a></li>\n<li><a href=\"#response-%EB%AA%A8%EB%93%88\">Response 모듈</a></li>\n<li><a href=\"#%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD-%ED%99%95%EC%9D%B8\">요구사항 확인</a></li>\n<li><a href=\"#%EC%8B%A4%EC%8A%B5---response-%EB%AA%A8%EB%93%88%EC%9D%84-%EB%A7%8C%EB%93%A4%EC%96%B4-%EB%B3%B4%EC%84%B8%EC%9A%94\">🐤실습 - Response 모듈을 만들어 보세요</a></li>\n<li><a href=\"#%ED%92%80%EC%9D%B4\">🐤풀이</a></li>\n<li><a href=\"#%EC%8B%A4%EC%8A%B5---response-%EB%AA%A8%EB%93%88%EC%9D%84-application%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%B4-%EB%B3%B4%EC%84%B8%EC%9A%94\">🐤실습 - Response 모듈을 Application에서 사용해 보세요</a></li>\n<li><a href=\"#%ED%92%80%EC%9D%B4-1\">🐤풀이</a></li>\n<li><a href=\"#%EC%A0%95%EB%A6%AC\">정리</a></li>\n</ul>","excerpt":"🌳목표 익스프레스와 유사한 응답 객체인 Response 모듈을 만듭니다. Response 모듈 앞으로 웹 개발을 할 때 API는 자주 사용 될 것입니다.\n단일 페이지 어플리케이션에서는 거의 모든 데이터를 API…"},"series":{"id":"series-2018-12-01-weplanet-codelab","title":"Node.js 코드랩"},"video":{"id":"video-inflean-nodejs","title":"테스트주도개발(TDD)로 만드는 NodeJS API 서버","thumb":"https://cdn.inflearn.com/wp-content/uploads/nodetdd.png","url":"https://www.inflearn.com/course/테스트주도개발-tdd-nodejs-api?inst=8aa64815"},"allMarkdownRemark":{"nodes":[{"id":"c1aff780-329b-54c9-8b65-9adf8255b80f","frontmatter":{"slug":"/series/2018/12/01/node-web-1_orientation.html","date":"2018-12-01T00:00:00.000Z","title":"[Node.js 코드랩] 1.오리엔테이션","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"87d6201c-0865-5682-aee7-484a28e1b0c6","frontmatter":{"slug":"/series/2018/12/02/node-web-2_http.html","date":"2018-12-02T00:00:00.000Z","title":"[Node.js코드랩] 2.기본 모듈 http","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"034d39e5-6cf5-50b2-a6aa-8dbace6f3373","frontmatter":{"slug":"/series/2018/12/03/node-web-3_refactoring.html","date":"2018-12-03T00:00:00.000Z","title":"[Node.js코드랩] 3.리팩토링","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"3f204c8b-282c-55a4-99a8-318400c0e728","frontmatter":{"slug":"/series/2018/12/04/node-web-4_application.html","date":"2018-12-04T00:00:00.000Z","title":"[Node.js코드랩] 4.어플리케이션","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"e70998dc-8407-52e6-bb47-6f421424d3c1","frontmatter":{"slug":"/series/2018/12/05/node-web-5_debug.html","date":"2018-12-05T00:00:00.000Z","title":"[Node.js코드랩] 5.커스텀 모듈 Debug","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"b674c656-6e82-5492-8b8d-55bdca7435d0","frontmatter":{"slug":"/series/2018/12/06/node-web-6_static-files.html","date":"2018-12-06T00:00:00.000Z","title":"[Node.js코드랩] 6.정적 파일","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"357a87df-cd75-5c38-a7b1-c75a0deda4df","frontmatter":{"slug":"/series/2018/12/07/node-web-7_serve-static.html","date":"2018-12-07T00:00:00.000Z","title":"[Node.js코드랩] 7.커스텀 모듈 serve-static","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"a0498e79-1772-5c7b-80d5-65c577cce45d","frontmatter":{"slug":"/series/2018/12/08/node-web-8_middleware.html","date":"2018-12-08T00:00:00.000Z","title":"[Node.js코드랩] 8.미들웨어","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"27971d0e-d65a-5ee9-87e3-436bf2d2773d","frontmatter":{"slug":"/series/2018/12/09/node-web-9_middleware2.html","date":"2018-12-09T00:00:00.000Z","title":"[Node.js코드랩] 9.미들웨어 활용","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"19e53d49-1c5d-502e-a499-2f6c4864bd29","frontmatter":{"slug":"/series/2018/12/10/node-web-10_logger.html","date":"2018-12-10T00:00:00.000Z","title":"[Node.js코드랩] 10.커스텀 모듈 logger","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"d87c7b44-7260-5f36-bf4c-954780ec33b4","frontmatter":{"slug":"/series/2018/12/11/node-web-11_router-use.html","date":"2018-12-11T00:00:00.000Z","title":"[Node.js코드랩] 11.라우터 use","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"9f78412c-a891-557e-954f-2a3dddbc54b5","frontmatter":{"slug":"/series/2018/12/12/node-web-12_get-posts-api.html","date":"2018-12-12T00:00:00.000Z","title":"[Node.js코드랩] 12.포스트 조회 API","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"42f9d27e-b2eb-5861-a763-9d2671a05cec","frontmatter":{"slug":"/series/2018/12/13/node-web-13_res.html","date":"2018-12-13T00:00:00.000Z","title":"[Node.js코드랩] 13. 응답 객체","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"465c8e16-0b11-506d-bcc6-69b6f02d93a4","frontmatter":{"slug":"/series/2018/12/14/node-web-14_req.html","date":"2018-12-14T00:00:00.000Z","title":"[Node.js코드랩] 14. 요청 객체","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"7a738192-ebd2-57c5-a69e-6bdcdfba5428","frontmatter":{"slug":"/series/2018/12/15/node-web-15_get_post.html","date":"2018-12-15T00:00:00.000Z","title":"[Node.js코드랩] 15.라우터 Get, Post","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"8950cffd-84dc-5535-ae68-ad0973801ab6","frontmatter":{"slug":"/series/2018/12/16/node-web-16_body-parser.html","date":"2018-12-16T00:00:00.000Z","title":"[Node.js코드랩] 16. body-parser","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"f9eebf1b-8fcf-506c-bae8-ac7c5b576ce6","frontmatter":{"slug":"/series/2018/12/17/node-web-17_expressjs.html","date":"2018-12-17T00:00:00.000Z","title":"[Node.js코드랩] 17. Express.js","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"9b807cfc-9203-5f7d-9a99-9f7dccad52f0","frontmatter":{"slug":"/series/2018/12/17/node-web-18_summary.html","date":"2018-12-17T00:00:00.000Z","title":"[Node.js코드랩] 18. 마무리","seriesId":"series-2018-12-01-weplanet-codelab"}}]}},"pageContext":{"slug":"/series/2018/12/13/node-web-13_res.html","date":"2018-12-13T00:00:00.000Z","seriesId":"series-2018-12-01-weplanet-codelab","videoId":"video-inflean-nodejs","previous":{"frontmatter":{"slug":"/series/2018/12/12/node-web-12_get-posts-api.html","date":"2018-12-12T00:00:00.000Z","title":"[Node.js코드랩] 12.포스트 조회 API","category":"연재물","seriesId":"series-2018-12-01-weplanet-codelab","videoId":null}},"next":{"frontmatter":{"slug":"/series/2018/12/14/node-web-14_req.html","date":"2018-12-14T00:00:00.000Z","title":"[Node.js코드랩] 14. 요청 객체","category":"연재물","seriesId":"series-2018-12-01-weplanet-codelab","videoId":null}}}},
    "staticQueryHashes": ["3044774879"]}