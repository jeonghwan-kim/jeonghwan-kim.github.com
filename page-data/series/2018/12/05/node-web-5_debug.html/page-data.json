{
    "componentChunkName": "component---src-templates-blog-post-index-tsx",
    "path": "/series/2018/12/05/node-web-5_debug.html",
    "result": {"data":{"site":{"siteMetadata":{"title":"김정환 블로그","url":"https://jeonghwan-kim.github.io"}},"markdownRemark":{"id":"e70998dc-8407-52e6-bb47-6f421424d3c1","html":"<h2 id=\"목표\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%ED%91%9C\" aria-label=\"목표 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌳목표</h2>\n<p>노드에서 꽤 많이 사용되는 debug 모듈을 직접 만들어 봅니다.</p>\n<h2 id=\"debug를-사용하는-이유\" style=\"position:relative;\"><a href=\"#debug%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\"debug를 사용하는 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Debug를 사용하는 이유</h2>\n<p><a href=\"https://github.com/visionmedia/debug\">Debug</a> 모듈은 노드에서 가장 많이 사용하는 디버깅 모듈입니다.\n로그를 구조적으로 기록할 수 있다는 점에서 console.log 보다 뛰어납니다.\nDebug가 갖고 있는 장점은 아래 두 가지입니다.</p>\n<ul>\n<li>태그를 지정한 로그 함수를 만들 수 있다</li>\n<li>태그별로 색상을 줘서 로그 식별이 수월하다</li>\n</ul>\n<p>사용 방법은 아래처럼 간단합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> debug <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"debug\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my_tag\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my_log\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"my_tag my_log\"</span></code></pre></div>\n<p>이것을 직접 만들어 보겠습니다.</p>\n<h2 id=\"테스트-코드\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C\" aria-label=\"테스트 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 코드</h2>\n<p>테스트를 코드가 있는 브랜치로 이동하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ git checkout -f module/debug-spec</code></pre></div>\n<p>utils/debug.spec.js에 있는 테스트 코드를 살펴 보지요.\n네 부분으로 나누어 설명하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> sinon <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sinon'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> debug <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./debug'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'생성'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'태그명을 인자로 받는다 (없으면 예외를 던진다)'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">should</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">throw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>필요한 모듈을 가져와서 상수에 할당했습니다.\ndebug 모듈의 생성 시점의 기능을 테스트하는 코드인데 태그명을 인자로 받도록 합니다.\n만약 태그 인자가 없으면 예외를 던지도록 했죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'함수를 반환한다'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> debug <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./debug'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mytag'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">should</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> debug<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>태그를 전달한 함수는 다시 함수를 반환하는지 typeof로 체크했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'반환된 함수'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> debug<span class=\"token punctuation\">,</span> tag<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      tag <span class=\"token operator\">=</span> <span class=\"token string\">'mytag'</span><span class=\"token punctuation\">;</span>\n      debug <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./debug'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      msg <span class=\"token operator\">=</span> <span class=\"token string\">'my log message'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tag + message 형식의 로그 문자열을 반환한다'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> expected <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>tag<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>msg<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> actual <span class=\"token operator\">=</span> <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      actual<span class=\"token punctuation\">.</span>should<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>expected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이것은 반환된 함수를 테스트하는 코드입니다.</p>\n<p>모카 프레임웍에서 제공하는 beforeEach() 함수는 테스트 케이스(it) 실행 전마다 동작합니다.\n매 테스트케이스에서 debug 객체를 만들기 때문에 중복 코드를 이곳에 모아논 것이죠.\nDRY함은 테스트 코드에서도 예외일 수 없습니다.</p>\n<p>반환한 함수에 메세지(msg)를 전달해 실행하면 tag + msg 문자열이 반환되는지 점검하는 코드입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'로그 문자열을 인자로 console.log 함수를 실행한다'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    sinon<span class=\"token punctuation\">.</span><span class=\"token function\">spy</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">,</span> <span class=\"token string\">'log'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> expected <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>tag<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>msg<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    sinon<span class=\"token punctuation\">.</span>assert<span class=\"token punctuation\">.</span><span class=\"token function\">calledWith</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span> expected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>sinon 라이브러리를 이용해서 console.log 메소드에 스파이를 심었습니다.\n그리고 dubug(msg)를 실행했을 때 기대하는 문자열이 console.log 함수 인자로 전달되는지 점검하는 코드입니다.</p>\n<h2 id=\"실습---debug-모듈을-만들어-봅니다\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%8A%B5---debug-%EB%AA%A8%EB%93%88%EC%9D%84-%EB%A7%8C%EB%93%A4%EC%96%B4-%EB%B4%85%EB%8B%88%EB%8B%A4\" aria-label=\"실습   debug 모듈을 만들어 봅니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐤실습 - debug 모듈을 만들어 봅니다</h2>\n<p>위 테스트 코드에서 요구하는 debug 모듈을 만들어 보세요.</p>\n<h2 id=\"풀이\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4\" aria-label=\"풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐤풀이</h2>\n<p>잘 풀어 보셨나요?\nutils/debug.js 파일을 새로 만들어 같이 확인해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">debug</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">tag</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>tag<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tag should be required\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> debug</code></pre></div>\n<p>먼저 debug를 tag 인자를 받는 함수로 정의 했습니다.\n인자가 없으면 바로 에러를 던지도록 해서 첫 번째 테스트 케이스를 통과하도록 했구요.\n마지막엔 역시 모듈로 노출하였습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">debug</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">tag</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">return</span> <span class=\"token parameter\">msg</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> logString <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>tag<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>msg<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>logString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> logString<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>debug 함수는 다시 함수를 반환하도록 했죠. 그래서 msg를 인자로 받는 함수를 정의했습니다.\n그런 뒤 클로져로 캡쳐된 tag 값과 msg를 조합해서 로그 문자열(logString)을 만듭니다.\n이 값은 console.log와 반환 값으로 사용하였습니다.</p>\n<p>그럼 테스트를 돌려 볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm test\n\ndebug\n    생성\n      ✓ 태그명을 인자로 받는다 (없으면 예외를 던진다)\n      ✓ 함수를 반환한다\n    반환된 함수\n      ✓ tag + message 형식의 로그 문자열을 반환한다\n      ✓ 로그 문자열을 인자로 console.log 함수를 실행한다\n    메세지 출력함수\n      ✓ _log() 함수 결과문자열을 console.log()함수의 인자로 전달하여 실행한다</code></pre></div>\n<p>모든 테스트 케이스에 통과했습니다.</p>\n<h2 id=\"실습-색상도-추가해-보세요\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%8A%B5-%EC%83%89%EC%83%81%EB%8F%84-%EC%B6%94%EA%B0%80%ED%95%B4-%EB%B3%B4%EC%84%B8%EC%9A%94\" aria-label=\"실습 색상도 추가해 보세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐤실습-색상도 추가해 보세요</h2>\n<p>태크 문자 색상을 랜덤으로 출력하도록 debug 모듈을 개선해 보세요.</p>\n<p><em>힌트: <a href=\"https://stackoverflow.com/questions/9781218/how-to-change-node-jss-console-font-color?answertab=active#tab-top\">스택오버플로우 How to change node.js's console font color</a></em></p>\n<h2 id=\"풀이-1\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4-1\" aria-label=\"풀이 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐤풀이</h2>\n<p>힌트가 도움이 되었나요? 그럼 uitls/debug.js를 같이 개선해 보겠습니다.</p>\n<p>문자에 색상을 추가하려면 다음과 같은 형식이어야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">문자코드 + 문자 + 리셋코드</code></pre></div>\n<p>따라서 우리 코드 상단에 아래와 같이 색상 정보를 추가합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cyan\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\\x1b[36m\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"yellow\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\\x1b[33m\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\\x1b[31m\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"green\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\\x1b[32m\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"magenta\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\\x1b[35m\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> resetColor <span class=\"token operator\">=</span> <span class=\"token string\">\"\\x1b[0m\"</span></code></pre></div>\n<p>힌트에서 언급한 것 처럼 색상 코드를 딕셔너리로 만들었습니다.\n그리고 resetColor도 따로 상수로 두었구요.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">debug</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">tag</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> randIdx <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> colors<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> colors<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">const</span> color <span class=\"token operator\">=</span> colors<span class=\"token punctuation\">[</span>randIdx<span class=\"token punctuation\">]</span></code></pre></div>\n<p>태그 인자를 받자마자 태그의 색상을 정하기 위해 colors 배열에서 랜덤으로 인덱스를 구하는 코드 입니다.\n마지막 color 상수에는 name, value를 가지는 컬러 객체가 랜덤으로 저장 되겠지요.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">return</span> <span class=\"token parameter\">msg</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> logString <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>color<span class=\"token punctuation\">.</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">[</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>tag<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">]</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>resetColor<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>msg<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>logString<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> logString\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>반환된 함수에서 이 랜덤 색상 객체를 사용합니다.\nlogString을 만들때 태그 문자열만 색상을 지정했습니다.</p>\n<h2 id=\"debug-활용\" style=\"position:relative;\"><a href=\"#debug-%ED%99%9C%EC%9A%A9\" aria-label=\"debug 활용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Debug 활용</h2>\n<p>우리 어플리케이션 코드에 이 debug 모듈을 이용해서 로그를 남겨 봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// app.js</span>\n<span class=\"token keyword\">const</span> debug <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../utils/debug\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"app\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"app is initiated\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// bin.js</span>\n<span class=\"token keyword\">const</span> debug <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./utils/debug'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bin'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ...</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> hostname<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server running at http://</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>hostname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// src/Application.js</span>\n<span class=\"token keyword\">const</span> debug <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../utils/debug\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Application\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">const</span> listen <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>port <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> hostname <span class=\"token operator\">=</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  _server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> hostname<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"server is listening\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>서버를 실행하면 다음과 같이 예쁜 모양의 로그가 색상 별로 나오는 걸 확인할수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm start</code></pre></div>\n<p><img src=\"/assets/imgs/2018/12/05/debug.png\" alt=\"\"></p>\n<p>Debug 모듈은 아래 써드 파티 라이브러리 부분입니다.</p>\n<p><img src=\"/assets/imgs/2018/12/05/struct.png\" alt=\"\"></p>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<ul>\n<li>커스텀 모듈인 debug를 만들었습니다.</li>\n<li>태그와 색상으로 로깅 기능을 개선하였습니다.</li>\n</ul>\n<p><a href=\"/series/2018/12/01/node-web-0_index.html\">목차 바로가기</a></p>","frontmatter":{"slug":"/series/2018/12/05/node-web-5_debug.html","date":"2018-12-05T00:00:00.000Z","title":"[Node.js코드랩] 5.커스텀 모듈 Debug","tags":null,"seriesId":"series-2018-12-01-weplanet-codelab","videoId":null,"featuredImage":null},"tableOfContents":"<ul>\n<li><a href=\"#%EB%AA%A9%ED%91%9C\">🌳목표</a></li>\n<li><a href=\"#debug%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\">Debug를 사용하는 이유</a></li>\n<li><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C\">테스트 코드</a></li>\n<li><a href=\"#%EC%8B%A4%EC%8A%B5---debug-%EB%AA%A8%EB%93%88%EC%9D%84-%EB%A7%8C%EB%93%A4%EC%96%B4-%EB%B4%85%EB%8B%88%EB%8B%A4\">🐤실습 - debug 모듈을 만들어 봅니다</a></li>\n<li><a href=\"#%ED%92%80%EC%9D%B4\">🐤풀이</a></li>\n<li><a href=\"#%EC%8B%A4%EC%8A%B5-%EC%83%89%EC%83%81%EB%8F%84-%EC%B6%94%EA%B0%80%ED%95%B4-%EB%B3%B4%EC%84%B8%EC%9A%94\">🐤실습-색상도 추가해 보세요</a></li>\n<li><a href=\"#%ED%92%80%EC%9D%B4-1\">🐤풀이</a></li>\n<li><a href=\"#debug-%ED%99%9C%EC%9A%A9\">Debug 활용</a></li>\n<li><a href=\"#%EC%A0%95%EB%A6%AC\">정리</a></li>\n</ul>"},"series":{"id":"series-2018-12-01-weplanet-codelab","title":"Node.js 코드랩"},"video":null,"allMarkdownRemark":{"nodes":[{"id":"c1aff780-329b-54c9-8b65-9adf8255b80f","frontmatter":{"slug":"/series/2018/12/01/node-web-1_orientation.html","date":"2018-12-01T00:00:00.000Z","title":"[Node.js 코드랩] 1.오리엔테이션","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"87d6201c-0865-5682-aee7-484a28e1b0c6","frontmatter":{"slug":"/series/2018/12/02/node-web-2_http.html","date":"2018-12-02T00:00:00.000Z","title":"[Node.js코드랩] 2.기본 모듈 http","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"034d39e5-6cf5-50b2-a6aa-8dbace6f3373","frontmatter":{"slug":"/series/2018/12/03/node-web-3_refactoring.html","date":"2018-12-03T00:00:00.000Z","title":"[Node.js코드랩] 3.리팩토링","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"3f204c8b-282c-55a4-99a8-318400c0e728","frontmatter":{"slug":"/series/2018/12/04/node-web-4_application.html","date":"2018-12-04T00:00:00.000Z","title":"[Node.js코드랩] 4.어플리케이션","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"e70998dc-8407-52e6-bb47-6f421424d3c1","frontmatter":{"slug":"/series/2018/12/05/node-web-5_debug.html","date":"2018-12-05T00:00:00.000Z","title":"[Node.js코드랩] 5.커스텀 모듈 Debug","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"b674c656-6e82-5492-8b8d-55bdca7435d0","frontmatter":{"slug":"/series/2018/12/06/node-web-6_static-files.html","date":"2018-12-06T00:00:00.000Z","title":"[Node.js코드랩] 6.정적 파일","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"357a87df-cd75-5c38-a7b1-c75a0deda4df","frontmatter":{"slug":"/series/2018/12/07/node-web-7_serve-static.html","date":"2018-12-07T00:00:00.000Z","title":"[Node.js코드랩] 7.커스텀 모듈 serve-static","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"a0498e79-1772-5c7b-80d5-65c577cce45d","frontmatter":{"slug":"/series/2018/12/08/node-web-8_middleware.html","date":"2018-12-08T00:00:00.000Z","title":"[Node.js코드랩] 8.미들웨어","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"27971d0e-d65a-5ee9-87e3-436bf2d2773d","frontmatter":{"slug":"/series/2018/12/09/node-web-9_middleware2.html","date":"2018-12-09T00:00:00.000Z","title":"[Node.js코드랩] 9.미들웨어 활용","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"19e53d49-1c5d-502e-a499-2f6c4864bd29","frontmatter":{"slug":"/series/2018/12/10/node-web-10_logger.html","date":"2018-12-10T00:00:00.000Z","title":"[Node.js코드랩] 10.커스텀 모듈 logger","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"d87c7b44-7260-5f36-bf4c-954780ec33b4","frontmatter":{"slug":"/series/2018/12/11/node-web-11_router-use.html","date":"2018-12-11T00:00:00.000Z","title":"[Node.js코드랩] 11.라우터 use","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"9f78412c-a891-557e-954f-2a3dddbc54b5","frontmatter":{"slug":"/series/2018/12/12/node-web-12_get-posts-api.html","date":"2018-12-12T00:00:00.000Z","title":"[Node.js코드랩] 12.포스트 조회 API","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"42f9d27e-b2eb-5861-a763-9d2671a05cec","frontmatter":{"slug":"/series/2018/12/13/node-web-13_res.html","date":"2018-12-13T00:00:00.000Z","title":"[Node.js코드랩] 13. 응답 객체","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"465c8e16-0b11-506d-bcc6-69b6f02d93a4","frontmatter":{"slug":"/series/2018/12/14/node-web-14_req.html","date":"2018-12-14T00:00:00.000Z","title":"[Node.js코드랩] 14. 요청 객체","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"7a738192-ebd2-57c5-a69e-6bdcdfba5428","frontmatter":{"slug":"/series/2018/12/15/node-web-15_get_post.html","date":"2018-12-15T00:00:00.000Z","title":"[Node.js코드랩] 15.라우터 Get, Post","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"8950cffd-84dc-5535-ae68-ad0973801ab6","frontmatter":{"slug":"/series/2018/12/16/node-web-16_body-parser.html","date":"2018-12-16T00:00:00.000Z","title":"[Node.js코드랩] 16. body-parser","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"f9eebf1b-8fcf-506c-bae8-ac7c5b576ce6","frontmatter":{"slug":"/series/2018/12/17/node-web-17_expressjs.html","date":"2018-12-17T00:00:00.000Z","title":"[Node.js코드랩] 17. Express.js","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"9b807cfc-9203-5f7d-9a99-9f7dccad52f0","frontmatter":{"slug":"/series/2018/12/17/node-web-18_summary.html","date":"2018-12-17T00:00:00.000Z","title":"[Node.js코드랩] 18. 마무리","seriesId":"series-2018-12-01-weplanet-codelab"}}]}},"pageContext":{"slug":"/series/2018/12/05/node-web-5_debug.html","date":"2018-12-05T00:00:00.000Z","seriesId":"series-2018-12-01-weplanet-codelab","videoId":null,"previous":{"frontmatter":{"slug":"/series/2018/12/04/node-web-4_application.html","date":"2018-12-04T00:00:00.000Z","title":"[Node.js코드랩] 4.어플리케이션","category":"series","seriesId":"series-2018-12-01-weplanet-codelab","videoId":null}},"next":{"frontmatter":{"slug":"/series/2018/12/06/node-web-6_static-files.html","date":"2018-12-06T00:00:00.000Z","title":"[Node.js코드랩] 6.정적 파일","category":"series","seriesId":"series-2018-12-01-weplanet-codelab","videoId":null}}}},
    "staticQueryHashes": ["3044774879"]}