{"componentChunkName":"component---src-templates-blog-post-index-tsx","path":"/series/2018/12/02/node-web-2_http.html","result":{"data":{"site":{"siteMetadata":{"title":"김정환 블로그","url":"https://jeonghwan-kim.github.io"}},"markdownRemark":{"id":"b4ab239d-7b61-53bf-bd10-53f49921bb61","html":"<h2 id=\"목표\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%ED%91%9C\" aria-label=\"목표 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌳목표</h2>\n<p>노드의 기본 모듈 중 네트웍 기능을 제공하는 http 모듈을 알아 봅니다.\n헬로월드 코드로 http모듈을 이용한 서버 어플레케이션을 만드는 것이 목표입니다.</p>\n<h2 id=\"왜-http-모듈부터-시작하나요\" style=\"position:relative;\"><a href=\"#%EC%99%9C-http-%EB%AA%A8%EB%93%88%EB%B6%80%ED%84%B0-%EC%8B%9C%EC%9E%91%ED%95%98%EB%82%98%EC%9A%94\" aria-label=\"왜 http 모듈부터 시작하나요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>왜 http 모듈부터 시작하나요?</h2>\n<p>우리는 웹 어플리케이션을 만들어 볼겁니다. 웹 서버를 만들기 위해서는 꽤 많은 네트웍 지식을 알고 있어야 합니다. 가령 tcp, listen, 3way handshaking 처럼 컴퓨터공학에서 배우는 전문 지식들이죠.</p>\n<p>노드에서는 이러한 개념들을 구현한 http 모듈을 기본으로 제공합니다. 네트웍 기술을 구현한 것이 이 기본 모듈인데요, 우리는 이것을 이용해서 좀 더 편리하게 웹 어플리케이션을 개발할 수 있습니다.</p>\n<h2 id=\"문서를-같이-살펴-볼까요\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%84%9C%EB%A5%BC-%EA%B0%99%EC%9D%B4-%EC%82%B4%ED%8E%B4-%EB%B3%BC%EA%B9%8C%EC%9A%94\" aria-label=\"문서를 같이 살펴 볼까요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문서를 같이 살펴 볼까요?</h2>\n<p>노드를 학습하기 위한 교과서는 노드 공식 홈페이지의 문서입니다. 기본 모듈이 어떻게 있나 한 번 살펴 볼까요?</p>\n<p><a href=\"https://nodejs.org/dist/latest-v10.x/docs/api/\">노드 기본 모듈 목록</a></p>\n<p>자주 사용하는 것만 짚어 볼게요.</p>\n<ul>\n<li>Console: 콘솔 로깅</li>\n<li>Crypto: 암호화</li>\n<li>Events: 이벤트 관리</li>\n<li>File System: 파일 관리</li>\n<li><strong>Http: 네트웍 기능</strong></li>\n<li>OS: 운영체제 정보</li>\n<li>Path: 경로 관리</li>\n<li>Stream: 스트림 관리</li>\n</ul>\n<p>우리가 사용할 http 모듈에 대해 더 알아 봅시다.</p>\n<p><a href=\"https://nodejs.org/dist/latest-v10.x/docs/api/http.html\">http 기본 모듈</a></p>\n<ul>\n<li>http.createServer(): 서버 인스턴스를 만들어 반환</li>\n<li>http.server: 서버 클래스</li>\n<li>server.listen(): 서버를 클라이언트 요청 대기 상태(listen)로 만듬</li>\n</ul>\n<p>위 세 개 API만으로 간단한 헬로월드 서버를 만들수 있습니다.\n아래 링크에서 확인해 볼까요?</p>\n<p><a href=\"https://nodejs.org/dist/latest-v10.x/docs/api/synopsis.html\">hello world</a></p>\n<h2 id=\"hello-word\" style=\"position:relative;\"><a href=\"#hello-word\" aria-label=\"hello word permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hello word</h2>\n<p>링크에 있는 코드를 우리 프로젝트에서 실행해 보겠습니다.\n먼저 지난 글에서 작성한 코드를 미리 저장해 놓은 브랜치로 이동 하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">-f</span> scaffolding/unittest</code></pre></div>\n<p>코드를 제대로 따라오신분은 체크아웃(브랜치 이동)하지 않고 계속 진행하시고요.\n그렇지 않은 분은 체크아웃 한 뒤 이어서 코딩하시기 바랍니다.</p>\n<p>링크에 있는 코드를 복사해서 우리 프로젝트의 server.js에 붙여 넣어 봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 노드 모듈을 가져온다</span>\n\n<span class=\"token keyword\">const</span> hostname <span class=\"token operator\">=</span> <span class=\"token string\">\"127.0.0.1\"</span> <span class=\"token comment\">// 사용할 서버 호스트네임</span>\n<span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> <span class=\"token number\">3000</span> <span class=\"token comment\">// 사용할 서버 포트</span>\n\n<span class=\"token comment\">// 서버를 만든다</span>\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 요청이 오면 실행되는 콜백 함수</span>\n  res<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">200</span> <span class=\"token comment\">// 응답 상태값 설정</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/plain\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 응답 헤더 중 Content-Type 설정</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, World!\\n\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 응답 데이터 전송</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 서버를 요청 대기 상태로 만든다</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> hostname<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 요청 대기가 완료되면 실행되는 콜백 함수</span>\n  <span class=\"token comment\">// 터미널에 로그를 기록한다</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server running at http://</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>hostname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>추가로 달아놓은 주석을 자세히 읽어보세요. 충분히 이해할 수 있을 겁니다.</p>\n<p>저장하고 터미널에서 서버를 실행해 보죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">node</span> server.js\nServer running at http://127.0.0.1:3000/</code></pre></div>\n<p>이런 메세지가 나오죠? 서버가 구동된 것입니다. http.server 인스턴스가 만들어 져서 127.0.0.1 컴퓨터(내 컴퓨터)의 3000번 포트에서 요청 대기하고 있는 상태인 것이죠.</p>\n<p>그럼 curl 명령어로 서버에 요청해서 응답을 확인해 볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> localhost:3000\nHello, world</code></pre></div>\n<p>\"Hello, world\" 문자열이 제대로 오네요.</p>\n<p><code>-v</code> 옵션을 추가하고 curl 요청을 보내면 http 헤더까지 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> localhost:3000 <span class=\"token parameter variable\">-v</span>\n* Rebuilt URL to: localhost:3000/\n*   Trying <span class=\"token number\">127.0</span>.0.1<span class=\"token punctuation\">..</span>.\n* TCP_NODELAY <span class=\"token builtin class-name\">set</span>\n* Connected to localhost <span class=\"token punctuation\">(</span><span class=\"token number\">127.0</span>.0.1<span class=\"token punctuation\">)</span> port <span class=\"token number\">3000</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">#0)</span>\n<span class=\"token operator\">></span> GET / HTTP/1.1\n<span class=\"token operator\">></span> Host: localhost:3000\n<span class=\"token operator\">></span> User-Agent: curl/7.54.0\n<span class=\"token operator\">></span> Accept: */*\n<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span> HTTP/1.1 <span class=\"token number\">200</span> OK\n<span class=\"token operator\">&lt;</span> Content-Type: text/plain\n<span class=\"token operator\">&lt;</span> Date: Wed, <span class=\"token number\">12</span> Dec <span class=\"token number\">2018</span> <span class=\"token number\">10</span>:48:33 GMT\n<span class=\"token operator\">&lt;</span> Connection: keep-alive\n<span class=\"token operator\">&lt;</span> Content-Length: <span class=\"token number\">14</span>\n<span class=\"token operator\">&lt;</span>\nHello, World<span class=\"token operator\">!</span></code></pre></div>\n<p><code>></code> 문자로 시작하면 요청 정보이고 <code>&#x3C;</code> 문자로 시작하면 응답 정보 입니다.\n응답 부분을 보면 200 상태코드와 text/plain 헤더가 오는 것을 확인할 수 있습니다.</p>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<ul>\n<li>노드 기본 모듈인 http를 살펴 봤습니다.</li>\n<li>http로 헬로월드 서버를 만들었습니다.</li>\n</ul>\n<p><a href=\"/series/2018/12/01/node-web-0_index.html\">목차 바로가기</a></p>","frontmatter":{"slug":"/series/2018/12/02/node-web-2_http.html","date":"2018-12-02T00:00:00.000Z","title":"[Node.js코드랩] 2.기본 모듈 http","tags":["lecture"],"series":"Node.js 코드랩","videoId":null,"featuredImage":null},"tableOfContents":"<ul>\n<li><a href=\"#%EB%AA%A9%ED%91%9C\">🌳목표</a></li>\n<li><a href=\"#%EC%99%9C-http-%EB%AA%A8%EB%93%88%EB%B6%80%ED%84%B0-%EC%8B%9C%EC%9E%91%ED%95%98%EB%82%98%EC%9A%94\">왜 http 모듈부터 시작하나요?</a></li>\n<li><a href=\"#%EB%AC%B8%EC%84%9C%EB%A5%BC-%EA%B0%99%EC%9D%B4-%EC%82%B4%ED%8E%B4-%EB%B3%BC%EA%B9%8C%EC%9A%94\">문서를 같이 살펴 볼까요?</a></li>\n<li><a href=\"#hello-word\">Hello word</a></li>\n<li><a href=\"#%EC%A0%95%EB%A6%AC\">정리</a></li>\n</ul>","excerpt":"🌳목표 노드의 기본 모듈 중 네트웍 기능을 제공하는 http 모듈을 알아 봅니다.\n헬로월드 코드로 http모듈을 이용한 서버 어플레케이션을 만드는 것이 목표입니다. 왜 http 모듈부터 시작하나요? 우리는 웹 어플리케이션을 만들어 볼겁니다. 웹 서버를 만들기 위해서는 꽤 많은 네트웍 지식을 알고 있어야 합니다. 가령 tcp, listen, 3way…"},"video":null,"allMarkdownRemark":{"nodes":[{"id":"1cb118d7-237a-5aea-b5d4-1590eb191cfc","frontmatter":{"slug":"/series/2018/12/01/node-web-1_orientation.html","date":"2018-12-01T00:00:00.000Z","title":"[Node.js 코드랩] 1.오리엔테이션","series":"Node.js 코드랩"}},{"id":"b4ab239d-7b61-53bf-bd10-53f49921bb61","frontmatter":{"slug":"/series/2018/12/02/node-web-2_http.html","date":"2018-12-02T00:00:00.000Z","title":"[Node.js코드랩] 2.기본 모듈 http","series":"Node.js 코드랩"}},{"id":"44579173-3676-590b-bdc9-971410daa3d8","frontmatter":{"slug":"/series/2018/12/03/node-web-3_refactoring.html","date":"2018-12-03T00:00:00.000Z","title":"[Node.js코드랩] 3.리팩토링","series":"Node.js 코드랩"}},{"id":"5d77e975-de08-5949-a898-a9f46ed35252","frontmatter":{"slug":"/series/2018/12/04/node-web-4_application.html","date":"2018-12-04T00:00:00.000Z","title":"[Node.js코드랩] 4.어플리케이션","series":"Node.js 코드랩"}},{"id":"ca7df7b9-d136-5a79-89a3-da3a1ccc3a58","frontmatter":{"slug":"/series/2018/12/05/node-web-5_debug.html","date":"2018-12-05T00:00:00.000Z","title":"[Node.js코드랩] 5.커스텀 모듈 Debug","series":"Node.js 코드랩"}},{"id":"7ba64ac9-9c16-5ece-af0d-2fe04f29542d","frontmatter":{"slug":"/series/2018/12/06/node-web-6_static-files.html","date":"2018-12-06T00:00:00.000Z","title":"[Node.js코드랩] 6.정적 파일","series":"Node.js 코드랩"}},{"id":"e416ef39-eb25-56a5-ab2e-4d606a589903","frontmatter":{"slug":"/series/2018/12/07/node-web-7_serve-static.html","date":"2018-12-07T00:00:00.000Z","title":"[Node.js코드랩] 7.커스텀 모듈 serve-static","series":"Node.js 코드랩"}},{"id":"f493f065-3d9b-5464-9b54-235d3be39ba6","frontmatter":{"slug":"/series/2018/12/08/node-web-8_middleware.html","date":"2018-12-08T00:00:00.000Z","title":"[Node.js코드랩] 8.미들웨어","series":"Node.js 코드랩"}},{"id":"7e2825a3-c02b-5fb5-8fee-99d925b59f29","frontmatter":{"slug":"/series/2018/12/09/node-web-9_middleware2.html","date":"2018-12-09T00:00:00.000Z","title":"[Node.js코드랩] 9.미들웨어 활용","series":"Node.js 코드랩"}},{"id":"cfd75988-0503-5f52-a322-517c0302912a","frontmatter":{"slug":"/series/2018/12/10/node-web-10_logger.html","date":"2018-12-10T00:00:00.000Z","title":"[Node.js코드랩] 10.커스텀 모듈 logger","series":"Node.js 코드랩"}},{"id":"c68fad79-e773-5437-b89e-11847296a7f9","frontmatter":{"slug":"/series/2018/12/11/node-web-11_router-use.html","date":"2018-12-11T00:00:00.000Z","title":"[Node.js코드랩] 11.라우터 use","series":"Node.js 코드랩"}},{"id":"cbb25bc5-13c2-53da-8daa-68a1b5a964c3","frontmatter":{"slug":"/series/2018/12/12/node-web-12_get-posts-api.html","date":"2018-12-12T00:00:00.000Z","title":"[Node.js코드랩] 12.포스트 조회 API","series":"Node.js 코드랩"}},{"id":"207d114a-2822-59de-a8d9-baa786f8d029","frontmatter":{"slug":"/series/2018/12/13/node-web-13_res.html","date":"2018-12-13T00:00:00.000Z","title":"[Node.js코드랩] 13. 응답 객체","series":"Node.js 코드랩"}},{"id":"6d57e34b-c567-5762-a515-292655388662","frontmatter":{"slug":"/series/2018/12/14/node-web-14_req.html","date":"2018-12-14T00:00:00.000Z","title":"[Node.js코드랩] 14. 요청 객체","series":"Node.js 코드랩"}},{"id":"49b05e44-4c8c-5a31-a627-2ea7ba6816ea","frontmatter":{"slug":"/series/2018/12/15/node-web-15_get_post.html","date":"2018-12-15T00:00:00.000Z","title":"[Node.js코드랩] 15.라우터 Get, Post","series":"Node.js 코드랩"}},{"id":"6ce7c7d2-18fa-53a9-ad9b-b19ef69e3ed6","frontmatter":{"slug":"/series/2018/12/16/node-web-16_body-parser.html","date":"2018-12-16T00:00:00.000Z","title":"[Node.js코드랩] 16. body-parser","series":"Node.js 코드랩"}},{"id":"1941cc46-ba26-542f-82d5-c0908ffae3bf","frontmatter":{"slug":"/series/2018/12/17/node-web-18_summary.html","date":"2018-12-17T00:00:00.000Z","title":"[Node.js코드랩] 18. 마무리","series":"Node.js 코드랩"}},{"id":"8fbaeb2f-758b-5a1a-a585-e972fcee68a3","frontmatter":{"slug":"/series/2018/12/17/node-web-17_expressjs.html","date":"2018-12-17T00:00:00.000Z","title":"[Node.js코드랩] 17. Express.js","series":"Node.js 코드랩"}}]}},"pageContext":{"slug":"/series/2018/12/02/node-web-2_http.html","date":"2018-12-02T00:00:00.000Z","series":"Node.js 코드랩","videoId":null,"previous":{"frontmatter":{"slug":"/series/2018/12/01/node-web-0_index.html","date":"2018-12-01T00:00:00.000Z","title":"🌳[Node.js 코드랩] 소개 및 목차","category":"연재물","series":null,"videoId":null}},"next":{"frontmatter":{"slug":"/series/2018/12/03/node-web-3_refactoring.html","date":"2018-12-03T00:00:00.000Z","title":"[Node.js코드랩] 3.리팩토링","category":"연재물","series":"Node.js 코드랩","videoId":null}}}},"staticQueryHashes":["2263867198"]}