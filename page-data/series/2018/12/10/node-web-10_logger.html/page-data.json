{"componentChunkName":"component---src-templates-blog-post-blog-post-tsx","path":"/series/2018/12/10/node-web-10_logger.html","result":{"data":{"site":{"siteMetadata":{"title":"김정환 블로그","url":"https://jeonghwan-kim.github.io"}},"markdownRemark":{"id":"40e9aef7-0d57-5a89-8789-05b993261b16","excerpt":"🌳목표 요청이 오더라도 서버의 터미널에는 아무런 정보도 남아 있지 않습니다.\n이번 시간에는 서버 로그를 기록하는 미들웨어인 logger를 만들어 보겠습니다.\n익스프레스JS 진영의 morgan과 유사한 모듈입니다. 🐤실습 - Logger…","html":"<h2 id=\"목표\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%ED%91%9C\" aria-label=\"목표 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌳목표</h2>\n<p>요청이 오더라도 서버의 터미널에는 아무런 정보도 남아 있지 않습니다.\n이번 시간에는 서버 로그를 기록하는 미들웨어인 logger를 만들어 보겠습니다.\n익스프레스JS 진영의 <a href=\"https://github.com/expressjs/morgan\">morgan</a>과 유사한 모듈입니다.</p>\n<h2 id=\"실습---logger-미들웨어를-구현해-보세요\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%8A%B5---logger-%EB%AF%B8%EB%93%A4%EC%9B%A8%EC%96%B4%EB%A5%BC-%EA%B5%AC%ED%98%84%ED%95%B4-%EB%B3%B4%EC%84%B8%EC%9A%94\" aria-label=\"실습   logger 미들웨어를 구현해 보세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐤실습 - Logger 미들웨어를 구현해 보세요</h2>\n<p>매 요청마다 메소드명과 URL을 터미널에 찍어 보세요.</p>\n<p>먼저 지난 시간까지 작성한 코드로 이동합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ git checkout -f module/logger-spec</code></pre></div>\n<p><em>힌트: req 객체를 살펴보세요</em></p>\n<h2 id=\"풀이\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4\" aria-label=\"풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐤풀이</h2>\n<p>middlewares/logger.js 파일을 만들어 아래 코드를 입력합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">logger</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> log <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>req<span class=\"token punctuation\">.</span>method<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>req<span class=\"token punctuation\">.</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> logger</code></pre></div>\n<p>logger도 요청에서 응답 사이에 실행되는 미들웨어 함수이므로 (req, res, next) 인터페이스를 맞추었습니다.\n로그 메세지를 메소드명(req.method)과 URL(req.url)을 합쳐서 출력했고요.</p>\n<p>미들웨어 함수이기 때문에 다음 미들웨어 호출을 위해 next() 함수를 실행합니다.</p>\n<p>이것을 app.js에서 사용해야겠지요.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">const</span> logger <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./middlewares/logger'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">logger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 로그 미들웨어 추가</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">serveStatic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>미들웨어 등록함수인 use() 메소드로 logger를 추가했습니다.</p>\n<p>서버를 구동하고 요청을 보내볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm start\nGET /\nGET /css/style.css\nGET /js/script.js\nGET /imgs/twitter.png\nGET /favicon.ico</code></pre></div>\n<p>브라우져에서 index.html을 요청한뒤 순차적으로 정적 파일 요청 내용이 로그로 찍혀 나옵니다.</p>\n<h2 id=\"실습---메소드명에-색상도-추가해-보세요\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%8A%B5---%EB%A9%94%EC%86%8C%EB%93%9C%EB%AA%85%EC%97%90-%EC%83%89%EC%83%81%EB%8F%84-%EC%B6%94%EA%B0%80%ED%95%B4-%EB%B3%B4%EC%84%B8%EC%9A%94\" aria-label=\"실습   메소드명에 색상도 추가해 보세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐤실습 - 메소드명에 색상도 추가해 보세요</h2>\n<p><em>힌트: debug모듈 참고</em></p>\n<h2 id=\"-풀이\" style=\"position:relative;\"><a href=\"#-%ED%92%80%EC%9D%B4\" aria-label=\" 풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐤 풀이</h2>\n<p>debug 모듈에서 색상 출력을 위해 생삭 값을 사용했지요?\n이번에도 비슷한 방법으로 구현하겠습니다.\n세 부분으로 나눠서 풀어볼게요.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  green<span class=\"token operator\">:</span> <span class=\"token string\">'\\x1b[32m'</span><span class=\"token punctuation\">,</span>\n  cyan<span class=\"token operator\">:</span> <span class=\"token string\">'\\x1b[36m'</span><span class=\"token punctuation\">,</span>\n  red<span class=\"token operator\">:</span> <span class=\"token string\">'\\x1b[31m'</span><span class=\"token punctuation\">,</span>\n  yellow<span class=\"token operator\">:</span> <span class=\"token string\">'\\x1b[33m'</span><span class=\"token punctuation\">,</span>\n  reset<span class=\"token operator\">:</span> <span class=\"token string\">'\\x1b[0m'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>사용할 컬러 값을 맵으로 만듭니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> methodColorMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">get</span><span class=\"token operator\">:</span> colors<span class=\"token punctuation\">.</span>green<span class=\"token punctuation\">,</span>\n  post<span class=\"token operator\">:</span> colors<span class=\"token punctuation\">.</span>cyan<span class=\"token punctuation\">,</span>\n  put<span class=\"token operator\">:</span> colors<span class=\"token punctuation\">.</span>yellow<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">delete</span><span class=\"token operator\">:</span> colors<span class=\"token punctuation\">.</span>red\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>메소드 이름에 따라 사용할 색상을 맵핑하여 methodColorMap을 만듭니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">logger</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> coloredMethod <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>method <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>methodColorMap<span class=\"token punctuation\">[</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>method<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>colors<span class=\"token punctuation\">.</span>reset<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> log <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">coloredMethod</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>req<span class=\"token punctuation\">.</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>색상 코드와 메소드 명을 조합한 문자열을 반환하는 coloredMethod() 함수를 정의했습니다.\n이것을 이용해 메소드 이름만 색상을 줘서 출력하도록 한 것이죠.</p>\n<p>그럼 결과를 다시 확인해 볼까요?</p>\n<p><img src=\"/assets/imgs/2018/12/10/result.png\"></p>\n<p>logger는 우측 하단의 써드 파티 라이브러리로 분류할 수 있습니다.</p>\n<p><img src=\"/assets/imgs/2018/12/10/struct.png\"></p>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<ul>\n<li>요청 정보를 로깅하는 logger 미들웨어를 만들었습니다.</li>\n</ul>\n<p><a href=\"/series/2018/12/01/node-web-0_index.html\">목차 바로가기</a></p>","fields":{"date":"2018년 12월 10일","slug":"/series/2018/12/10/node-web-10_logger.html","beforeGatsby":true},"frontmatter":{"title":"[Node.js코드랩] 10.커스텀 모듈 logger","tags":["lecture"],"seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab","videoId":null},"tableOfContents":"<ul>\n<li><a href=\"#%EB%AA%A9%ED%91%9C\">🌳목표</a></li>\n<li><a href=\"#%EC%8B%A4%EC%8A%B5---logger-%EB%AF%B8%EB%93%A4%EC%9B%A8%EC%96%B4%EB%A5%BC-%EA%B5%AC%ED%98%84%ED%95%B4-%EB%B3%B4%EC%84%B8%EC%9A%94\">🐤실습 - Logger 미들웨어를 구현해 보세요</a></li>\n<li><a href=\"#%ED%92%80%EC%9D%B4\">🐤풀이</a></li>\n<li><a href=\"#%EC%8B%A4%EC%8A%B5---%EB%A9%94%EC%86%8C%EB%93%9C%EB%AA%85%EC%97%90-%EC%83%89%EC%83%81%EB%8F%84-%EC%B6%94%EA%B0%80%ED%95%B4-%EB%B3%B4%EC%84%B8%EC%9A%94\">🐤실습 - 메소드명에 색상도 추가해 보세요</a></li>\n<li><a href=\"#-%ED%92%80%EC%9D%B4\">🐤 풀이</a></li>\n<li><a href=\"#%EC%A0%95%EB%A6%AC\">정리</a></li>\n</ul>"},"series":{"id":"555b6438-4a71-51d0-9156-a1d5ca4d5eab","title":"Node.js 코드랩"},"video":null,"allMarkdownRemark":{"nodes":[{"id":"55a324e0-6e38-5ec8-a3e7-029e4563c485","fields":{"slug":"/series/2018/12/01/node-web-1_orientation.html","date":"2018-12-01T00:00:00.000Z"},"frontmatter":{"title":"[Node.js 코드랩] 1.오리엔테이션","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"47ab845e-b020-5d91-b8d6-8cf021dea527","fields":{"slug":"/series/2018/12/02/node-web-2_http.html","date":"2018-12-02T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 2.기본 모듈 http","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"707f5850-7ad4-5a1f-9899-05a7a8a8a204","fields":{"slug":"/series/2018/12/03/node-web-3_refactoring.html","date":"2018-12-03T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 3.리팩토링","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"57ecb32c-ad9a-50eb-8da4-40aea81b3d6a","fields":{"slug":"/series/2018/12/04/node-web-4_application.html","date":"2018-12-04T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 4.어플리케이션","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"d6ffc7a9-84a8-5eed-9c44-6b50f18e6db0","fields":{"slug":"/series/2018/12/05/node-web-5_debug.html","date":"2018-12-05T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 5.커스텀 모듈 Debug","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"fceb13af-7b53-5444-9c6d-709d8ce0ef6f","fields":{"slug":"/series/2018/12/06/node-web-6_static-files.html","date":"2018-12-06T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 6.정적 파일","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"a5adc762-1163-5eac-b3f8-d4813d631cf0","fields":{"slug":"/series/2018/12/07/node-web-7_serve-static.html","date":"2018-12-07T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 7.커스텀 모듈 serve-static","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"bfed004c-9909-5b65-a1fb-f8ca988e3b3c","fields":{"slug":"/series/2018/12/08/node-web-8_middleware.html","date":"2018-12-08T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 8.미들웨어","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"98a0d5ee-52a1-526a-80c5-8a22f42b6b13","fields":{"slug":"/series/2018/12/09/node-web-9_middleware2.html","date":"2018-12-09T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 9.미들웨어 활용","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"40e9aef7-0d57-5a89-8789-05b993261b16","fields":{"slug":"/series/2018/12/10/node-web-10_logger.html","date":"2018-12-10T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 10.커스텀 모듈 logger","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"3b588f16-6a2f-53ec-a65a-1ac8141ab57a","fields":{"slug":"/series/2018/12/11/node-web-11_router-use.html","date":"2018-12-11T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 11.라우터 use","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"67ed027c-8cb2-5f39-93a9-7fc73c0c74cd","fields":{"slug":"/series/2018/12/12/node-web-12_get-posts-api.html","date":"2018-12-12T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 12.포스트 조회 API","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"91bc8106-6f39-5b71-a248-6e077a8dc7f1","fields":{"slug":"/series/2018/12/13/node-web-13_res.html","date":"2018-12-13T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 13. 응답 객체","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"d4c424e7-2912-5926-b912-6ff5c0de4b3f","fields":{"slug":"/series/2018/12/14/node-web-14_req.html","date":"2018-12-14T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 14. 요청 객체","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"963f5cd1-3036-5f23-a6d7-01ec8bde0d36","fields":{"slug":"/series/2018/12/15/node-web-15_get_post.html","date":"2018-12-15T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 15.라우터 Get, Post","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"f4685d82-22b5-501e-a437-f35a01968b47","fields":{"slug":"/series/2018/12/16/node-web-16_body-parser.html","date":"2018-12-16T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 16. body-parser","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"6ecbe281-b86d-5e09-b9e5-b090c3b46a7c","fields":{"slug":"/series/2018/12/17/node-web-17_expressjs.html","date":"2018-12-17T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 17. Express.js","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"5040db68-cb25-5e8f-b8fe-92e41bc664ab","fields":{"slug":"/series/2018/12/17/node-web-18_summary.html","date":"2018-12-17T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 18. 마무리","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}}]}},"pageContext":{"slug":"/series/2018/12/10/node-web-10_logger.html","date":"2018-12-10T00:00:00.000Z","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab","videoId":null,"previous":{"fields":{"slug":"/series/2018/12/09/node-web-9_middleware2.html","date":"2018-12-09T00:00:00.000Z","beforeGatsby":true},"frontmatter":{"title":"[Node.js코드랩] 9.미들웨어 활용","category":"series","permalink":null,"seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab","videoId":null}},"next":{"fields":{"slug":"/series/2018/12/11/node-web-11_router-use.html","date":"2018-12-11T00:00:00.000Z","beforeGatsby":true},"frontmatter":{"title":"[Node.js코드랩] 11.라우터 use","category":"series","permalink":null,"seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab","videoId":null}}}}}