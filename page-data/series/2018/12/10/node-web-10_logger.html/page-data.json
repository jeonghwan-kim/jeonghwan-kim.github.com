{
    "componentChunkName": "component---src-templates-blog-post-index-tsx",
    "path": "/series/2018/12/10/node-web-10_logger.html",
    "result": {"data":{"site":{"siteMetadata":{"title":"김정환 블로그","url":"https://jeonghwan-kim.github.io"}},"markdownRemark":{"id":"19e53d49-1c5d-502e-a499-2f6c4864bd29","html":"<h2 id=\"목표\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%ED%91%9C\" aria-label=\"목표 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌳목표</h2>\n<p>요청이 오더라도 서버의 터미널에는 아무런 정보도 남아 있지 않습니다.\n이번 시간에는 서버 로그를 기록하는 미들웨어인 logger를 만들어 보겠습니다.\n익스프레스JS 진영의 <a href=\"https://github.com/expressjs/morgan\">morgan</a>과 유사한 모듈입니다.</p>\n<h2 id=\"실습---logger-미들웨어를-구현해-보세요\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%8A%B5---logger-%EB%AF%B8%EB%93%A4%EC%9B%A8%EC%96%B4%EB%A5%BC-%EA%B5%AC%ED%98%84%ED%95%B4-%EB%B3%B4%EC%84%B8%EC%9A%94\" aria-label=\"실습   logger 미들웨어를 구현해 보세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐤실습 - Logger 미들웨어를 구현해 보세요</h2>\n<p>매 요청마다 메소드명과 URL을 터미널에 찍어 보세요.</p>\n<p>먼저 지난 시간까지 작성한 코드로 이동합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ git checkout -f module/logger-spec</code></pre></div>\n<p><em>힌트: req 객체를 살펴보세요</em></p>\n<h2 id=\"풀이\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4\" aria-label=\"풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐤풀이</h2>\n<p>middlewares/logger.js 파일을 만들어 아래 코드를 입력합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">logger</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> log <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>req<span class=\"token punctuation\">.</span>method<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>req<span class=\"token punctuation\">.</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> logger</code></pre></div>\n<p>logger도 요청에서 응답 사이에 실행되는 미들웨어 함수이므로 (req, res, next) 인터페이스를 맞추었습니다.\n로그 메세지를 메소드명(req.method)과 URL(req.url)을 합쳐서 출력했고요.</p>\n<p>미들웨어 함수이기 때문에 다음 미들웨어 호출을 위해 next() 함수를 실행합니다.</p>\n<p>이것을 app.js에서 사용해야겠지요.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">const</span> logger <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./middlewares/logger\"</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">logger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 로그 미들웨어 추가</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">serveStatic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>미들웨어 등록함수인 use() 메소드로 logger를 추가했습니다.</p>\n<p>서버를 구동하고 요청을 보내볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm start\nGET /\nGET /css/style.css\nGET /js/script.js\nGET /imgs/twitter.png\nGET /favicon.ico</code></pre></div>\n<p>브라우져에서 index.html을 요청한뒤 순차적으로 정적 파일 요청 내용이 로그로 찍혀 나옵니다.</p>\n<h2 id=\"실습---메소드명에-색상도-추가해-보세요\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%8A%B5---%EB%A9%94%EC%86%8C%EB%93%9C%EB%AA%85%EC%97%90-%EC%83%89%EC%83%81%EB%8F%84-%EC%B6%94%EA%B0%80%ED%95%B4-%EB%B3%B4%EC%84%B8%EC%9A%94\" aria-label=\"실습   메소드명에 색상도 추가해 보세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐤실습 - 메소드명에 색상도 추가해 보세요</h2>\n<p><em>힌트: debug모듈 참고</em></p>\n<h2 id=\"-풀이\" style=\"position:relative;\"><a href=\"#-%ED%92%80%EC%9D%B4\" aria-label=\" 풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐤 풀이</h2>\n<p>debug 모듈에서 색상 출력을 위해 생삭 값을 사용했지요?\n이번에도 비슷한 방법으로 구현하겠습니다.\n세 부분으로 나눠서 풀어볼게요.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">green</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\\x1b[32m\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">cyan</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\\x1b[36m\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">red</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\\x1b[31m\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">yellow</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\\x1b[33m\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">reset</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\\x1b[0m\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>사용할 컬러 값을 맵으로 만듭니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> methodColorMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">get</span><span class=\"token operator\">:</span> colors<span class=\"token punctuation\">.</span>green<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">post</span><span class=\"token operator\">:</span> colors<span class=\"token punctuation\">.</span>cyan<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">put</span><span class=\"token operator\">:</span> colors<span class=\"token punctuation\">.</span>yellow<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">delete</span><span class=\"token operator\">:</span> colors<span class=\"token punctuation\">.</span>red<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>메소드 이름에 따라 사용할 색상을 맵핑하여 methodColorMap을 만듭니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">logger</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> coloredMethod <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>method <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>methodColorMap<span class=\"token punctuation\">[</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>method<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>colors<span class=\"token punctuation\">.</span>reset<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> log <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">coloredMethod</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>req<span class=\"token punctuation\">.</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>색상 코드와 메소드 명을 조합한 문자열을 반환하는 coloredMethod() 함수를 정의했습니다.\n이것을 이용해 메소드 이름만 색상을 줘서 출력하도록 한 것이죠.</p>\n<p>그럼 결과를 다시 확인해 볼까요?</p>\n<p><img src=\"/assets/imgs/2018/12/10/result.png\" alt=\"\"></p>\n<p>logger는 우측 하단의 써드 파티 라이브러리로 분류할 수 있습니다.</p>\n<p><img src=\"/assets/imgs/2018/12/10/struct.png\" alt=\"\"></p>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<ul>\n<li>요청 정보를 로깅하는 logger 미들웨어를 만들었습니다.</li>\n</ul>\n<p><a href=\"/series/2018/12/01/node-web-0_index.html\">목차 바로가기</a></p>","frontmatter":{"slug":"/series/2018/12/10/node-web-10_logger.html","date":"2018-12-10T00:00:00.000Z","title":"[Node.js코드랩] 10.커스텀 모듈 logger","tags":["lecture"],"series":"Node.js 코드랩","videoId":null,"featuredImage":null},"tableOfContents":"<ul>\n<li><a href=\"#%EB%AA%A9%ED%91%9C\">🌳목표</a></li>\n<li><a href=\"#%EC%8B%A4%EC%8A%B5---logger-%EB%AF%B8%EB%93%A4%EC%9B%A8%EC%96%B4%EB%A5%BC-%EA%B5%AC%ED%98%84%ED%95%B4-%EB%B3%B4%EC%84%B8%EC%9A%94\">🐤실습 - Logger 미들웨어를 구현해 보세요</a></li>\n<li><a href=\"#%ED%92%80%EC%9D%B4\">🐤풀이</a></li>\n<li><a href=\"#%EC%8B%A4%EC%8A%B5---%EB%A9%94%EC%86%8C%EB%93%9C%EB%AA%85%EC%97%90-%EC%83%89%EC%83%81%EB%8F%84-%EC%B6%94%EA%B0%80%ED%95%B4-%EB%B3%B4%EC%84%B8%EC%9A%94\">🐤실습 - 메소드명에 색상도 추가해 보세요</a></li>\n<li><a href=\"#-%ED%92%80%EC%9D%B4\">🐤 풀이</a></li>\n<li><a href=\"#%EC%A0%95%EB%A6%AC\">정리</a></li>\n</ul>","excerpt":"🌳목표 요청이 오더라도 서버의 터미널에는 아무런 정보도 남아 있지 않습니다.\n이번 시간에는 서버 로그를 기록하는 미들웨어인 logger를 만들어 보겠습니다.\n익스프레스JS 진영의 morgan과 유사한 모듈입니다. 🐤실습 - Logger 미들웨어를 구현해 보세요 매 요청마다 메소드명과 URL을 터미널에 찍어 보세요. 먼저 지난 시간까지 작성한 코드로 이동합니다. 힌트: req 객체를 살펴보세요 🐤풀이 middlewares/logger.js 파일을 만들어 아래 코드를 입력합니다. logger도 요청에서 응답 사이에 실행되는 미들웨어 함수이므로 (req, res, next) 인터페이스를 맞추었습니다.\n로그 메세지를 메소드명(req.method)과 URL(req.url)을 합쳐서 출력했고요. 미들웨어 함수이기 때문에 다음 미들웨어 호출을 위해 next() 함수를 실행합니다. 이것을 app.js에서 사용해야겠지요. 미들웨어 등록함수인 use() 메소드로 logger…"},"video":null,"allMarkdownRemark":{"nodes":[{"id":"c1aff780-329b-54c9-8b65-9adf8255b80f","frontmatter":{"slug":"/series/2018/12/01/node-web-1_orientation.html","date":"2018-12-01T00:00:00.000Z","title":"[Node.js 코드랩] 1.오리엔테이션","series":"Node.js 코드랩"}},{"id":"87d6201c-0865-5682-aee7-484a28e1b0c6","frontmatter":{"slug":"/series/2018/12/02/node-web-2_http.html","date":"2018-12-02T00:00:00.000Z","title":"[Node.js코드랩] 2.기본 모듈 http","series":"Node.js 코드랩"}},{"id":"034d39e5-6cf5-50b2-a6aa-8dbace6f3373","frontmatter":{"slug":"/series/2018/12/03/node-web-3_refactoring.html","date":"2018-12-03T00:00:00.000Z","title":"[Node.js코드랩] 3.리팩토링","series":"Node.js 코드랩"}},{"id":"3f204c8b-282c-55a4-99a8-318400c0e728","frontmatter":{"slug":"/series/2018/12/04/node-web-4_application.html","date":"2018-12-04T00:00:00.000Z","title":"[Node.js코드랩] 4.어플리케이션","series":"Node.js 코드랩"}},{"id":"e70998dc-8407-52e6-bb47-6f421424d3c1","frontmatter":{"slug":"/series/2018/12/05/node-web-5_debug.html","date":"2018-12-05T00:00:00.000Z","title":"[Node.js코드랩] 5.커스텀 모듈 Debug","series":"Node.js 코드랩"}},{"id":"b674c656-6e82-5492-8b8d-55bdca7435d0","frontmatter":{"slug":"/series/2018/12/06/node-web-6_static-files.html","date":"2018-12-06T00:00:00.000Z","title":"[Node.js코드랩] 6.정적 파일","series":"Node.js 코드랩"}},{"id":"357a87df-cd75-5c38-a7b1-c75a0deda4df","frontmatter":{"slug":"/series/2018/12/07/node-web-7_serve-static.html","date":"2018-12-07T00:00:00.000Z","title":"[Node.js코드랩] 7.커스텀 모듈 serve-static","series":"Node.js 코드랩"}},{"id":"a0498e79-1772-5c7b-80d5-65c577cce45d","frontmatter":{"slug":"/series/2018/12/08/node-web-8_middleware.html","date":"2018-12-08T00:00:00.000Z","title":"[Node.js코드랩] 8.미들웨어","series":"Node.js 코드랩"}},{"id":"27971d0e-d65a-5ee9-87e3-436bf2d2773d","frontmatter":{"slug":"/series/2018/12/09/node-web-9_middleware2.html","date":"2018-12-09T00:00:00.000Z","title":"[Node.js코드랩] 9.미들웨어 활용","series":"Node.js 코드랩"}},{"id":"19e53d49-1c5d-502e-a499-2f6c4864bd29","frontmatter":{"slug":"/series/2018/12/10/node-web-10_logger.html","date":"2018-12-10T00:00:00.000Z","title":"[Node.js코드랩] 10.커스텀 모듈 logger","series":"Node.js 코드랩"}},{"id":"d87c7b44-7260-5f36-bf4c-954780ec33b4","frontmatter":{"slug":"/series/2018/12/11/node-web-11_router-use.html","date":"2018-12-11T00:00:00.000Z","title":"[Node.js코드랩] 11.라우터 use","series":"Node.js 코드랩"}},{"id":"9f78412c-a891-557e-954f-2a3dddbc54b5","frontmatter":{"slug":"/series/2018/12/12/node-web-12_get-posts-api.html","date":"2018-12-12T00:00:00.000Z","title":"[Node.js코드랩] 12.포스트 조회 API","series":"Node.js 코드랩"}},{"id":"42f9d27e-b2eb-5861-a763-9d2671a05cec","frontmatter":{"slug":"/series/2018/12/13/node-web-13_res.html","date":"2018-12-13T00:00:00.000Z","title":"[Node.js코드랩] 13. 응답 객체","series":"Node.js 코드랩"}},{"id":"465c8e16-0b11-506d-bcc6-69b6f02d93a4","frontmatter":{"slug":"/series/2018/12/14/node-web-14_req.html","date":"2018-12-14T00:00:00.000Z","title":"[Node.js코드랩] 14. 요청 객체","series":"Node.js 코드랩"}},{"id":"7a738192-ebd2-57c5-a69e-6bdcdfba5428","frontmatter":{"slug":"/series/2018/12/15/node-web-15_get_post.html","date":"2018-12-15T00:00:00.000Z","title":"[Node.js코드랩] 15.라우터 Get, Post","series":"Node.js 코드랩"}},{"id":"8950cffd-84dc-5535-ae68-ad0973801ab6","frontmatter":{"slug":"/series/2018/12/16/node-web-16_body-parser.html","date":"2018-12-16T00:00:00.000Z","title":"[Node.js코드랩] 16. body-parser","series":"Node.js 코드랩"}},{"id":"f9eebf1b-8fcf-506c-bae8-ac7c5b576ce6","frontmatter":{"slug":"/series/2018/12/17/node-web-17_expressjs.html","date":"2018-12-17T00:00:00.000Z","title":"[Node.js코드랩] 17. Express.js","series":"Node.js 코드랩"}},{"id":"9b807cfc-9203-5f7d-9a99-9f7dccad52f0","frontmatter":{"slug":"/series/2018/12/17/node-web-18_summary.html","date":"2018-12-17T00:00:00.000Z","title":"[Node.js코드랩] 18. 마무리","series":"Node.js 코드랩"}}]}},"pageContext":{"slug":"/series/2018/12/10/node-web-10_logger.html","date":"2018-12-10T00:00:00.000Z","series":"Node.js 코드랩","videoId":null,"previous":{"frontmatter":{"slug":"/series/2018/12/09/node-web-9_middleware2.html","date":"2018-12-09T00:00:00.000Z","title":"[Node.js코드랩] 9.미들웨어 활용","category":"연재물","series":"Node.js 코드랩","videoId":null}},"next":{"frontmatter":{"slug":"/series/2018/12/11/node-web-11_router-use.html","date":"2018-12-11T00:00:00.000Z","title":"[Node.js코드랩] 11.라우터 use","category":"연재물","series":"Node.js 코드랩","videoId":null}}}},
    "staticQueryHashes": ["3044774879"]}