{"componentChunkName":"component---src-templates-blog-post-index-tsx","path":"/series/2018/12/14/node-web-14_req.html","result":{"data":{"site":{"siteMetadata":{"title":"김정환 블로그","url":"https://jeonghwan-kim.github.io"}},"markdownRemark":{"id":"d4c424e7-2912-5926-b912-6ff5c0de4b3f","excerpt":"🌳목표 Response 모듈을 만든 것처럼 익스프레스와 유사한 요청 객체인 Request 모듈을 만듭니다. 쿼리스트링 요청 먼저 브랜치를 이동해 볼까요? 서버를 재 구동하고 브라우져로 접속해 보세요.  크롬 개발자 도구로 보니 에러가 나오는데요.\n이전과 다르게 /api/posts…","html":"<h2 id=\"목표\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%ED%91%9C\" aria-label=\"목표 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌳목표</h2>\n<p>Response 모듈을 만든 것처럼 익스프레스와 유사한 요청 객체인 Request 모듈을 만듭니다.</p>\n<h2 id=\"쿼리스트링-요청\" style=\"position:relative;\"><a href=\"#%EC%BF%BC%EB%A6%AC%EC%8A%A4%ED%8A%B8%EB%A7%81-%EC%9A%94%EC%B2%AD\" aria-label=\"쿼리스트링 요청 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쿼리스트링 요청</h2>\n<p>먼저 브랜치를 이동해 볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ git checkout -f request/spec</code></pre></div>\n<p>서버를 재 구동하고 브라우져로 접속해 보세요.</p>\n<p><img src=\"/assets/imgs/2018/12/14/result_1.png\"></p>\n<p>크롬 개발자 도구로 보니 에러가 나오는데요.\n이전과 다르게 /api/posts 요청에 쿼리문자열이 추가 되었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">?limit=2&amp;page=1</code></pre></div>\n<p>그런데 이게 404로 응답되는군요. 분명히 /api/posts 라우트를 등록했는데 말이죠.</p>\n<p>아마도 서버에서 미들웨어 등록시 사용한 URL과 요청한 URL이 '정확히' 일치하지 않는것 같습니다.\nsrc/Middleware.js에 있는 코드를 확인해 볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextMw<span class=\"token punctuation\">.</span>_path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> pathMatched <span class=\"token operator\">=</span> _req<span class=\"token punctuation\">.</span>url <span class=\"token operator\">===</span> nextMw<span class=\"token punctuation\">.</span>_path <span class=\"token comment\">// 바로 이 부분 !!!</span>\n  <span class=\"token keyword\">return</span> pathMatched <span class=\"token operator\">?</span> <span class=\"token function\">nextMw</span><span class=\"token punctuation\">(</span>_req<span class=\"token punctuation\">,</span> _res<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">_run</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>등록한 경로(nextMw._path)와 요청한 전체 주소(_req.url)가 완벽히 일치하지 않군요.\n그래서 등록한 미들웨어도 실행되지 않는 것이고요. 결국에 404를 응답하는 것입니다.</p>\n<p>이 문제를 해결하려면 쿼리스트링을 제외한 정확한 경로을 뽑아서 비교하는 기능이 필요합니다.</p>\n<h2 id=\"request-모듈\" style=\"position:relative;\"><a href=\"#request-%EB%AA%A8%EB%93%88\" aria-label=\"request 모듈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Request 모듈</h2>\n<p>HTTP 에서 요청 URL은 다음 형식을 갖습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Protocol + Domain + Path + QueryString + Body</code></pre></div>\n<p>이 중 우리가 사용할 것은 path, querystrig, body 부분입니다.</p>\n<p>지금까지 경로 매칭에 사용한 req.url은 path와 querystring이 포함되어 있습니다.\n이것이 문제의 원인이기도 하구요.</p>\n<p>req가 아래와 같은 형식의 정보를 제공한다면 어떨까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">req<span class=\"token punctuation\">.</span>path <span class=\"token operator\">=</span> <span class=\"token string\">\"/api/posts\"</span>\nreq<span class=\"token punctuation\">.</span>query <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  limit<span class=\"token operator\">:</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span>\n  page<span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>경로를 비교할때 req.url 대신에 req.path를 사용하면 정확한 비교가 되겠죠?\n게다가 쿼리스트링에 접근할 때는 미리 파싱된 req.query 객체를 통해서 limit과 page 값에 접근할 수도 있을 것입니다.</p>\n<p>이러한 req 객체를 확장하는 Request 모듈을 만들어 보겠습니다.</p>\n<p>요구사항이 있는 테스트 코드를 살펴 볼까요?\n네 부분으로 나눠 설명하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Request <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./Request'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Request'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'생성 인자가 없으면 에러를 던진다'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">should</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">Request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">throw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>테스트 모듈을 임포트하였습니다.\n첫 번째 테스트 케이스는 모듈 생성시 인자가 없으면 에러를 던지는 코드입니다.\n확장할 req 인자가 반드시 필요하니까요.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'반환 객체'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> req<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> qs\n\n    <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      path <span class=\"token operator\">=</span> <span class=\"token string\">'/api/posts'</span>\n      qs <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        limit<span class=\"token operator\">:</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span>\n        page<span class=\"token operator\">:</span> <span class=\"token string\">'1'</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">const</span> encodedQs <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">limit=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>qs<span class=\"token punctuation\">.</span>limit<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&amp;page=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>qs<span class=\"token punctuation\">.</span>page<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n      req <span class=\"token operator\">=</span> <span class=\"token function\">Request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>url<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>path<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">?</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>encodedQs<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>두 번째 테스트 케이스부터는 생성 인자가 올바로 들어간 이후의 테스트 입니다.\n모듈 생성 코드는 각 테스트 케이스에서 중복으로 사용될 것이므로 beforeEach()에서 기술하였습니다.</p>\n<p>기존 req 객체의 url 문자열을 기반으로 path와 querystring을 추출할 것이므로 url 문자열을 키로 가지고 있는 객체를 전달하였습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path 속성을 노출한다\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  req<span class=\"token punctuation\">.</span>should<span class=\"token punctuation\">.</span>have<span class=\"token punctuation\">.</span><span class=\"token function\">property</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>생성된 객체가 path 속성이 있는지 확인하는 코드입니다. path에는 querystring이 제거된 순수한 경로만 있어야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'query 속성을 노출한다'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      req<span class=\"token punctuation\">.</span>should<span class=\"token punctuation\">.</span>have<span class=\"token punctuation\">.</span><span class=\"token function\">property</span><span class=\"token punctuation\">(</span><span class=\"token string\">'query'</span><span class=\"token punctuation\">)</span>\n      req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>limit<span class=\"token punctuation\">.</span>should<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>qs<span class=\"token punctuation\">.</span>limit<span class=\"token punctuation\">)</span>\n      req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>page<span class=\"token punctuation\">.</span>should<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>qs<span class=\"token punctuation\">.</span>page<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>query 객체가 있는지 확인합니다. 이 객체에 limit과 page 값이 올바로 할당되어 있는지도 체크하는 코드입니다.</p>\n<h2 id=\"실습---request-모듈을-구현해-보세요\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%8A%B5---request-%EB%AA%A8%EB%93%88%EC%9D%84-%EA%B5%AC%ED%98%84%ED%95%B4-%EB%B3%B4%EC%84%B8%EC%9A%94\" aria-label=\"실습   request 모듈을 구현해 보세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐤실습 - Request 모듈을 구현해 보세요</h2>\n<p>테스트 코드에서 요구하는 것처럼 기존 req객체에 path와 query 속성을 추가하는 Request 모듈을 만들어 보세요.</p>\n<p><em>힌트: 문자열을 나눌 때는 String.prorotype.split()</em></p>\n<h2 id=\"풀이\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4\" aria-label=\"풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐤풀이</h2>\n<p>이 실습에서는 split() 스트링 메소드만 잘 사용해도 쉽게 해결할 수 있습니다.\n세 부분으로 나누어 풀어볼게요.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Request</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">req</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>req<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"req is required\"</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// req 확장 코드</span>\n\n  <span class=\"token keyword\">return</span> req\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> Request</code></pre></div>\n<p>생성인자 req가 없으면 에러를 던져 버립니다.\n그리고 확장된 req 객체를 다시 반환합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> partials <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"?\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> partials<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"/\"</span>\nreq<span class=\"token punctuation\">.</span>path <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>path <span class=\"token operator\">||</span> path\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>partials<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>partials<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> req</code></pre></div>\n<p>split() 메소드는 특정 캐릭터 기준으로 문자를 쪼겐 뒤 배열에 담아 반환합니다.\nreq.url을 \"?\"로 분리한 뒤 partials 배열로 담습니다.</p>\n<p>이렇게 분리된 partials의 첫 번째 요소에는 경로 정보가 들어가게 될 것입니다.\n그렇지 않을 경우엔 기본 경로 \"/\"를 할당하구요.\n이 path을 req.path에 저장해서 req 객체를 확장합니다.</p>\n<p>분리된 문자열의 나머지 부분이 없을 경우엔 바로 req 객체를 리턴합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> qs <span class=\"token operator\">=</span> partials<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> p</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> frag <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=\"</span><span class=\"token punctuation\">)</span>\n  obj<span class=\"token punctuation\">[</span>frag<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> frag<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">return</span> obj\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nreq<span class=\"token punctuation\">.</span>query <span class=\"token operator\">=</span> qs</code></pre></div>\n<p>쿼리스트링은 \"&#x26;\" 문자를 기준으로 \"key=value\" 형식으로 구성되어 있습니다.\n그래서 먼저 \"&#x26;\"로 문자를 분리한 것이죠.</p>\n<p>이렇게 반환된 배열을 reduce 함수로 돌리면서 obj에 결과를 담습니다.\n배열의 요소(p)는 \"key=value\" 형태의 문자열일 테니깐 \"=\" 문자 기준으로 한 번 더 분리합니다.\n그리고 나면 frag[0]에는 키가 frag[1]에는 밸류가 들어가게 되겠지요.</p>\n<p>이렇게 해서 완성된 qs 객체를 req.query로 할당하여 req 객체를 확장하였습니다.</p>\n<h2 id=\"request-모듈을-application에서-사용\" style=\"position:relative;\"><a href=\"#request-%EB%AA%A8%EB%93%88%EC%9D%84-application%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9\" aria-label=\"request 모듈을 application에서 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Request 모듈을 Application에서 사용</h2>\n<p>Reponse를 Application에서 사용한 것처럼 Request도 그렇게 해야합니다.\nsrc/Application.js 코드중 req 객체를 사용하는 부분을 볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">const</span> Request <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./Request'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Application</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> _server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    _middleware<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token function\">Request</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Response</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Request 객체로 교체</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>기존의 req 객체를 Request 객체로 확장하였습니다.</p>\n<h2 id=\"request-모듈을-middleware에서-사용\" style=\"position:relative;\"><a href=\"#request-%EB%AA%A8%EB%93%88%EC%9D%84-middleware%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9\" aria-label=\"request 모듈을 middleware에서 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Request 모듈을 Middleware에서 사용</h2>\n<p>초반에 언급한 문제의 원인을 다시 떠올려 볼까요?\n등록했던 API인데 404응답을 받은 문제였지요?\n그것은 바로 등록한 경로와 요청 주소가 정확히 일치하지 않기 때문이었습니다.</p>\n<p>이 부분의 코드를 담고 있는 src/Middleware.js 코드를 개선해 보지요.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextMw<span class=\"token punctuation\">.</span>_path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> pathMatched <span class=\"token operator\">=</span> _req<span class=\"token punctuation\">.</span>path <span class=\"token operator\">===</span> nextMw<span class=\"token punctuation\">.</span>_path <span class=\"token comment\">// 경로만 체크</span>\n  <span class=\"token keyword\">return</span> pathMatched <span class=\"token operator\">?</span> <span class=\"token function\">nextMw</span><span class=\"token punctuation\">(</span>_req<span class=\"token punctuation\">,</span> _res<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">_run</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이전에는 쿼리문자열이 포함된 _req.url을 비교하는 코드였습니다.\n이제는 경로만 저장된 _req.path를 비교해서 요청정보와 정확한 비교를 할 수 있게 되었습니다.</p>\n<p>서버를 다시 실행하여 결과를 확인해 볼까요?</p>\n<p><img src=\"/assets/imgs/2018/12/14/result_2.png\"></p>\n<p>포스트 목록이 나오는 것을 보니 API가 잘 응답되는 것 같네요.</p>\n<p><img src=\"/assets/imgs/2018/12/14/result_3.png\"></p>\n<p>크롬 개발자 도구를 보면 성공을 의미하는 200 상태코드가 응답되었습니다.</p>\n<p>하지만 요청 주소의 쿼리문자열을 유심히 살펴 보세요.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">?limit=2&amp;page=1</code></pre></div>\n<p>포스트 갯수를 최대 2개로 한정하고 1페이지를 요청했으니깐 처음 2개 포스트만 나오는게 맞을 겁니다.\n그런데 지금은 포스트 3개가 출력되었죠.</p>\n<h2 id=\"실습---request-모듈을-이용해-이-문제를-해결해-보세요\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%8A%B5---request-%EB%AA%A8%EB%93%88%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%B4-%EC%9D%B4-%EB%AC%B8%EC%A0%9C%EB%A5%BC-%ED%95%B4%EA%B2%B0%ED%95%B4-%EB%B3%B4%EC%84%B8%EC%9A%94\" aria-label=\"실습   request 모듈을 이용해 이 문제를 해결해 보세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐤실습 - Request 모듈을 이용해 이 문제를 해결해 보세요</h2>\n<p>/api/posts API에서 페이지네이션 로직을 추가로 구현하세요.\n코드를 작성하지 않았다면 아래 브랜치로 이동하시구요.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ git checkout -f request/props</code></pre></div>\n<h2 id=\"풀이-1\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4-1\" aria-label=\"풀이 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐤풀이</h2>\n<p>간단히 풀어 보죠.</p>\n<p>포스트 조회 API가 있는 routes/api/posts.js 파일을 수정합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">index</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> limit <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>limit <span class=\"token operator\">*</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> <span class=\"token number\">2</span>\n  <span class=\"token keyword\">const</span> page <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>page <span class=\"token operator\">*</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> <span class=\"token number\">1</span>\n\n  <span class=\"token keyword\">const</span> begin <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>page <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> limit\n  <span class=\"token keyword\">const</span> end <span class=\"token operator\">=</span> begin <span class=\"token operator\">+</span> limit\n\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>posts<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>req.query에 담겨있는 쿼리문자열 정보는 모두 문자열로 저장되어 있습니다.\n이걸 모두 숫자형으로 변환(*1) 했습니다.\n만약 없을 경우에는 limit은 2, page는 1로 각 각 기본값을 할당했구요</p>\n<p>그리고나서 posts 배열에서 요청한 데이터 범위를 찾기 위해 begin과 end를 계산합니다.</p>\n<p>마지막으로 구간의 정보를 추출한 배열을 제이슨으로 응답합니다.</p>\n<p>서버를 재실행하고 확인해 볼까요?</p>\n<p><img src=\"/assets/imgs/2018/12/14/result_4.png\"></p>\n<p>3개 포스트를 출력한 이전과 달리 요청한 2개 포스트만 출력되는 것을 확인했습니다.</p>\n<p><img src=\"/assets/imgs/2018/12/14/struct.png\"></p>\n<p>Request 모듈까지 해서 익스프레스JS 섹션을 모두 채웠습니다.</p>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<ul>\n<li>요청 정보에 쉽게 접근하게 위한 Request 모듈을 만들었습니다.</li>\n<li>req.path, req.query</li>\n</ul>\n<p><a href=\"/series/2018/12/01/node-web-0_index.html\">목차 바로가기</a></p>","fields":{"dateStr":"2018년 12월 14일","date":"2018-12-14T00:00:00.000Z","slug":"/series/2018/12/14/node-web-14_req.html"},"frontmatter":{"title":"[Node.js코드랩] 14. 요청 객체","tags":["lecture"],"seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab","videoId":null},"tableOfContents":"<ul>\n<li><a href=\"#%EB%AA%A9%ED%91%9C\">🌳목표</a></li>\n<li><a href=\"#%EC%BF%BC%EB%A6%AC%EC%8A%A4%ED%8A%B8%EB%A7%81-%EC%9A%94%EC%B2%AD\">쿼리스트링 요청</a></li>\n<li><a href=\"#request-%EB%AA%A8%EB%93%88\">Request 모듈</a></li>\n<li><a href=\"#%EC%8B%A4%EC%8A%B5---request-%EB%AA%A8%EB%93%88%EC%9D%84-%EA%B5%AC%ED%98%84%ED%95%B4-%EB%B3%B4%EC%84%B8%EC%9A%94\">🐤실습 - Request 모듈을 구현해 보세요</a></li>\n<li><a href=\"#%ED%92%80%EC%9D%B4\">🐤풀이</a></li>\n<li><a href=\"#request-%EB%AA%A8%EB%93%88%EC%9D%84-application%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9\">Request 모듈을 Application에서 사용</a></li>\n<li><a href=\"#request-%EB%AA%A8%EB%93%88%EC%9D%84-middleware%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9\">Request 모듈을 Middleware에서 사용</a></li>\n<li><a href=\"#%EC%8B%A4%EC%8A%B5---request-%EB%AA%A8%EB%93%88%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%B4-%EC%9D%B4-%EB%AC%B8%EC%A0%9C%EB%A5%BC-%ED%95%B4%EA%B2%B0%ED%95%B4-%EB%B3%B4%EC%84%B8%EC%9A%94\">🐤실습 - Request 모듈을 이용해 이 문제를 해결해 보세요</a></li>\n<li><a href=\"#%ED%92%80%EC%9D%B4-1\">🐤풀이</a></li>\n<li><a href=\"#%EC%A0%95%EB%A6%AC\">정리</a></li>\n</ul>"},"series":{"id":"555b6438-4a71-51d0-9156-a1d5ca4d5eab","title":"Node.js 코드랩"},"video":null,"allMarkdownRemark":{"nodes":[{"id":"55a324e0-6e38-5ec8-a3e7-029e4563c485","fields":{"slug":"/series/2018/12/01/node-web-1_orientation.html","date":"2018-12-01T00:00:00.000Z"},"frontmatter":{"title":"[Node.js 코드랩] 1.오리엔테이션","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"47ab845e-b020-5d91-b8d6-8cf021dea527","fields":{"slug":"/series/2018/12/02/node-web-2_http.html","date":"2018-12-02T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 2.기본 모듈 http","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"707f5850-7ad4-5a1f-9899-05a7a8a8a204","fields":{"slug":"/series/2018/12/03/node-web-3_refactoring.html","date":"2018-12-03T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 3.리팩토링","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"57ecb32c-ad9a-50eb-8da4-40aea81b3d6a","fields":{"slug":"/series/2018/12/04/node-web-4_application.html","date":"2018-12-04T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 4.어플리케이션","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"d6ffc7a9-84a8-5eed-9c44-6b50f18e6db0","fields":{"slug":"/series/2018/12/05/node-web-5_debug.html","date":"2018-12-05T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 5.커스텀 모듈 Debug","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"fceb13af-7b53-5444-9c6d-709d8ce0ef6f","fields":{"slug":"/series/2018/12/06/node-web-6_static-files.html","date":"2018-12-06T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 6.정적 파일","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"a5adc762-1163-5eac-b3f8-d4813d631cf0","fields":{"slug":"/series/2018/12/07/node-web-7_serve-static.html","date":"2018-12-07T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 7.커스텀 모듈 serve-static","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"bfed004c-9909-5b65-a1fb-f8ca988e3b3c","fields":{"slug":"/series/2018/12/08/node-web-8_middleware.html","date":"2018-12-08T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 8.미들웨어","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"98a0d5ee-52a1-526a-80c5-8a22f42b6b13","fields":{"slug":"/series/2018/12/09/node-web-9_middleware2.html","date":"2018-12-09T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 9.미들웨어 활용","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"40e9aef7-0d57-5a89-8789-05b993261b16","fields":{"slug":"/series/2018/12/10/node-web-10_logger.html","date":"2018-12-10T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 10.커스텀 모듈 logger","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"3b588f16-6a2f-53ec-a65a-1ac8141ab57a","fields":{"slug":"/series/2018/12/11/node-web-11_router-use.html","date":"2018-12-11T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 11.라우터 use","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"67ed027c-8cb2-5f39-93a9-7fc73c0c74cd","fields":{"slug":"/series/2018/12/12/node-web-12_get-posts-api.html","date":"2018-12-12T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 12.포스트 조회 API","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"91bc8106-6f39-5b71-a248-6e077a8dc7f1","fields":{"slug":"/series/2018/12/13/node-web-13_res.html","date":"2018-12-13T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 13. 응답 객체","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"d4c424e7-2912-5926-b912-6ff5c0de4b3f","fields":{"slug":"/series/2018/12/14/node-web-14_req.html","date":"2018-12-14T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 14. 요청 객체","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"963f5cd1-3036-5f23-a6d7-01ec8bde0d36","fields":{"slug":"/series/2018/12/15/node-web-15_get_post.html","date":"2018-12-15T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 15.라우터 Get, Post","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"f4685d82-22b5-501e-a437-f35a01968b47","fields":{"slug":"/series/2018/12/16/node-web-16_body-parser.html","date":"2018-12-16T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 16. body-parser","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"6ecbe281-b86d-5e09-b9e5-b090c3b46a7c","fields":{"slug":"/series/2018/12/17/node-web-17_expressjs.html","date":"2018-12-17T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 17. Express.js","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"5040db68-cb25-5e8f-b8fe-92e41bc664ab","fields":{"slug":"/series/2018/12/17/node-web-18_summary.html","date":"2018-12-17T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 18. 마무리","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}}]}},"pageContext":{"slug":"/series/2018/12/14/node-web-14_req.html","date":"2018-12-14T00:00:00.000Z","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab","videoId":null,"previous":{"fields":{"slug":"/series/2018/12/13/node-web-13_res.html","date":"2018-12-13T00:00:00.000Z","beforeGatsby":true},"frontmatter":{"title":"[Node.js코드랩] 13. 응답 객체","category":"series","permalink":null,"seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab","videoId":"a3385ae2-3c3c-585d-b4ee-fe73484ece62"}},"next":{"fields":{"slug":"/series/2018/12/15/node-web-15_get_post.html","date":"2018-12-15T00:00:00.000Z","beforeGatsby":true},"frontmatter":{"title":"[Node.js코드랩] 15.라우터 Get, Post","category":"series","permalink":null,"seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab","videoId":null}}}},"staticQueryHashes":["1591182808"]}