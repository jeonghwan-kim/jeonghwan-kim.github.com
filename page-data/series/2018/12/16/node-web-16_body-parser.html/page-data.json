{"componentChunkName":"component---src-templates-blog-post-index-tsx","path":"/series/2018/12/16/node-web-16_body-parser.html","result":{"data":{"site":{"siteMetadata":{"title":"김정환 블로그","url":"https://jeonghwan-kim.github.io"}},"markdownRemark":{"id":"d83a8980-ace4-529e-adb0-61dc9151e698","html":"<h2 id=\"목표\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%ED%91%9C\" aria-label=\"목표 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌳목표</h2>\n<p>요청 바디 데이터를 처리하는 body-parser를 만듭니다.\n그리고 이것을 이용해 포스트 생성 API 개발을 완료합니다.</p>\n<h2 id=\"스트림-데이터\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%8A%B8%EB%A6%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0\" aria-label=\"스트림 데이터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스트림 데이터</h2>\n<p>지난 시간에 POST 메소드를 갖는 엔드포인트를 라우터에 추가했습니다.\n다만 컨트롤러 함수는 비어 있는 채로 남겨 두었는데요.\nreq.body 값을 로그로 출력하는것 까지만 코딩했습니다.</p>\n<p>이 데이터는 어떻게 접근할 수 있을까요?</p>\n<p><a href=\"https://nodejs.org/en/docs/guides/anatomy-of-an-http-transaction/#request-body\">노드 문서</a>에서 요청 바디에 접근하는 방법을 설명하고 있는데요 정리하면 다음 순서를 따릅니다.</p>\n<ul>\n<li>req는 ReadableStream 인터페이스 구현체다</li>\n<li>이것은 스트림이기 때문에 \"data\"와 \"end\" 이벤트를 이용해서 데이터를 수신할 수 있다</li>\n<li>\"data\" 이벤트와 함께 들어온 데이터는 Buffer 타입이다</li>\n<li>이것을 문자열로 변환하려면 데이터를 배열로 들고 있다가 \"end\" 이벤트 시점에 합치면 된다</li>\n</ul>\n<p>위 알고리즘을 기술한 것이 아래 샘플 코드입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> body <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nrequest\n  <span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">chunk</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    body<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    body <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 이 시점에 body는 전체 요청 데이터를 문자열 형태로 가지고 있다</span>\n    <span class=\"token comment\">// (at this point, `body` has the entire request body stored in it as a string)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>API 컨트롤러 함수에서 요청 바디에 쉽게 접근하려면 좋겠는데 매 요청마다 위 코딩을 하는건 미련한 방법처럼 보입니다.</p>\n<p>만약 컨트롤러까지 오기 전에 미리 바디 데이터를 파싱하여 req.body에 담아 놓는다면 어떨까요?\n이후 모든 컨트롤러에서는 간단히 req.body를 이용하면 데이터에 쉽게 접근할 수 있을 것 같네요.</p>\n<h2 id=\"실습---body-parser를-만들어-보세요\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%8A%B5---body-parser%EB%A5%BC-%EB%A7%8C%EB%93%A4%EC%96%B4-%EB%B3%B4%EC%84%B8%EC%9A%94\" aria-label=\"실습   body parser를 만들어 보세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐤실습 - body-parser를 만들어 보세요</h2>\n<p>req.path와 req.query도 이런 방식으로 데이터를 미리 가공했었죠?\n이것과 비슷하게 req.body에도 미리 가공된 요청 바디를 저장해 보세요.</p>\n<h2 id=\"풀이\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4\" aria-label=\"풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐤풀이</h2>\n<p>같이 풀어보겠습니다.\n바디 파서를 미들웨어 함수로 만들기로 할게요.\nmiddlewares 폴더에 body-parser.js 파일을 만들어 아래 코드를 입력합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">bodyParser</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> body <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  req<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">chunk</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    body<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> chunk<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  req<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    body <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> bodyParser<span class=\"token punctuation\">;</span></code></pre></div>\n<p>이벤트 기반으로 스트림 데이터 바디를 처리하는 코드는 샘플 코드에서 그대로 배껴 왔습니다.\n다만 그 시점에 데이터가 각 각 어떤 모습으로 변하는지 확인하기 위해 터미널에 출력했습니다.</p>\n<p>미들웨어를 우리 어플리케이션에 추가해 보지요. app.js를 수정합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> bodyParser <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./middlewares/body-parser\"</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">logger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">bodyParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// body-parser를 추가</span></code></pre></div>\n<p>서버를 재구동하고 폼을 다시 전송해 볼까요?</p>\n<p><img src=\"/assets/imgs/2018/12/16/result_1.png\" alt=\"\"></p>\n<p>\"data\" 이벤트가 발생할 때는 버퍼값이 출력되었습니다.\n데이터를 모두 수신한 \"end\" 이벤트가 발생할 때는 버퍼를 문자열로 변경하여 \"title=asd&#x26;body=sdf\"라는 값이 출력되었네요.</p>\n<p>가만히 보면 쿼리스트링과 구조가 똑같네요?\n네, 그렇습니다.\n쿼리스트링을 오브젝트로 파싱한 것처럼,\n이 문자열도 자바스크립트 객체로 파싱한 뒤 req.body에 넣어두면 사용하기 편리하겠네요.</p>\n<p>body-parser를 더 개발해 보죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">req<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  body <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  body <span class=\"token operator\">=</span> body<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">body<span class=\"token punctuation\">,</span> pair</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pair<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> body\n    <span class=\"token keyword\">const</span> frg <span class=\"token operator\">=</span> pair<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=\"</span><span class=\"token punctuation\">)</span>\n    body<span class=\"token punctuation\">[</span>frg<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> frg<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> body\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  req<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> body\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>특정 문자를 기준으로 파싱하는 부분은 쿼리스트링 파싱과 같은 로직입니다.\n파싱한 결과 body에 오브젝트 형태로 데이터가 담기겠지요.\n그러면 req.body에 이 객체를 저장합니다.</p>\n<p>마지막엔 다음 미들웨어를 실행해 주기 위해 next() 함수를 호출합니다.</p>\n<p><img src=\"/assets/imgs/2018/12/16/struct_1.png\" alt=\"\"></p>\n<p>body-parser는 전체 구조도 중 우측 하단의 써드파티 라이브러리 섹션에 위치하는 녀석입니다.</p>\n<h2 id=\"실습---포스트-추가-api-개발을-완성하세요\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%8A%B5---%ED%8F%AC%EC%8A%A4%ED%8A%B8-%EC%B6%94%EA%B0%80-api-%EA%B0%9C%EB%B0%9C%EC%9D%84-%EC%99%84%EC%84%B1%ED%95%98%EC%84%B8%EC%9A%94\" aria-label=\"실습   포스트 추가 api 개발을 완성하세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐤실습 - 포스트 추가 API 개발을 완성하세요</h2>\n<p>req.body 데이터를 이용해 POST /api/posts 엔드포인트를 마져 구현해 보세요.\n코드를 미쳐 작성하지 못하신 분은 아래 브랜치로 이동한 뒤 실습을 진행할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ git checkout -f middleware/body-parser</code></pre></div>\n<p><em>힌트: 201 응답, 새로운 데이터를 응답</em></p>\n<h2 id=\"풀이-1\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4-1\" aria-label=\"풀이 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐤풀이</h2>\n<p>잘 풀어 보셨나요? 그럼 같이 진행해 보겠습니다.</p>\n<p>routers/api/post.js 파일을 마져 수정하지요.\n두 부분으로 나눠 설명하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">create</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body\n  <span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>post<span class=\"token punctuation\">.</span>title <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>post<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'parameter error'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>객체 해체 문법으로 title과 body를 각 상수값으로 가져옵니다.\n그리고 기존 데이터 형식에 맞게 재 가공해서 post 객체를 만듭니다.</p>\n<p>만약 title이나 body 값 중 어느 하나라도 부족하면 파라매터 에러를 의미하는 400번 상태코드를 응답하고 함수를 종료합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  posts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>post<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>posts<span class=\"token punctuation\">)</span>\n\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">201</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>포스트 추가에 필요한 데이터가 확보되면 포스트를 담고 있는 배열 맨 앞에 추가합니다.</p>\n<p>그리고 리소스 생성을 의미하는 201 상태코드와 생성된 포스트 객체를 응답 바디로 전달합니다.</p>\n<p>그럼 여기까지 코딩을 마친 뒤 서버를 재구동 합시다.\n브라우져를 통해 포스트 생성 폼을 전송해 볼까요?</p>\n<p><img src=\"/assets/imgs/2018/12/16/result_2.png\" alt=\"\"></p>\n<p>입력한 post4가 맨 상단에 추가되었습니다.</p>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<ul>\n<li>이벤트를 이용해 스트림 데이터를 처리하였습니다.</li>\n<li>요청 바디를 파싱하여 API 컨트롤러에서 손쉽게 사용할수 있도록 하였습니다.</li>\n<li>포스트 추가 API를 완성하였습니다.</li>\n</ul>\n<p><a href=\"/series/2018/12/01/node-web-0_index.html\">목차 바로가기</a></p>","frontmatter":{"slug":"/series/2018/12/16/node-web-16_body-parser.html","date":"2018-12-16T00:00:00.000Z","title":"[Node.js코드랩] 16. body-parser","tags":["lecture"],"series":"Node.js 코드랩","videoId":null,"featuredImage":null},"tableOfContents":"<ul>\n<li><a href=\"#%EB%AA%A9%ED%91%9C\">🌳목표</a></li>\n<li><a href=\"#%EC%8A%A4%ED%8A%B8%EB%A6%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0\">스트림 데이터</a></li>\n<li><a href=\"#%EC%8B%A4%EC%8A%B5---body-parser%EB%A5%BC-%EB%A7%8C%EB%93%A4%EC%96%B4-%EB%B3%B4%EC%84%B8%EC%9A%94\">🐤실습 - body-parser를 만들어 보세요</a></li>\n<li><a href=\"#%ED%92%80%EC%9D%B4\">🐤풀이</a></li>\n<li><a href=\"#%EC%8B%A4%EC%8A%B5---%ED%8F%AC%EC%8A%A4%ED%8A%B8-%EC%B6%94%EA%B0%80-api-%EA%B0%9C%EB%B0%9C%EC%9D%84-%EC%99%84%EC%84%B1%ED%95%98%EC%84%B8%EC%9A%94\">🐤실습 - 포스트 추가 API 개발을 완성하세요</a></li>\n<li><a href=\"#%ED%92%80%EC%9D%B4-1\">🐤풀이</a></li>\n<li><a href=\"#%EC%A0%95%EB%A6%AC\">정리</a></li>\n</ul>","excerpt":"🌳목표 요청 바디 데이터를 처리하는 body-parser를 만듭니다.\n그리고 이것을 이용해 포스트 생성 API 개발을 완료합니다. 스트림 데이터 지난 시간에 POST 메소드를 갖는 엔드포인트를 라우터에 추가했습니다.\n다만 컨트롤러 함수는 비어 있는 채로 남겨 두었는데요.\nreq.body…"},"video":null,"allMarkdownRemark":{"nodes":[{"id":"95a7d198-fe1f-5683-9354-26e10e6ed386","frontmatter":{"slug":"/series/2018/12/01/node-web-1_orientation.html","date":"2018-12-01T00:00:00.000Z","title":"[Node.js 코드랩] 1.오리엔테이션","series":"Node.js 코드랩"}},{"id":"a8108e92-6a5b-5e9a-abc8-d5ce7a4df068","frontmatter":{"slug":"/series/2018/12/02/node-web-2_http.html","date":"2018-12-02T00:00:00.000Z","title":"[Node.js코드랩] 2.기본 모듈 http","series":"Node.js 코드랩"}},{"id":"93e7c545-496f-5d72-957d-f008eb7c39a9","frontmatter":{"slug":"/series/2018/12/03/node-web-3_refactoring.html","date":"2018-12-03T00:00:00.000Z","title":"[Node.js코드랩] 3.리팩토링","series":"Node.js 코드랩"}},{"id":"37f993ac-ef58-526b-adbe-abc7e3505e51","frontmatter":{"slug":"/series/2018/12/04/node-web-4_application.html","date":"2018-12-04T00:00:00.000Z","title":"[Node.js코드랩] 4.어플리케이션","series":"Node.js 코드랩"}},{"id":"cd6299da-2ab2-5adf-a8db-bbe0d42af1d7","frontmatter":{"slug":"/series/2018/12/05/node-web-5_debug.html","date":"2018-12-05T00:00:00.000Z","title":"[Node.js코드랩] 5.커스텀 모듈 Debug","series":"Node.js 코드랩"}},{"id":"08348d20-d465-58cb-b4db-39b890338ccd","frontmatter":{"slug":"/series/2018/12/06/node-web-6_static-files.html","date":"2018-12-06T00:00:00.000Z","title":"[Node.js코드랩] 6.정적 파일","series":"Node.js 코드랩"}},{"id":"b68d9eaa-a4c6-5777-a93d-16d3078cf2bc","frontmatter":{"slug":"/series/2018/12/07/node-web-7_serve-static.html","date":"2018-12-07T00:00:00.000Z","title":"[Node.js코드랩] 7.커스텀 모듈 serve-static","series":"Node.js 코드랩"}},{"id":"e3c125ca-6dff-5e31-87ec-3dfc3680d0e5","frontmatter":{"slug":"/series/2018/12/08/node-web-8_middleware.html","date":"2018-12-08T00:00:00.000Z","title":"[Node.js코드랩] 8.미들웨어","series":"Node.js 코드랩"}},{"id":"e10b1985-61e4-5677-be28-ab18339da690","frontmatter":{"slug":"/series/2018/12/09/node-web-9_middleware2.html","date":"2018-12-09T00:00:00.000Z","title":"[Node.js코드랩] 9.미들웨어 활용","series":"Node.js 코드랩"}},{"id":"8be694c5-7499-5e3e-b04d-d2950261e5aa","frontmatter":{"slug":"/series/2018/12/10/node-web-10_logger.html","date":"2018-12-10T00:00:00.000Z","title":"[Node.js코드랩] 10.커스텀 모듈 logger","series":"Node.js 코드랩"}},{"id":"e7a83581-aec2-50ad-8f02-844c3d80d72a","frontmatter":{"slug":"/series/2018/12/11/node-web-11_router-use.html","date":"2018-12-11T00:00:00.000Z","title":"[Node.js코드랩] 11.라우터 use","series":"Node.js 코드랩"}},{"id":"ab75e9ac-309f-5ac4-b35e-6e5b2f10d60e","frontmatter":{"slug":"/series/2018/12/12/node-web-12_get-posts-api.html","date":"2018-12-12T00:00:00.000Z","title":"[Node.js코드랩] 12.포스트 조회 API","series":"Node.js 코드랩"}},{"id":"cb680042-acc5-5270-80bb-37bcf46274ad","frontmatter":{"slug":"/series/2018/12/13/node-web-13_res.html","date":"2018-12-13T00:00:00.000Z","title":"[Node.js코드랩] 13. 응답 객체","series":"Node.js 코드랩"}},{"id":"4d8231da-f718-5744-905c-d013886497d6","frontmatter":{"slug":"/series/2018/12/14/node-web-14_req.html","date":"2018-12-14T00:00:00.000Z","title":"[Node.js코드랩] 14. 요청 객체","series":"Node.js 코드랩"}},{"id":"a122150a-1341-5337-be8f-a12a260e69a2","frontmatter":{"slug":"/series/2018/12/15/node-web-15_get_post.html","date":"2018-12-15T00:00:00.000Z","title":"[Node.js코드랩] 15.라우터 Get, Post","series":"Node.js 코드랩"}},{"id":"d83a8980-ace4-529e-adb0-61dc9151e698","frontmatter":{"slug":"/series/2018/12/16/node-web-16_body-parser.html","date":"2018-12-16T00:00:00.000Z","title":"[Node.js코드랩] 16. body-parser","series":"Node.js 코드랩"}},{"id":"e264676e-7d8a-5ed0-89c8-471d13b53841","frontmatter":{"slug":"/series/2018/12/17/node-web-17_expressjs.html","date":"2018-12-17T00:00:00.000Z","title":"[Node.js코드랩] 17. Express.js","series":"Node.js 코드랩"}},{"id":"46d0d52a-0c7a-51d0-bf8f-59530a74613e","frontmatter":{"slug":"/series/2018/12/17/node-web-18_summary.html","date":"2018-12-17T00:00:00.000Z","title":"[Node.js코드랩] 18. 마무리","series":"Node.js 코드랩"}}]}},"pageContext":{"slug":"/series/2018/12/16/node-web-16_body-parser.html","date":"2018-12-16T00:00:00.000Z","series":"Node.js 코드랩","videoId":null,"previous":{"frontmatter":{"slug":"/series/2018/12/15/node-web-15_get_post.html","date":"2018-12-15T00:00:00.000Z","title":"[Node.js코드랩] 15.라우터 Get, Post","category":"연재물","series":"Node.js 코드랩","videoId":null}},"next":{"frontmatter":{"slug":"/series/2018/12/17/node-web-18_summary.html","date":"2018-12-17T00:00:00.000Z","title":"[Node.js코드랩] 18. 마무리","category":"연재물","series":"Node.js 코드랩","videoId":null}}}},"staticQueryHashes":["2263867198"]}