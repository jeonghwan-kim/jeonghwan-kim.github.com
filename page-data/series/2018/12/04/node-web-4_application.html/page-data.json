{
    "componentChunkName": "component---src-templates-blog-post-index-tsx",
    "path": "/series/2018/12/04/node-web-4_application.html",
    "result": {"data":{"site":{"siteMetadata":{"title":"김정환 블로그","url":"https://jeonghwan-kim.github.io"}},"markdownRemark":{"id":"f913d343-bfee-554b-a190-0fafe4a15e8f","excerpt":"🌳목표 우리가 만들었던 server.js는 http 모듈을 직접 가져다 사용한 것입니다.\n모듈의 createServer() 함수와 listen() 함수를 직접 사용했죠. 외부 모듈 혹은 라이브러리 따위를 사용할 때는 한 번 래핑해서 사용하는 것이 좋습니다.\n우리 코드가 라이브러리와 강…","html":"<h2 id=\"목표\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%ED%91%9C\" aria-label=\"목표 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌳목표</h2>\n<p>우리가 만들었던 server.js는 http 모듈을 직접 가져다 사용한 것입니다.\n모듈의 createServer() 함수와 listen() 함수를 직접 사용했죠.</p>\n<p>외부 모듈 혹은 라이브러리 따위를 사용할 때는 한 번 래핑해서 사용하는 것이 좋습니다.\n우리 코드가 라이브러리와 강하게 커플링 되지 않도록 하는것이죠.\n한 단계 버퍼를 둬서 외부 코드의 변화에 유연하게 대처하기 위합니다.</p>\n<h2 id=\"application-모듈\" style=\"position:relative;\"><a href=\"#application-%EB%AA%A8%EB%93%88\" aria-label=\"application 모듈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Application 모듈</h2>\n<p>그래서 \"Application\" 이란 이름으로 모듈을 다시 만들어 볼거에요.\n이 모듈은 http를 내부적으로 사용할 것이고요.</p>\n<p>먼저 지난 시간까지 했던 코드로 이동하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ git checkout -f application/listen-spec</code></pre></div>\n<p>추가 모듈(sinon)이 있기 때문에 package.json에 기록한 모듈을 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install</code></pre></div>\n<p>src 폴더에 Application.spec.js 파일부터 살펴 보겠습니다.\n우리가 만들 Application 모듈의 요구사항을 테스크 코드로 작성해 둔 것이죠.</p>\n<p>네 부분으로 나눠서 설명하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Application'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'listen()'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'server 객체의 listen 함수를 실행한다'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></code></pre></div>\n<p>이전 글에서 모카를 소개했었죠? 모카는 테스트 코드를 실행해주는 테스트 러너입니다.\n모카 프레임웍이 제공하는 API 함수가 몇 개있는데요, 저는 <code>describe()</code>과 <code>it()</code>을 사용했습니다.</p>\n<ul>\n<li><code>descirbe()</code>: 테스트 꾸러미(Test Suite)라고 하며 테스트 환경을 기술함</li>\n<li><code>it()</code>: 테스트 케이스(Test Case)라고 하며 단위 테스트를 정의함</li>\n</ul>\n<p>위 코드는 \"Application 모듈의 listen() 메소드를 테스트\" 하는 코드입니다.\n이 메소드는 \"server 객체의 listen 함수를 실행한다\"라는 테스트인 것이죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// arrange</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// const App = require('./Application') 으로 가져왔다고 가정</span>\n<span class=\"token keyword\">const</span> spy <span class=\"token operator\">=</span> sinon<span class=\"token punctuation\">.</span><span class=\"token function\">spy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span>_server<span class=\"token punctuation\">.</span>listen <span class=\"token operator\">=</span> spy</code></pre></div>\n<p>유닛 테스트는 보통 세 단계로 나눕니다.</p>\n<ul>\n<li>준비(arragne) -> 실행(act) -> 검증(assert)</li>\n</ul>\n<p>위 코드는 첫 번째 준비 단계를 정의하는 코드입니다.\n어플리케이션 객체와 스파이를 만들었습니다. 그리고 app._server 객체의 listen 속성에 스파이를 심어 두었죠.\n스파이를 심은 이유는 검증할때 listen 함수가 호출되었지는 스파이로 확인하기 위해서 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// act</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>실제 테스트 해야할 메소드를 실행합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// assert</span>\n<span class=\"token function\">should</span><span class=\"token punctuation\">(</span>spy<span class=\"token punctuation\">.</span>called<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>listen 메소드가 실행되었는지 스파이를 통해 검사하는 코드입니다.</p>\n<p>테스트를 돌려 볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm t\n\nError: Cannot find module './Application'</code></pre></div>\n<p>이것보다 많은 메세지가 나오지만 Application 모듈을 찾지 못하는게 핵심입니다.\n왜냐면 우리는 테스트 코드만 만들었지 대상이 되는 Application.js 는 만들지 않았기 때문이죠.</p>\n<h2 id=\"실습---application-모듈과-listen-메소드-구현\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%8A%B5---application-%EB%AA%A8%EB%93%88%EA%B3%BC-listen-%EB%A9%94%EC%86%8C%EB%93%9C-%EA%B5%AC%ED%98%84\" aria-label=\"실습   application 모듈과 listen 메소드 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐤실습 - Application 모듈과 listen 메소드 구현</h2>\n<p>Application 모듈을 구현해 보세요. Application은 listen 메소드를 가져야 합니다.\n구현한 뒤에는 반드시 테스트 코드를 통과해야 하구요.</p>\n<h2 id=\"풀이\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4\" aria-label=\"풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐤풀이</h2>\n<p>자 그럼 같이 풀어 볼까요? 세 단계로 나눠 설명하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Application</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">listen</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    listen<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> Application</code></pre></div>\n<p>먼저 http 모듈을 가져왔습니다.\n그리고 자바스크립트의 모듈 패턴으로 Application을 구현했습니다.\n모듈 패턴은 자바스크립트 객체를 반환하는데요,\n테스트 코드에 있는 listen 함수를 넣어서 반환했습니다. 아직 이건 빈 함수이고요.\n마지막 줄에 Application을 모듈로 만들어서 외부에서 사용하도록 했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> _server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/plain\"</span><span class=\"token punctuation\">)</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\\n\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n  _server<span class=\"token punctuation\">,</span>\n  listen<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>테스트 코드에 보면 _server 객체를 통해 스파이를 심어두고 있죠.\n이건 테스트 용도로 노출하는 것이라 변수 이름 앞에 언더스코어(<code>_</code>)를 붙였습니다.\nhttp.createServer() 함수로 서버를 만들어 _server에 저장했고 외부로 노출하였습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> listen <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>port <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> hostname <span class=\"token operator\">=</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  _server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> hostname<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>생성한 _server 객체를 통해 listen 함수 코드를 채워 넣었습니다.\n포트 번호와 호스트명 기본 인자값을 설정해서 방어 코드를 만들었구요.\n테스트 코드에서 listen 함수 호출여부를 체크했기 때문에 _server.listen()을 호출했습니다.</p>\n<p>이제 테스트를 실행해 볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm test\n\n  Application\n    listen()\n      ✓ server 객체의 listen 함수를 실행한다\n\n  1 passing (8ms)</code></pre></div>\n<p>성공적으로 통과했네요.</p>\n<p>server.js를 app.js로 이름을 바꾸겠습니다.\n이제는 서버라기보다는 어플리케이션 모듈을 이용한 어플리케이션 객체라는 의미죠.\napp.js 코드를 볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> App <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./src/Application\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> app</code></pre></div>\n<p>Application 모듈을 가져와 객체를 만들어 app에 저장했죠. 곧장 모듈로 노출했습니다.</p>\n<p>bin.js도 볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./app\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> hostname <span class=\"token operator\">=</span> <span class=\"token string\">\"127.0.0.1\"</span>\n<span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> <span class=\"token number\">3000</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> hostname<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server running at http://</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>hostname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>\"server\" 대신 \"app\" 모듈을 가져온 것만 달라졌습니다.</p>\n<p>서버를 실행하면 잘 동작하네요.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm start\n\nServer running at http://127.0.0.1:3000/</code></pre></div>\n<p>Application 모듈은 아래 초록색 부분입니다.\n드디어 익스프레스JS의 첫번째 모듈을 만들었군요.</p>\n<p><img src=\"/assets/imgs/2018/12/04/struct.png\" alt=\"\"></p>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<ul>\n<li>http를 직접 사용하지 않고 Application 객체로 추상화 하였습니다.</li>\n</ul>\n<p><a href=\"/series/2018/12/01/node-web-0_index.html\">목차 바로가기</a></p>","fields":{"dateStr":"2018년 12월 04일","date":"2018-12-04T00:00:00.000Z","slug":"/series/2018/12/04/node-web-4_application.html"},"frontmatter":{"title":"[Node.js코드랩] 4.어플리케이션","tags":["lecture"],"seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab","videoId":null,"featured_image":null,"featuredImage":null},"tableOfContents":"<ul>\n<li><a href=\"#%EB%AA%A9%ED%91%9C\">🌳목표</a></li>\n<li><a href=\"#application-%EB%AA%A8%EB%93%88\">Application 모듈</a></li>\n<li><a href=\"#%EC%8B%A4%EC%8A%B5---application-%EB%AA%A8%EB%93%88%EA%B3%BC-listen-%EB%A9%94%EC%86%8C%EB%93%9C-%EA%B5%AC%ED%98%84\">🐤실습 - Application 모듈과 listen 메소드 구현</a></li>\n<li><a href=\"#%ED%92%80%EC%9D%B4\">🐤풀이</a></li>\n<li><a href=\"#%EC%A0%95%EB%A6%AC\">정리</a></li>\n</ul>"},"series":{"id":"555b6438-4a71-51d0-9156-a1d5ca4d5eab","title":"Node.js 코드랩"},"video":null,"allMarkdownRemark":{"nodes":[{"id":"bfbe2949-f7c2-5861-9d73-2145263850e4","fields":{"slug":"/series/2018/12/01/node-web-1_orientation.html","date":"2018-12-01T00:00:00.000Z"},"frontmatter":{"title":"[Node.js 코드랩] 1.오리엔테이션","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"b1aec7ac-3401-50bb-9b3a-1f3c0dba816d","fields":{"slug":"/series/2018/12/03/node-web-3_refactoring.html","date":"2018-12-03T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 3.리팩토링","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"6b4ab14d-846e-5796-9799-c42848621979","fields":{"slug":"/series/2018/12/02/node-web-2_http.html","date":"2018-12-02T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 2.기본 모듈 http","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"f913d343-bfee-554b-a190-0fafe4a15e8f","fields":{"slug":"/series/2018/12/04/node-web-4_application.html","date":"2018-12-04T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 4.어플리케이션","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"396ff93e-7740-5750-99a0-ffc8f44b2264","fields":{"slug":"/series/2018/12/05/node-web-5_debug.html","date":"2018-12-05T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 5.커스텀 모듈 Debug","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"6d2c51d4-140e-578b-ae28-edd6344f42df","fields":{"slug":"/series/2018/12/06/node-web-6_static-files.html","date":"2018-12-06T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 6.정적 파일","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"18013d48-931e-5f5f-97bb-5aa784075b6f","fields":{"slug":"/series/2018/12/07/node-web-7_serve-static.html","date":"2018-12-07T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 7.커스텀 모듈 serve-static","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"3932b2c9-7cfb-53c5-8357-5f7a790ae295","fields":{"slug":"/series/2018/12/08/node-web-8_middleware.html","date":"2018-12-08T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 8.미들웨어","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"33c47777-8e9e-5a68-85f9-66c1af1ca735","fields":{"slug":"/series/2018/12/09/node-web-9_middleware2.html","date":"2018-12-09T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 9.미들웨어 활용","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"7c15a535-3372-5d73-808d-aa2ea5af15ae","fields":{"slug":"/series/2018/12/10/node-web-10_logger.html","date":"2018-12-10T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 10.커스텀 모듈 logger","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"e2b3798a-86c0-550d-9a37-647495cdd2dd","fields":{"slug":"/series/2018/12/11/node-web-11_router-use.html","date":"2018-12-11T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 11.라우터 use","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"24b0b3cf-a4ba-5f7b-a5a9-d3366bf6721b","fields":{"slug":"/series/2018/12/12/node-web-12_get-posts-api.html","date":"2018-12-12T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 12.포스트 조회 API","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"adfb350e-c1d2-5c85-ac6f-d07936575db2","fields":{"slug":"/series/2018/12/13/node-web-13_res.html","date":"2018-12-13T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 13. 응답 객체","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"ef8af36e-4bde-584b-b29b-20046d4aa669","fields":{"slug":"/series/2018/12/14/node-web-14_req.html","date":"2018-12-14T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 14. 요청 객체","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"fbdbd5e4-2a16-5369-a455-6523a1d9b433","fields":{"slug":"/series/2018/12/15/node-web-15_get_post.html","date":"2018-12-15T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 15.라우터 Get, Post","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"2b2e4511-3367-52ea-9524-9d420ab686c1","fields":{"slug":"/series/2018/12/16/node-web-16_body-parser.html","date":"2018-12-16T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 16. body-parser","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"de643e18-6338-5d9f-908c-48a6d5624cba","fields":{"slug":"/series/2018/12/17/node-web-17_expressjs.html","date":"2018-12-17T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 17. Express.js","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"d47788ec-de07-5a9a-a09b-ba1ebfd67418","fields":{"slug":"/series/2018/12/17/node-web-18_summary.html","date":"2018-12-17T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 18. 마무리","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}}]}},"pageContext":{"slug":"/series/2018/12/04/node-web-4_application.html","date":"2018-12-04T00:00:00.000Z","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab","videoId":null,"previous":{"fields":{"slug":"/series/2018/12/05/node-web-5_debug.html","date":"2018-12-05T00:00:00.000Z","beforeGatsby":true},"frontmatter":{"title":"[Node.js코드랩] 5.커스텀 모듈 Debug","category":"series","permalink":null,"seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab","videoId":null}},"next":{"fields":{"slug":"/series/2018/12/02/node-web-2_http.html","date":"2018-12-02T00:00:00.000Z","beforeGatsby":true},"frontmatter":{"title":"[Node.js코드랩] 2.기본 모듈 http","category":"series","permalink":null,"seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab","videoId":null}}}},
    "staticQueryHashes": ["3044774879"]}