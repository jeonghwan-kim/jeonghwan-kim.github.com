{
    "componentChunkName": "component---src-templates-blog-post-index-tsx",
    "path": "/series/2018/12/08/node-web-8_middleware.html",
    "result": {"data":{"site":{"siteMetadata":{"title":"김정환 블로그","url":"https://jeonghwan-kim.github.io"}},"markdownRemark":{"id":"a0498e79-1772-5c7b-80d5-65c577cce45d","html":"<h2 id=\"목표\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%ED%91%9C\" aria-label=\"목표 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌳목표</h2>\n<p>미들웨어 패턴을 구현하여 serve-static 모듈의 문제를 해결합니다.</p>\n<h2 id=\"미들웨어-패턴\" style=\"position:relative;\"><a href=\"#%EB%AF%B8%EB%93%A4%EC%9B%A8%EC%96%B4-%ED%8C%A8%ED%84%B4\" aria-label=\"미들웨어 패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>미들웨어 패턴</h2>\n<p>서버는 요청에서부터 응답까지 하나의 흐름을 가지고 있습니다. 이 요청과 응답 사이에 실행되는 함수 목록을 우리는 \"미들웨어 함수\"라고 하겠습니다.</p>\n<p>미들웨어 함수는 본연의 역할을 한 뒤 두 가지 일을 할 수 있습니다. ▲ 요청한 클라이언트에게 응답 하거나 ▲ 다음 미들웨어 함수를 호출하는 것이죠. 후자일 경우 현재 미들웨어 함수의 결과 값을 다음 미들웨어 함수의 인자로 전달하는 구조입니다.</p>\n<p>머릿속 이미지와 아래 그림이 같다면 제대로 이해하신 겁니다.</p>\n<p><img src=\"/assets/imgs/2018/12/08/middleware.png\" alt=\"\"></p>\n<p>어플리케이션 단에서 미들웨어 함수를 등록하는 부분과, 요청이 올때 등록된 미들웨어 함수 모두를 실행하는 것이 주요 알고리즘입니다.</p>\n<p>각각 슈도 코드로 나타내면 다음과 같습니다.</p>\n<p>미들웨어 등록:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> middlewares <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">use</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">fn</span> <span class=\"token operator\">=></span> middlewares<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span></code></pre></div>\n<p>미들웨어 실행:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">run</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  middlewares<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mw</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    next <span class=\"token operator\">=</span> <span class=\"token function\">mw</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>익스프레스JS의 미들웨어가 궁금하시다면 여기를 <a href=\"https://expressjs.com/ko/guide/writing-middleware.html\">미리</a> 보셔도 좋습니다.</p>\n<h2 id=\"middleware-모듈\" style=\"position:relative;\"><a href=\"#middleware-%EB%AA%A8%EB%93%88\" aria-label=\"middleware 모듈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Middleware 모듈</h2>\n<p>위에서 말한 미들웨어를 우리 구조에 맞게 구현해 보도록 하겠습니다.\n먼저 지난 시간까지 작성한 코드와 미들웨어 테스트 코드가 있는 브랜치로 체크아웃 할게요.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ git checkout -f middleware/spec</code></pre></div>\n<p>src/Middleware.spec.js 파일에 미들웨어 요구사항이 적인 테스트 코드가 있습니다.</p>\n<p>모두 다섯 부분으로 나누어 코드를 설명하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> sinon <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sinon'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Middleware <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./Middleware'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Middleware'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> middleware<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    middleware <span class=\"token operator\">=</span> <span class=\"token function\">Middleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'초기 미들웨어 갯수는 0개이다'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    middleware<span class=\"token punctuation\">.</span>_middlewares<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">.</span>should<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>테스트 관련한 라이브러리와 테스트 대상인 Middleware 모듈을 가져옵니다.\n물론 Middleware는 아직 만들지 않았구요.</p>\n<p>beforeEach에서 미들웨어 모듈을 이용해 미들웨어 인스턴스를 하나 만들었습니다.</p>\n<p>첫번째 테스트 케이스는 \"<strong>초기 미들웨어 갯수는 0개이다</strong>\"라는 요구사항을 테스트했습니다.\nmiddleware 인스턴스의 테스트 전용 속성인 _middlewares를 통해 배열의 길이가 0인이 확인하고 있죠?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"add()\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"배열에 미들웨어 함수를 추가한다\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> fns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n\n    fns<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span> <span class=\"token operator\">=></span> middleware<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    middleware<span class=\"token punctuation\">.</span>_middlewares<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">.</span>should<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>fns<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>두번째 테스트케이스는 \"<strong>배열에 미들웨어 함수를 추가한다</strong>\"라는 요구사항을 테스트 했습니다. 미리 빈 미들웨어 함수 3개를 만들어 fns 배열에 저장하고 이것을 middleware.add() 메소드로 등록했습니다. 우리가 구현할 모듈은 add() 메소드를 가져야하겠죠?</p>\n<p>메소드 실행 결과 배열의 길이가 3인지 확인합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'run()'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'미들웨어 함수를 실행한다'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> stub <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">mw1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">mw2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      sinon<span class=\"token punctuation\">.</span><span class=\"token function\">stub</span><span class=\"token punctuation\">(</span>stub<span class=\"token punctuation\">,</span> <span class=\"token string\">'mw1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">callsFake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      sinon<span class=\"token punctuation\">.</span><span class=\"token function\">stub</span><span class=\"token punctuation\">(</span>stub<span class=\"token punctuation\">,</span> <span class=\"token string\">'mw2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">callsFake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">const</span> fns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        stub<span class=\"token punctuation\">.</span>mw1<span class=\"token punctuation\">,</span>\n        stub<span class=\"token punctuation\">.</span>mw2<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span>\n      fns<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span> <span class=\"token operator\">=></span> middleware<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      middleware<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      fns<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">should</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">.</span>called<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>세번째 테스는 시논 라이브러리의 stub 함수를 이용했습니다.\n스텁이란 진짜처럼 동작하는 테스트용 메소드인데요 여기서는 미들웨어함수 mw1, mw2에 스텁을 만들었습니다.</p>\n<p>이 함수는 req, res, next라는 인자 세 개를 받고 마지막 인자를 실행(invoke)하는 코드입니다.\n이건 미리 우리가 미들웨어를 어떻게 사용할지 정의한 것입니다. 우리는 이런 식으로 미들웨어를 사용할 것이고 실제 미들웨어도 그렇게 구현해야겠지요.</p>\n<p>그리고 나서 add()로 미들웨어를 등록하고 run() 메소드를 실행합니다.\n이 메소드도 우리가 구현해야겠죠.</p>\n<p>메소드 실행 결과 모든 스텁이 실행되었는지 점검했습니다. 즉 \"<strong>run()은 모든 미들웨어 함수를 실행한다</strong>\"라는 요구사항을 테스트하는 것이지요.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"next를 호출하지 않는 미들웨어가 있으면 함수 체인을 즉시 중지한다\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> stub <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">mw1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">mwWillStop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// next를 호출하지 않는 미들웨어</span>\n    <span class=\"token function\">mw2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n  sinon<span class=\"token punctuation\">.</span><span class=\"token function\">stub</span><span class=\"token punctuation\">(</span>stub<span class=\"token punctuation\">,</span> <span class=\"token string\">\"mw1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">callsFake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  sinon<span class=\"token punctuation\">.</span><span class=\"token function\">stub</span><span class=\"token punctuation\">(</span>stub<span class=\"token punctuation\">,</span> <span class=\"token string\">\"mwWillStop\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">callsFake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n  sinon<span class=\"token punctuation\">.</span><span class=\"token function\">stub</span><span class=\"token punctuation\">(</span>stub<span class=\"token punctuation\">,</span> <span class=\"token string\">\"mw2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">callsFake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> fns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>stub<span class=\"token punctuation\">.</span>mw1<span class=\"token punctuation\">,</span> stub<span class=\"token punctuation\">.</span>mwWillStop<span class=\"token punctuation\">,</span> stub<span class=\"token punctuation\">.</span>mw2<span class=\"token punctuation\">]</span>\n  fns<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span> <span class=\"token operator\">=></span> middleware<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  middleware<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  fns<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> idx</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> shouldInvoked <span class=\"token operator\">=</span> idx <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span>\n    <span class=\"token function\">should</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">.</span>called<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>shouldInvoked<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이전 테스트와 비슷한데 예외 기능을 테스트합니다. \"<strong>미들웨어 함수가 next()를 호출하지 않을 경우 전체 미들웨어를 즉시 중단한다</strong>\"라는 요구사항이죠.\n두번째 미들웨어 스텁 mwWillStop은 다른 미들웨어와 달리 next()를 호출하지 않습니다.</p>\n<p>add()로 미들웨어를 등록하고 run()으로 실행했습니다.</p>\n<p>마지막엔 두 번째 미들웨어만 실행되었는지 점검합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'에러 발생시 에러 미들웨어만 실행한다'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> stub <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">mw1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">mwWillThrow</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 에러 발생 미들웨어</span>\n        <span class=\"token function\">mw2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">mwWillCatchError</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 에러 처리 미들웨어</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      sinon<span class=\"token punctuation\">.</span><span class=\"token function\">stub</span><span class=\"token punctuation\">(</span>stub<span class=\"token punctuation\">,</span> <span class=\"token string\">'mw1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">callsFake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      sinon<span class=\"token punctuation\">.</span><span class=\"token function\">stub</span><span class=\"token punctuation\">(</span>stub<span class=\"token punctuation\">,</span> <span class=\"token string\">'mwWillThrow'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">callsFake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      sinon<span class=\"token punctuation\">.</span><span class=\"token function\">stub</span><span class=\"token punctuation\">(</span>stub<span class=\"token punctuation\">,</span> <span class=\"token string\">'mw2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">callsFake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      sinon<span class=\"token punctuation\">.</span><span class=\"token function\">stub</span><span class=\"token punctuation\">(</span>stub<span class=\"token punctuation\">,</span> <span class=\"token string\">'mwWillCatchError'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">callsFake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">const</span> fns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        stub<span class=\"token punctuation\">.</span>mw1<span class=\"token punctuation\">,</span>\n        stub<span class=\"token punctuation\">.</span>mwWillThrow<span class=\"token punctuation\">,</span>\n        stub<span class=\"token punctuation\">.</span>mw2<span class=\"token punctuation\">,</span>\n        stub<span class=\"token punctuation\">.</span>mwWillCatchError<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span>\n      fns<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span> <span class=\"token operator\">=></span> middleware<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      middleware<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      fns<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> idx</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> shouldInvoked <span class=\"token operator\">=</span> idx <span class=\"token operator\">!==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">should</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">.</span>called<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>shouldInvoked<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>마지막 테스트 코드입니다. 가장 길지만 그래도 꾹 참고 읽어보시길 바랍니다.</p>\n<p>**\"에러 발생시 에러 미들웨어만 실행한다\"**라는 요구사항을 테스트합니다.</p>\n<p>익스프레스 미들웨어 문서를 읽어보셨나요? 그것은 인자 갯수에 따라 두 가지로 분류 합니다.</p>\n<ul>\n<li><strong>일반 미들웨어</strong>: 인자 세 개 (req, res, next)</li>\n<li><strong>에러 미들웨어</strong>: 인자 네 개 (err, req, res, next)</li>\n</ul>\n<p>우리도 이 규칙을 따르겠습니다. 미들웨어 실행 중 에러가 발생하면 다음 미들웨어를 실행하지 않고 곧장 에러 미들웨어로 건너 뛰도록 하는 것입니다.</p>\n<p>미들웨어 스텁을 네 개 만들었는데요 두번째 mwWillThrow 가 에러를 던지는 미들웨어이고 mwWillCatchError가 에러를 처리하는 에러 미들웨어입니다.</p>\n<p>add()로 등록하고 run()으로 실행한뒤 3번재 미들웨어가 미실행 되었는 (두번 째에서 네 번째로 넘어갔는지) 체크하는 코드입니다.</p>\n<h2 id=\"실습---1번-요구사항-구현\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%8A%B5---1%EB%B2%88-%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD-%EA%B5%AC%ED%98%84\" aria-label=\"실습   1번 요구사항 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐤실습 - 1번 요구사항 구현</h2>\n<p>\"초기 미들웨어 갯수는 0개이다\" 라는 요구사항을 먼저 구현해 보세요.</p>\n<h2 id=\"풀이\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4\" aria-label=\"풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐤풀이</h2>\n<p>첫번째 요구사항은 쉽게 해결할 수 있죠?\nsrc 폴더에 Middleware.js 파일을 만들고 아래 코드를 입력합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Middleware</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> _middlewares <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    _middlewares<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> Middleware</code></pre></div>\n<p>_middlewares에 빈 배열을 할당하고 바로 객체로 만들어 리턴 했습니다.</p>\n<p>테스트 코드를 돌려 볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm test\n\n  Middleware\n    ✓ 초기 미들웨어 갯수는 0개이다\n    add()\n      1) 배열에 미들웨어 함수를 추가한다\n    run()\n      2) 미들웨어 함수를 실행한다\n      3) next를 호출하지 않는 미들웨어가 있으면 함수 체인을 즉시 중지한다\n      4) 에러 발생시 에러 미들웨어만 실행한다</code></pre></div>\n<p>첫 번째 테스트 케이스에 통과 했습니다.✅</p>\n<h2 id=\"실습---2번-요구사항-구현\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%8A%B5---2%EB%B2%88-%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD-%EA%B5%AC%ED%98%84\" aria-label=\"실습   2번 요구사항 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐤실습 - 2번 요구사항 구현</h2>\n<p>\"add() 메소드는 배열에 미들웨어 함수를 추가한다\"라는 요구사항을 구현해 보세요.</p>\n<p><em>힌트: 인자는 미들웨어 함수</em></p>\n<h2 id=\"풀이-1\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4-1\" aria-label=\"풀이 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐤풀이</h2>\n<p>이것도 아주 간단히 해결했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">fn</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  _middlewares<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n  _middlewares<span class=\"token punctuation\">,</span>\n  add<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>테스트를 돌려 볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm test\n\n  Middleware\n    ✓ 초기 미들웨어 갯수는 0개이다\n    add()\n      ✓ 배열에 미들웨어 함수를 추가한다\n    run()\n      1) 미들웨어 함수를 실행한다\n      2) next를 호출하지 않는 미들웨어가 있으면 함수 체인을 즉시 중지한다\n      3) 에러 발생시 에러 미들웨어만 실행한다</code></pre></div>\n<p>두번째 테스트 케이스까지 통과했습니다.✅</p>\n<h2 id=\"실습---3번-요구사항-구현\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%8A%B5---3%EB%B2%88-%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD-%EA%B5%AC%ED%98%84\" aria-label=\"실습   3번 요구사항 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐤실습 - 3번 요구사항 구현</h2>\n<p>\"run() 메소드는 미들웨어 함수를 실행한다\"라는 요구사항을 구현해 보세요.</p>\n<p><em>힌트: run 메소드 인자는 req와 res, 재귀함수를 사용?</em></p>\n<h2 id=\"-풀이\" style=\"position:relative;\"><a href=\"#-%ED%92%80%EC%9D%B4\" aria-label=\" 풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐤 풀이</h2>\n<p>이번 요구사항은 좀 힘들 수도 있습니다. 재귀가 들어 가는 부분이 있어서 더욱 그렇구요.\n그럼 같이 풀어 보지요. 두 부분으로 나눠 설명하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Middleware</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> _middlewares <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">const</span> _req<span class=\"token punctuation\">,</span> _res\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">run</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    _req <span class=\"token operator\">=</span> req<span class=\"token punctuation\">;</span>\n    _res <span class=\"token operator\">=</span> res<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">_run</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>모든 미들웨어 함수에서 req, res 객체를 사용하기 때문에 이를 클로져 변수 _req, _res로 저장했습니다.</p>\n<p>그리고 이 다음에 만들 _run(0) 함수를 실행합니다. 여기서 인자값은 0번(배열의 첫번째) 미들웨어를 실행한다는 의도 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">_run</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">i</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">>=</span> _middlewares<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n\n  <span class=\"token keyword\">const</span> nextMw <span class=\"token operator\">=</span> _middlewares<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">next</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">_run</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">nextMw</span><span class=\"token punctuation\">(</span>_req<span class=\"token punctuation\">,</span> _res<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>인덱스 값이 배열 범위를 벗어날 경우 바로 함수를 종료하는 방어 코드를 작성합니다.</p>\n<p>그리고 실행할 미들웨어를 _middlewares 배열에서 찾아 nextMw에 저장해 둡니다.</p>\n<p>미들웨어 함수는 req, res 뿐만 아니라 다음 미들웨어 함수를 실행할 함수인(성크, thunk) next를 세 번째 인자로 받습니다. 이 함수도 만들어 next에 담아 둡니다.</p>\n<p>마지막으로 nextMw에 _req, _res, next를 전달하여 실행합니다.</p>\n<p>그럼 테스트를 돌려볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm test\n\n  Middleware\n    ✓ 초기 미들웨어 갯수는 0개이다\n    add()\n      ✓ 배열에 미들웨어 함수를 추가한다\n    run()\n      ✓ 미들웨어 함수를 실행한다\n      ✓ next를 호출하지 않는 미들웨어가 있으면 함수 체인을 즉시 중지한다\n      1) 에러 발생시 에러 미들웨어만 실행한다</code></pre></div>\n<p>세 번째와 네 번째 테스트 케이스까지 모두 통과했네요.✅ 좋습니다. 일석이조에요. 👍</p>\n<h2 id=\"실습---5번-요구사항-구현\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%8A%B5---5%EB%B2%88-%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD-%EA%B5%AC%ED%98%84\" aria-label=\"실습   5번 요구사항 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐤실습 - 5번 요구사항 구현</h2>\n<p>\"run() 메소드는 에러 발생시 에러 미들웨어만 실행한다\"라는 요구사항을 구현해 보세요.</p>\n<p><em>힌트: 익스프레스 미들웨어 함수는 인자 갯수로 구별함, 다음 미들웨어 함수로 에러를 전달할 때는 next(err) 호출</em></p>\n<h2 id=\"풀이-2\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4-2\" aria-label=\"풀이 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐤풀이</h2>\n<p>그럼 같이 풀어보겠습니다. 두 부분으로 나눠서 설명할께요</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">_run</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">i<span class=\"token punctuation\">,</span> err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">>=</span> _middlewares<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">const</span> nextMw <span class=\"token operator\">=</span> _middlewares<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">next</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token function\">_run</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span></code></pre></div>\n<p>next 함수를 만들에 빈 인자를 err로 채워 넣습니다. 즉 에러가 있으면 받겠다는 것이죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> isNextErrorMw <span class=\"token operator\">=</span> nextMw<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">4</span>\n\n        <span class=\"token keyword\">return</span> isNextErrorMw <span class=\"token operator\">?</span>\n          <span class=\"token function\">nextMw</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> _req<span class=\"token punctuation\">,</span> _res<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>\n          <span class=\"token function\">_run</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">}</span>\n\n     <span class=\"token function\">nextMw</span><span class=\"token punctuation\">(</span>_req<span class=\"token punctuation\">,</span> _res<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span></code></pre></div>\n<p>_run 메소드의 두 번째 인자인 에러가 있을 경우 현재 미들웨어가 에러 미들웨어인지 인자 길이로 체크합니다. 길이가 4이면 에러 미들웨어인 셈이죠.</p>\n<p>그래서 에러 미들웨어이면(isNextErrorMw) 미들웨어 함수를 실행합니다.\n만약 기본 미들웨라라면 다음 미들웨어를 찾도록 _run(i + 1, err)를 실행합니다.</p>\n<p>코드가 좀 어려워 보일지도 모르겠네요. 이해가 안된다면 차근차근 여러번 읽어 보시기 바랍니다.</p>\n<p>그럼 저장하고 테스트를 돌려보죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm test\n\n  Middleware\n    ✓ 초기 미들웨어 갯수는 0개이다\n    add()\n      ✓ 배열에 미들웨어 함수를 추가한다\n    run()\n      ✓ 미들웨어 함수를 실행한다\n      ✓ next를 호출하지 않는 미들웨어가 있으면 함수 체인을 즉시 중지한다\n      ✓ 에러 발생시 에러 미들웨어만 실행한다</code></pre></div>\n<p>드디어 모든 테스트 케이스에 통과 했습니다!✅</p>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<ul>\n<li>미들웨어는 비동기 로직을 다루기 위한 패턴입니다.</li>\n<li>미들웨어는 요청에서 응답 사이에서 실행되는 함수들의 목록이며 순차적으로 실행됩니다.</li>\n<li>에러 미들웨어는 인자가 4개이며 어떤 미들웨어에서든이 에러가 발생되면 곧장 실행됩니다.</li>\n</ul>\n<p><a href=\"/series/2018/12/01/node-web-0_index.html\">목차 바로가기</a></p>","frontmatter":{"slug":"/series/2018/12/08/node-web-8_middleware.html","date":"2018-12-08T00:00:00.000Z","title":"[Node.js코드랩] 8.미들웨어","tags":["lecture"],"seriesId":"series-2018-12-01-weplanet-codelab","videoId":null,"featuredImage":null},"tableOfContents":"<ul>\n<li><a href=\"#%EB%AA%A9%ED%91%9C\">🌳목표</a></li>\n<li><a href=\"#%EB%AF%B8%EB%93%A4%EC%9B%A8%EC%96%B4-%ED%8C%A8%ED%84%B4\">미들웨어 패턴</a></li>\n<li><a href=\"#middleware-%EB%AA%A8%EB%93%88\">Middleware 모듈</a></li>\n<li><a href=\"#%EC%8B%A4%EC%8A%B5---1%EB%B2%88-%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD-%EA%B5%AC%ED%98%84\">🐤실습 - 1번 요구사항 구현</a></li>\n<li><a href=\"#%ED%92%80%EC%9D%B4\">🐤풀이</a></li>\n<li><a href=\"#%EC%8B%A4%EC%8A%B5---2%EB%B2%88-%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD-%EA%B5%AC%ED%98%84\">🐤실습 - 2번 요구사항 구현</a></li>\n<li><a href=\"#%ED%92%80%EC%9D%B4-1\">🐤풀이</a></li>\n<li><a href=\"#%EC%8B%A4%EC%8A%B5---3%EB%B2%88-%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD-%EA%B5%AC%ED%98%84\">🐤실습 - 3번 요구사항 구현</a></li>\n<li><a href=\"#-%ED%92%80%EC%9D%B4\">🐤 풀이</a></li>\n<li><a href=\"#%EC%8B%A4%EC%8A%B5---5%EB%B2%88-%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD-%EA%B5%AC%ED%98%84\">🐤실습 - 5번 요구사항 구현</a></li>\n<li><a href=\"#%ED%92%80%EC%9D%B4-2\">🐤풀이</a></li>\n<li><a href=\"#%EC%A0%95%EB%A6%AC\">정리</a></li>\n</ul>"},"series":{"id":"series-2018-12-01-weplanet-codelab","title":"Node.js 코드랩"},"video":null,"allMarkdownRemark":{"nodes":[{"id":"c1aff780-329b-54c9-8b65-9adf8255b80f","frontmatter":{"slug":"/series/2018/12/01/node-web-1_orientation.html","date":"2018-12-01T00:00:00.000Z","title":"[Node.js 코드랩] 1.오리엔테이션","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"87d6201c-0865-5682-aee7-484a28e1b0c6","frontmatter":{"slug":"/series/2018/12/02/node-web-2_http.html","date":"2018-12-02T00:00:00.000Z","title":"[Node.js코드랩] 2.기본 모듈 http","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"034d39e5-6cf5-50b2-a6aa-8dbace6f3373","frontmatter":{"slug":"/series/2018/12/03/node-web-3_refactoring.html","date":"2018-12-03T00:00:00.000Z","title":"[Node.js코드랩] 3.리팩토링","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"3f204c8b-282c-55a4-99a8-318400c0e728","frontmatter":{"slug":"/series/2018/12/04/node-web-4_application.html","date":"2018-12-04T00:00:00.000Z","title":"[Node.js코드랩] 4.어플리케이션","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"e70998dc-8407-52e6-bb47-6f421424d3c1","frontmatter":{"slug":"/series/2018/12/05/node-web-5_debug.html","date":"2018-12-05T00:00:00.000Z","title":"[Node.js코드랩] 5.커스텀 모듈 Debug","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"b674c656-6e82-5492-8b8d-55bdca7435d0","frontmatter":{"slug":"/series/2018/12/06/node-web-6_static-files.html","date":"2018-12-06T00:00:00.000Z","title":"[Node.js코드랩] 6.정적 파일","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"357a87df-cd75-5c38-a7b1-c75a0deda4df","frontmatter":{"slug":"/series/2018/12/07/node-web-7_serve-static.html","date":"2018-12-07T00:00:00.000Z","title":"[Node.js코드랩] 7.커스텀 모듈 serve-static","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"a0498e79-1772-5c7b-80d5-65c577cce45d","frontmatter":{"slug":"/series/2018/12/08/node-web-8_middleware.html","date":"2018-12-08T00:00:00.000Z","title":"[Node.js코드랩] 8.미들웨어","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"27971d0e-d65a-5ee9-87e3-436bf2d2773d","frontmatter":{"slug":"/series/2018/12/09/node-web-9_middleware2.html","date":"2018-12-09T00:00:00.000Z","title":"[Node.js코드랩] 9.미들웨어 활용","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"19e53d49-1c5d-502e-a499-2f6c4864bd29","frontmatter":{"slug":"/series/2018/12/10/node-web-10_logger.html","date":"2018-12-10T00:00:00.000Z","title":"[Node.js코드랩] 10.커스텀 모듈 logger","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"d87c7b44-7260-5f36-bf4c-954780ec33b4","frontmatter":{"slug":"/series/2018/12/11/node-web-11_router-use.html","date":"2018-12-11T00:00:00.000Z","title":"[Node.js코드랩] 11.라우터 use","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"9f78412c-a891-557e-954f-2a3dddbc54b5","frontmatter":{"slug":"/series/2018/12/12/node-web-12_get-posts-api.html","date":"2018-12-12T00:00:00.000Z","title":"[Node.js코드랩] 12.포스트 조회 API","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"42f9d27e-b2eb-5861-a763-9d2671a05cec","frontmatter":{"slug":"/series/2018/12/13/node-web-13_res.html","date":"2018-12-13T00:00:00.000Z","title":"[Node.js코드랩] 13. 응답 객체","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"465c8e16-0b11-506d-bcc6-69b6f02d93a4","frontmatter":{"slug":"/series/2018/12/14/node-web-14_req.html","date":"2018-12-14T00:00:00.000Z","title":"[Node.js코드랩] 14. 요청 객체","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"7a738192-ebd2-57c5-a69e-6bdcdfba5428","frontmatter":{"slug":"/series/2018/12/15/node-web-15_get_post.html","date":"2018-12-15T00:00:00.000Z","title":"[Node.js코드랩] 15.라우터 Get, Post","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"8950cffd-84dc-5535-ae68-ad0973801ab6","frontmatter":{"slug":"/series/2018/12/16/node-web-16_body-parser.html","date":"2018-12-16T00:00:00.000Z","title":"[Node.js코드랩] 16. body-parser","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"f9eebf1b-8fcf-506c-bae8-ac7c5b576ce6","frontmatter":{"slug":"/series/2018/12/17/node-web-17_expressjs.html","date":"2018-12-17T00:00:00.000Z","title":"[Node.js코드랩] 17. Express.js","seriesId":"series-2018-12-01-weplanet-codelab"}},{"id":"9b807cfc-9203-5f7d-9a99-9f7dccad52f0","frontmatter":{"slug":"/series/2018/12/17/node-web-18_summary.html","date":"2018-12-17T00:00:00.000Z","title":"[Node.js코드랩] 18. 마무리","seriesId":"series-2018-12-01-weplanet-codelab"}}]}},"pageContext":{"slug":"/series/2018/12/08/node-web-8_middleware.html","date":"2018-12-08T00:00:00.000Z","seriesId":"series-2018-12-01-weplanet-codelab","videoId":null,"previous":{"frontmatter":{"slug":"/series/2018/12/07/node-web-7_serve-static.html","date":"2018-12-07T00:00:00.000Z","title":"[Node.js코드랩] 7.커스텀 모듈 serve-static","category":"연재물","seriesId":"series-2018-12-01-weplanet-codelab","videoId":null}},"next":{"frontmatter":{"slug":"/series/2018/12/09/node-web-9_middleware2.html","date":"2018-12-09T00:00:00.000Z","title":"[Node.js코드랩] 9.미들웨어 활용","category":"연재물","seriesId":"series-2018-12-01-weplanet-codelab","videoId":null}}}},
    "staticQueryHashes": ["3044774879"]}