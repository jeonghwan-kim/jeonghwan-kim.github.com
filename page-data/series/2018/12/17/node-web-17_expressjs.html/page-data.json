{"componentChunkName":"component---src-templates-blog-post-blog-post-tsx","path":"/series/2018/12/17/node-web-17_expressjs.html","result":{"data":{"site":{"siteMetadata":{"title":"김정환 블로그","url":"https://jeonghwan-kim.github.io"}},"markdownRemark":{"id":"6ecbe281-b86d-5e09-b9e5-b090c3b46a7c","excerpt":"🌳목표 지금까지 만들었던 웹 어플리케이션을 웹 프레임웍을 이용해서 다시 만들어 봅니다. Express.js로 다시 만들기 먼저 지난 시간까지 작성한 코드로 이동 하겠습니다. 우리가 가장 먼저 만들었던 debug 모듈을 기억하시나요?\n이제는 NPM…","html":"<h2 id=\"목표\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%ED%91%9C\" aria-label=\"목표 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌳목표</h2>\n<p>지금까지 만들었던 웹 어플리케이션을 웹 프레임웍을 이용해서 다시 만들어 봅니다.</p>\n<h2 id=\"expressjs로-다시-만들기\" style=\"position:relative;\"><a href=\"#expressjs%EB%A1%9C-%EB%8B%A4%EC%8B%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"expressjs로 다시 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Express.js로 다시 만들기</h2>\n<p>먼저 지난 시간까지 작성한 코드로 이동 하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ git checkout -f route/post-posts</code></pre></div>\n<p>우리가 가장 먼저 만들었던 debug 모듈을 기억하시나요?\n이제는 NPM에서 다운받아 우리가 만든 것과 교체하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install debug</code></pre></div>\n<p>그리고 웹 프레임웍인 Express.js도 NPM에서 다운받습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install express</code></pre></div>\n<p>먼저 서버 구동파일인 bin.js를 수정하지요.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> debug <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"debug\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bin\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// debug 모듈 교체</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>다운받은 debug 모듈로 교체하였습니다.</p>\n<p>다음으로 어플리케이션 시작점인 app.js를 수정합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> debug <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"debug\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"app\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// debug 모듈 교체</span>\n<span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Application 모듈 교체</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"App is initiated\"</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> app</code></pre></div>\n<p>debug 모듈 뿐만 아니라 Application 모듈도 다운받은 express로 바꾸었습니다.</p>\n<p>여기까지 하고 우선 서버를 구동해 보죠.</p>\n<p>debug 모듈은 환경변수 DEBUG를 설정하고 실행해야 로그를 출력합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ DEBUG=* npm start</code></pre></div>\n<p><img src=\"/assets/imgs/2018/12/17/result_1.png\"></p>\n<p>기대한것 보다 훨씬 많은 로그가 출력되는데요?\n이건 express 프레임웍도 내부적으로는 debug를 사용하고 있기 때문입니다.</p>\n<p>앞에 \"express:\"로 시작하는 로그는 익스프레스에서 출력하는 메세지들이죠.\n그 아래 \"app\", \"bin\" 태그가 있는 로그가 우리가 설정한 것입니다.</p>\n<p>실전에서는 \"app<em>name:sub</em>name\" 형식으로 태깅해야 로그 필터링하기에 수월하겠죠?</p>\n<h2 id=\"serve-static\" style=\"position:relative;\"><a href=\"#serve-static\" aria-label=\"serve static permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>serve-static</h2>\n<p>다음으로 정작파일을 다룬 serve-staic 모듈을 교체하겠습니다.</p>\n<p>이 기능은 익스프레스 프레임웍에서 제공합니다.\napp.js에 바로 코딩해 볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">static</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"public\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>express.static() 메소드를 이용하면 바로 정적파일 제공기능을 활성화 할 수 있어요.</p>\n<p>인자로 \"public\" 문자열을 전달했는데 이건 정적파일을 담고 있는 최 상단 폴더를 지정한 것입니다.\n모듈 안에서 하드코딩으로 박아 놓았던 우리 코드보다 더 확장하기 좋은 코드죠?</p>\n<h2 id=\"morgan\" style=\"position:relative;\"><a href=\"#morgan\" aria-label=\"morgan permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>morgan</h2>\n<p>HTTP 요청 기록을 로깅하는 looger 모듈도 바꿔보겠습니다.</p>\n<p>NPM에는 이것과 똑같은 기능을 하는 morgan이라는 모듈이 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install morgan</code></pre></div>\n<p>이것도 미들웨어니깐 app.js에서 어플리케이션에 등록합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> logger <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"morgan\"</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">logger</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dev\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>\"dev\" 인자를 전달하는데요 이것은 로깅 형식을 지정한 것입니다.\n\"combined\", \"common\" 처럼 미리 등록되어 있는 형식 뿐만아니라 로그를 커스터마징 할 수 있도록 편의를 제공합니다. (<a href=\"https://github.com/expressjs/morgan#predefined-formats\">문서</a> 참고)</p>\n<h2 id=\"포스트-조회\" style=\"position:relative;\"><a href=\"#%ED%8F%AC%EC%8A%A4%ED%8A%B8-%EC%A1%B0%ED%9A%8C\" aria-label=\"포스트 조회 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>포스트 조회</h2>\n<p>GET 메소드를 이용한 포스트 조회 API를 express 기능으로 바꿔보지요.</p>\n<p>라우트 등록을 위해 app.js로 갑니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> apiPost <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./routes/api/post\"</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/posts\"</span><span class=\"token punctuation\">,</span> apiPost<span class=\"token punctuation\">.</span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>익스프레스 객체인 app도 우리가 만든것 처럼 get() 메소드를 지원합니다.\n기능도 똑같아요.\n뿐만아니라 HTTP 메쏘드 이름에 따라 post(), put(), delete() 메소드까지 제공한답니다.</p>\n<h2 id=\"body-parser\" style=\"position:relative;\"><a href=\"#body-parser\" aria-label=\"body parser permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>body-parser</h2>\n<p>전 시간에 만들었던 body-parser 모듈도 교체해 보죠.</p>\n<p>NPM에서 같은 이름으로 모듈을 다운받을 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install body-parser</code></pre></div>\n<p>역시 미들웨어 함수이므로 app.js에서 등록합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> bodyParser <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body-parser\"</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>bodyParser<span class=\"token punctuation\">.</span><span class=\"token function\">urlencoded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> extended<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>bodyParser<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><a href=\"https://expressjs.com/ko/4x/api.html#req.body\">익스프레스 문서</a>에 따라 urlencoded()와 json() 메소드를 실행합니다.</p>\n<h2 id=\"포스트-생성\" style=\"position:relative;\"><a href=\"#%ED%8F%AC%EC%8A%A4%ED%8A%B8-%EC%83%9D%EC%84%B1\" aria-label=\"포스트 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>포스트 생성</h2>\n<p>마지막으로 포스트 생성 API를 익스프레스 기능으로 대체합니다.\n라우트 등록을 위해 app.js에 아래 코드를 추가합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/posts\"</span><span class=\"token punctuation\">,</span> apiPost<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이상으로 express를 이용해서 기능 기능을 모두 대체했습니다.\n어떤가요?\n웹 프레임웍과 몇 가지 라이브러리를 사용하니깐 너무 쉽게 끝나 버렸죠?</p>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<ul>\n<li>익스프레스JS를 이용해 기존 서버를 다시 작성했습니다.</li>\n</ul>\n<p><a href=\"/series/2018/12/01/node-web-0_index.html\">목차 바로가기</a></p>","fields":{"dateStr":"2018년 12월 17일","date":"2018-12-17T00:00:00.000Z","slug":"/series/2018/12/17/node-web-17_expressjs.html"},"frontmatter":{"title":"[Node.js코드랩] 17. Express.js","tags":["lecture"],"seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab","videoId":null},"tableOfContents":"<ul>\n<li><a href=\"#%EB%AA%A9%ED%91%9C\">🌳목표</a></li>\n<li><a href=\"#expressjs%EB%A1%9C-%EB%8B%A4%EC%8B%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0\">Express.js로 다시 만들기</a></li>\n<li><a href=\"#serve-static\">serve-static</a></li>\n<li><a href=\"#morgan\">morgan</a></li>\n<li><a href=\"#%ED%8F%AC%EC%8A%A4%ED%8A%B8-%EC%A1%B0%ED%9A%8C\">포스트 조회</a></li>\n<li><a href=\"#body-parser\">body-parser</a></li>\n<li><a href=\"#%ED%8F%AC%EC%8A%A4%ED%8A%B8-%EC%83%9D%EC%84%B1\">포스트 생성</a></li>\n<li><a href=\"#%EC%A0%95%EB%A6%AC\">정리</a></li>\n</ul>"},"series":{"id":"555b6438-4a71-51d0-9156-a1d5ca4d5eab","title":"Node.js 코드랩"},"video":null,"allMarkdownRemark":{"nodes":[{"id":"55a324e0-6e38-5ec8-a3e7-029e4563c485","fields":{"slug":"/series/2018/12/01/node-web-1_orientation.html","date":"2018-12-01T00:00:00.000Z"},"frontmatter":{"title":"[Node.js 코드랩] 1.오리엔테이션","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"47ab845e-b020-5d91-b8d6-8cf021dea527","fields":{"slug":"/series/2018/12/02/node-web-2_http.html","date":"2018-12-02T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 2.기본 모듈 http","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"707f5850-7ad4-5a1f-9899-05a7a8a8a204","fields":{"slug":"/series/2018/12/03/node-web-3_refactoring.html","date":"2018-12-03T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 3.리팩토링","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"57ecb32c-ad9a-50eb-8da4-40aea81b3d6a","fields":{"slug":"/series/2018/12/04/node-web-4_application.html","date":"2018-12-04T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 4.어플리케이션","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"d6ffc7a9-84a8-5eed-9c44-6b50f18e6db0","fields":{"slug":"/series/2018/12/05/node-web-5_debug.html","date":"2018-12-05T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 5.커스텀 모듈 Debug","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"fceb13af-7b53-5444-9c6d-709d8ce0ef6f","fields":{"slug":"/series/2018/12/06/node-web-6_static-files.html","date":"2018-12-06T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 6.정적 파일","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"a5adc762-1163-5eac-b3f8-d4813d631cf0","fields":{"slug":"/series/2018/12/07/node-web-7_serve-static.html","date":"2018-12-07T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 7.커스텀 모듈 serve-static","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"bfed004c-9909-5b65-a1fb-f8ca988e3b3c","fields":{"slug":"/series/2018/12/08/node-web-8_middleware.html","date":"2018-12-08T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 8.미들웨어","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"98a0d5ee-52a1-526a-80c5-8a22f42b6b13","fields":{"slug":"/series/2018/12/09/node-web-9_middleware2.html","date":"2018-12-09T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 9.미들웨어 활용","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"40e9aef7-0d57-5a89-8789-05b993261b16","fields":{"slug":"/series/2018/12/10/node-web-10_logger.html","date":"2018-12-10T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 10.커스텀 모듈 logger","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"3b588f16-6a2f-53ec-a65a-1ac8141ab57a","fields":{"slug":"/series/2018/12/11/node-web-11_router-use.html","date":"2018-12-11T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 11.라우터 use","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"67ed027c-8cb2-5f39-93a9-7fc73c0c74cd","fields":{"slug":"/series/2018/12/12/node-web-12_get-posts-api.html","date":"2018-12-12T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 12.포스트 조회 API","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"91bc8106-6f39-5b71-a248-6e077a8dc7f1","fields":{"slug":"/series/2018/12/13/node-web-13_res.html","date":"2018-12-13T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 13. 응답 객체","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"d4c424e7-2912-5926-b912-6ff5c0de4b3f","fields":{"slug":"/series/2018/12/14/node-web-14_req.html","date":"2018-12-14T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 14. 요청 객체","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"963f5cd1-3036-5f23-a6d7-01ec8bde0d36","fields":{"slug":"/series/2018/12/15/node-web-15_get_post.html","date":"2018-12-15T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 15.라우터 Get, Post","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"f4685d82-22b5-501e-a437-f35a01968b47","fields":{"slug":"/series/2018/12/16/node-web-16_body-parser.html","date":"2018-12-16T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 16. body-parser","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"5040db68-cb25-5e8f-b8fe-92e41bc664ab","fields":{"slug":"/series/2018/12/17/node-web-18_summary.html","date":"2018-12-17T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 18. 마무리","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}},{"id":"6ecbe281-b86d-5e09-b9e5-b090c3b46a7c","fields":{"slug":"/series/2018/12/17/node-web-17_expressjs.html","date":"2018-12-17T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 17. Express.js","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab"}}]}},"pageContext":{"slug":"/series/2018/12/17/node-web-17_expressjs.html","date":"2018-12-17T00:00:00.000Z","seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab","videoId":null,"previous":{"fields":{"slug":"/series/2018/12/16/node-web-16_body-parser.html","date":"2018-12-16T00:00:00.000Z","beforeGatsby":true},"frontmatter":{"title":"[Node.js코드랩] 16. body-parser","category":"series","permalink":null,"seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab","videoId":null}},"next":{"fields":{"slug":"/series/2018/12/17/node-web-18_summary.html","date":"2018-12-17T00:00:00.000Z","beforeGatsby":true},"frontmatter":{"title":"[Node.js코드랩] 18. 마무리","category":"series","permalink":null,"seriesId":"555b6438-4a71-51d0-9156-a1d5ca4d5eab","videoId":null}}}}}