{"componentChunkName":"component---src-templates-blog-post-index-tsx","path":"/series/2018/12/17/node-web-18_summary.html","result":{"data":{"site":{"siteMetadata":{"title":"김정환 블로그","url":"https://jeonghwan-kim.github.io","series":[{"id":20200102,"title":"프론트엔드 개발환경의 이해"},{"id":20181201,"title":"Node.js 코드랩"},{"id":20171002,"title":"Express.js 만들기"},{"id":20170422,"title":"함수형 프로그래밍"},{"id":20150222,"title":"Hapi.js로 API 서버 시작하기"},{"id":20160611,"title":"앵귤러로 Todo앱 만들기"}],"videos":[{"id":1,"url":"https://www.inflearn.com/course/프론트엔드-개발환경","thumb":"https://cdn.inflearn.com/public/courses/324671/course_cover/638eee1a-6381-402d-a17b-3724751414f1/frontend-env-eng.png","title":"프론트엔드 개발환경의 이해와 실습"},{"id":2,"url":"https://www.inflearn.com/course/vuejs","thumb":"https://cdn.inflearn.com/wp-content/uploads/kjh_Vuejs-3.jpg","title":"트렐로 개발로 배우는 Vuejs, Vuex, Vue-Router 프론트엔드 실전 기술"},{"id":3,"url":"https://www.inflearn.com/course/순수js-vuejs-개발-강좌","thumb":"https://cdn.inflearn.com/wp-content/uploads/vuejsandpure.png","title":"실습 UI 개발로 배워보는 순수 javascript 와 VueJS 개발"},{"id":4,"url":"https://www.inflearn.com/course/테스트주도개발-tdd-nodejs-api","thumb":"https://cdn.inflearn.com/wp-content/uploads/nodetdd.png","title":"테스트주도개발(TDD)로 만드는 NodeJS API 서버"},{"id":5,"url":"https://www.inflearn.com/course/tdd-견고한-소프트웨어-만들기","thumb":"https://cdn.inflearn.com/wp-content/uploads/software-1.jpg","title":"견고한 JS 소프트웨어 만들기"},{"id":6,"url":"https://www.youtube.com/watch?v=_QCNqV_EfzE","thumb":"/assets/imgs/2020/04/07/youtube_20200407.jpg","title":"알아두면 쓸데있는 VSCode 노하우"}]}},"markdownRemark":{"id":"5040db68-cb25-5e8f-b8fe-92e41bc664ab","excerpt":"구성도 다시보기 지금까지 작성했던 모듈을 그림으로 다시 살펴 보겠습니다.\n 모듈의 성격에 따라 총 4가지 섹션으로 구분합니다. Boostrap 이 섹션은 서버 어플리케이션을 구동하는 bin.js와 어플리케이션인 app.js로 구성됩니다. bin.js…","html":"<h2 id=\"구성도-다시보기\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EC%84%B1%EB%8F%84-%EB%8B%A4%EC%8B%9C%EB%B3%B4%EA%B8%B0\" aria-label=\"구성도 다시보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구성도 다시보기</h2>\n<p>지금까지 작성했던 모듈을 그림으로 다시 살펴 보겠습니다.\n<img src=\"/assets/imgs/2018/12/17/struct_1.png\"></p>\n<p>모듈의 성격에 따라 총 4가지 섹션으로 구분합니다.</p>\n<h3 id=\"boostrap\" style=\"position:relative;\"><a href=\"#boostrap\" aria-label=\"boostrap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Boostrap</h3>\n<p>이 섹션은 서버 어플리케이션을 구동하는 bin.js와 어플리케이션인 app.js로 구성됩니다.</p>\n<p><strong>bin.js</strong>은 도메인 주소와 포트 번호를 정해서 어플리케이션에게 전달하는 역할을 합니다.\n이 정보를 이용해 app.js는 서버를 객체를 만들어 내는 것이죠.</p>\n<h3 id=\"expressjs\" style=\"position:relative;\"><a href=\"#expressjs\" aria-label=\"expressjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Express.js</h3>\n<p>이 부분이 웹 프레임웍의 <strong>척추</strong>입니다.</p>\n<p><strong>Application</strong>은 get(), post() 메소드로 라우터 기능을 하고 listen()으로 클라이언트의 요청 수신 준비를 합니다.\n추가 필요한 기능은 미들웨어 형태로 어플리케이션에 덧붙여 지는데 use() 메소드를 사용합니다.</p>\n<p><strong>Middleware</strong>는 미들웨어 함수를 등록하고 실행하는 일종의 미들웨어 관리자 역할을 한다고 보면 됩니다.</p>\n<p><strong>Request</strong>는 요청 관리자입니다. path, querystring, 그리고 body 데이터를 표준화하여 컨트롤러 함수가 일관적으로 사용하도록 돕는 역할을 하지요.</p>\n<p><strong>Response</strong>도 그렇습니다. 응답에 자주 사용하는 코드를 status(), set(), send(), 그리고 json() 메소드로 제공합니다.</p>\n<h3 id=\"3rd-party-libraries\" style=\"position:relative;\"><a href=\"#3rd-party-libraries\" aria-label=\"3rd party libraries permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3rd Party Libraries</h3>\n<p>Express.js가 웹 프레임웍의 척추라고 한다면 써드 파티 라이브러리는 <strong>나머지 빼대</strong>라고 볼 수 있습니다.</p>\n<p>핵심 기능 외에 로깅, 정적 파일 제공, 바디 데이터 파싱처럼 필요한 기능을 요구에 맞게 추가하거나 제거할 수 있지요.</p>\n<h3 id=\"business-logic\" style=\"position:relative;\"><a href=\"#business-logic\" aria-label=\"business logic permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Business Logic</h3>\n<p>마지막에 분류한 비지니스 로직이 서버의 <strong>서비스 역할</strong>이라고 볼 수 있습니다.</p>\n<p>모든 서버라고 다 같은 서비스를 제공하지는 않죠. 같은 커머스라도 배민은 배달음식을 야놀자는 숙박업소 정보를 제공하니깐요.\n커머스가 웹 프레임웍이라고 한다면 서비스에 해당하는 배달음식/숙박업소 정보는 비지니스 로직입니다.</p>\n<p>즉 하나의 서버 어플리케이션이 제공하는 서비스 특징을 반영하는 로직을 비지니스 로직이라고 합니다.\n이전 시간에 기존 코드를 Express.js 로 모두 교체했지만 유일하게 비지니스 로직만은 그대로 사용했던 것을 떠올려 보세요.</p>\n<h2 id=\"익스프레스-다시보기\" style=\"position:relative;\"><a href=\"#%EC%9D%B5%EC%8A%A4%ED%94%84%EB%A0%88%EC%8A%A4-%EB%8B%A4%EC%8B%9C%EB%B3%B4%EA%B8%B0\" aria-label=\"익스프레스 다시보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>익스프레스 다시보기</h2>\n<p>요청과 응답이라는 시선으로 우리 어플리케이션을 본다면 전 이렇게 그려 볼겁니다.</p>\n<p><img src=\"/assets/imgs/2018/12/17/struct_2.png\"></p>\n<p>서버 어플리케이션은 추가한 순서대로 미들웨어를 장착하고 있습니다. (왼쪽에서 오른쪽 순서)</p>\n<p>클라이언트로부터 index.html 다운로드 요청을 받는다면 어떻게 동작하까요?</p>\n<ul>\n<li>\n<p>가장 먼저 설정한 미들웨인 serve-static이 동작합니다</p>\n<ul>\n<li>정적파일을 찾으면 클라이언트에게 바로 응답하고 함수를 종료하겠죠.</li>\n<li>만약 파일을 찾지 못했다면 다음 미들웨어를 실행할 것이고요</li>\n</ul>\n</li>\n<li>body-parser와 mogran이 순서대로 실행되어 터미널에 요청 로그를 찍겠죠?</li>\n<li>apiPost.index와 apiPost.create 는 경로를 등록했기 때문에 주소를 비교할 거에요. 일치 하지 않으니깐 다음 미들웨어를 찾을겁니다</li>\n<li>그것이 바로 error404 미들웨어입니다. 여기까지 왔다는 것은 요청한 서버자원이 없다는 의미이므로 Not Found 반환하게 됩니다.</li>\n</ul>\n<p>포스트 조회 API는 어떤 순서로 동작할까요? 이건 여러분의 숙제로 남겨 두겠습니다. 😛</p>\n<h2 id=\"향후-학습-방향은\" style=\"position:relative;\"><a href=\"#%ED%96%A5%ED%9B%84-%ED%95%99%EC%8A%B5-%EB%B0%A9%ED%96%A5%EC%9D%80\" aria-label=\"향후 학습 방향은 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>향후 학습 방향은?</h2>\n<p>자, 이렇게 해서 익스프레스의 기본 지식을 함께 공부해 보았습니다.\n말 그대로 정말 기본만 다룬 것이구요, 앞으로 학습해야할 것이 많습니다.</p>\n<p>지금은 메모리에 있는 변수를 데이터베이스처럼 이용했지만 실제 서비스에서는 DBMS를 함께 사용해야합니다.\nmysql, mongodb, redis 등 데이터 저장방식에 따라 다양한 디비가 있습니다.\n각각 기본 지식과 사용법 정도는 숙지하는게 좋습니다. 물론 노드JS용 드라이버를 이용해서 말이죠.</p>\n<p>대부분의 서비스에서는 로그인/로그아웃 기능을 필요로합니다.\n전통적인 세션/쿠키 방식의 인증 뿐만아니라 API에서 많이 다루는 토큰 방식 인증(JWT)에 대해서도\n학습하시는 것을 권해 드립니다.</p>\n<p>만약 웹 어플리케이션 개발이라고 한다면 템플릿 엔진을 사용하는게 좋습니다.\n이를 이용하면 서버 데이터를 HTML로 손쉽게 변환할 수 있기 때문이죠.\n인기있는 템플릿 엔진이 pug와 ejs입니다.</p>\n<p>여기까지 함께하시느라 고생하셨습니다. 😍</p>\n<p><a href=\"/series/2018/12/01/node-web-0_index.html\">목차 바로가기</a></p>","fields":{"date":"2018년 12월 17일","slug":"/series/2018/12/17/node-web-18_summary.html","beforeGatsby":true},"frontmatter":{"title":"[Node.js코드랩] 18. 마무리","tags":["lecture"],"seriesId":20181201,"videoId":null},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EA%B5%AC%EC%84%B1%EB%8F%84-%EB%8B%A4%EC%8B%9C%EB%B3%B4%EA%B8%B0\">구성도 다시보기</a></p>\n<ul>\n<li><a href=\"#boostrap\">Boostrap</a></li>\n<li><a href=\"#expressjs\">Express.js</a></li>\n<li><a href=\"#3rd-party-libraries\">3rd Party Libraries</a></li>\n<li><a href=\"#business-logic\">Business Logic</a></li>\n</ul>\n</li>\n<li><a href=\"#%EC%9D%B5%EC%8A%A4%ED%94%84%EB%A0%88%EC%8A%A4-%EB%8B%A4%EC%8B%9C%EB%B3%B4%EA%B8%B0\">익스프레스 다시보기</a></li>\n<li><a href=\"#%ED%96%A5%ED%9B%84-%ED%95%99%EC%8A%B5-%EB%B0%A9%ED%96%A5%EC%9D%80\">향후 학습 방향은?</a></li>\n</ul>"},"allMarkdownRemark":{"edges":[{"node":{"id":"6cafd8ff-7703-5f19-8226-b580ccd28415","fields":{"slug":"/series/2018/12/01/node-web-0_index.html","date":"2018-12-01T00:00:00.000Z"},"frontmatter":{"title":"🌳[Node.js 코드랩] 소개 및 목차","seriesId":20181201}}},{"node":{"id":"55a324e0-6e38-5ec8-a3e7-029e4563c485","fields":{"slug":"/series/2018/12/01/node-web-1_orientation.html","date":"2018-12-01T00:00:00.000Z"},"frontmatter":{"title":"[Node.js 코드랩] 1.오리엔테이션","seriesId":20181201}}},{"node":{"id":"47ab845e-b020-5d91-b8d6-8cf021dea527","fields":{"slug":"/series/2018/12/02/node-web-2_http.html","date":"2018-12-02T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 2.기본 모듈 http","seriesId":20181201}}},{"node":{"id":"707f5850-7ad4-5a1f-9899-05a7a8a8a204","fields":{"slug":"/series/2018/12/03/node-web-3_refactoring.html","date":"2018-12-03T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 3.리팩토링","seriesId":20181201}}},{"node":{"id":"57ecb32c-ad9a-50eb-8da4-40aea81b3d6a","fields":{"slug":"/series/2018/12/04/node-web-4_application.html","date":"2018-12-04T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 4.어플리케이션","seriesId":20181201}}},{"node":{"id":"d6ffc7a9-84a8-5eed-9c44-6b50f18e6db0","fields":{"slug":"/series/2018/12/05/node-web-5_debug.html","date":"2018-12-05T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 5.커스텀 모듈 Debug","seriesId":20181201}}},{"node":{"id":"fceb13af-7b53-5444-9c6d-709d8ce0ef6f","fields":{"slug":"/series/2018/12/06/node-web-6_static-files.html","date":"2018-12-06T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 6.정적 파일","seriesId":20181201}}},{"node":{"id":"a5adc762-1163-5eac-b3f8-d4813d631cf0","fields":{"slug":"/series/2018/12/07/node-web-7_serve-static.html","date":"2018-12-07T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 7.커스텀 모듈 serve-static","seriesId":20181201}}},{"node":{"id":"bfed004c-9909-5b65-a1fb-f8ca988e3b3c","fields":{"slug":"/series/2018/12/08/node-web-8_middleware.html","date":"2018-12-08T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 8.미들웨어","seriesId":20181201}}},{"node":{"id":"98a0d5ee-52a1-526a-80c5-8a22f42b6b13","fields":{"slug":"/series/2018/12/09/node-web-9_middleware2.html","date":"2018-12-09T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 9.미들웨어 활용","seriesId":20181201}}},{"node":{"id":"40e9aef7-0d57-5a89-8789-05b993261b16","fields":{"slug":"/series/2018/12/10/node-web-10_logger.html","date":"2018-12-10T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 10.커스텀 모듈 logger","seriesId":20181201}}},{"node":{"id":"3b588f16-6a2f-53ec-a65a-1ac8141ab57a","fields":{"slug":"/series/2018/12/11/node-web-11_router-use.html","date":"2018-12-11T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 11.라우터 use","seriesId":20181201}}},{"node":{"id":"67ed027c-8cb2-5f39-93a9-7fc73c0c74cd","fields":{"slug":"/series/2018/12/12/node-web-12_get-posts-api.html","date":"2018-12-12T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 12.포스트 조회 API","seriesId":20181201}}},{"node":{"id":"91bc8106-6f39-5b71-a248-6e077a8dc7f1","fields":{"slug":"/series/2018/12/13/node-web-13_res.html","date":"2018-12-13T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 13. 응답 객체","seriesId":20181201}}},{"node":{"id":"d4c424e7-2912-5926-b912-6ff5c0de4b3f","fields":{"slug":"/series/2018/12/14/node-web-14_req.html","date":"2018-12-14T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 14. 요청 객체","seriesId":20181201}}},{"node":{"id":"963f5cd1-3036-5f23-a6d7-01ec8bde0d36","fields":{"slug":"/series/2018/12/15/node-web-15_get_post.html","date":"2018-12-15T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 15.라우터 Get, Post","seriesId":20181201}}},{"node":{"id":"f4685d82-22b5-501e-a437-f35a01968b47","fields":{"slug":"/series/2018/12/16/node-web-16_body-parser.html","date":"2018-12-16T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 16. body-parser","seriesId":20181201}}},{"node":{"id":"6ecbe281-b86d-5e09-b9e5-b090c3b46a7c","fields":{"slug":"/series/2018/12/17/node-web-17_expressjs.html","date":"2018-12-17T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 17. Express.js","seriesId":20181201}}},{"node":{"id":"5040db68-cb25-5e8f-b8fe-92e41bc664ab","fields":{"slug":"/series/2018/12/17/node-web-18_summary.html","date":"2018-12-17T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 18. 마무리","seriesId":20181201}}}]}},"pageContext":{"slug":"/series/2018/12/17/node-web-18_summary.html","date":"2018-12-17T00:00:00.000Z","seriesId":20181201,"previous":{"fields":{"slug":"/2018/11/08/remote-work.html","date":"2018-11-08T00:00:00.000Z","beforeGatsby":true},"frontmatter":{"title":"비오는 날, 집에서 일하기 좋은 날씨다","category":"think","permalink":"2018/11/08/remote-work.html","seriesId":null}},"next":{"fields":{"slug":"/series/2018/12/17/node-web-17_expressjs.html","date":"2018-12-17T00:00:00.000Z","beforeGatsby":true},"frontmatter":{"title":"[Node.js코드랩] 17. Express.js","category":"series","permalink":null,"seriesId":20181201}}}}}