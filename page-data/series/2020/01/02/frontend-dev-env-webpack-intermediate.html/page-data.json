{"componentChunkName":"component---src-templates-blog-post-blog-post-tsx","path":"/series/2020/01/02/frontend-dev-env-webpack-intermediate.html","result":{"data":{"site":{"siteMetadata":{"title":"김정환 블로그","url":"https://jeonghwan-kim.github.io"}},"markdownRemark":{"id":"b4f4ac66-88f6-5d5b-a353-f9258058a94c","excerpt":"이전글 웹팩(기본편)에서는 웹팩의 개념과 간단한 사용법에 대해 살펴보았다.\n웹팩은 프론트엔드 개발 서버를 제공하고, 몇 가지 방법으로 빌드 결과를 최적화 할 수 있는데 이번 글에서 자세히 살펴 보겠다. 1. 웹팩 개발 서버 1.…","html":"<p>이전글 <a href=\"/series/2019/12/10/frontend-dev-env-webpack-basic.html\">웹팩(기본편)</a>에서는 웹팩의 개념과 간단한 사용법에 대해 살펴보았다.\n웹팩은 프론트엔드 개발 서버를 제공하고, 몇 가지 방법으로 빌드 결과를 최적화 할 수 있는데 이번 글에서 자세히 살펴 보겠다.</p>\n<h2 id=\"1-웹팩-개발-서버\" style=\"position:relative;\"><a href=\"#1-%EC%9B%B9%ED%8C%A9-%EA%B0%9C%EB%B0%9C-%EC%84%9C%EB%B2%84\" aria-label=\"1 웹팩 개발 서버 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 웹팩 개발 서버</h2>\n<h3 id=\"11-배경\" style=\"position:relative;\"><a href=\"#11-%EB%B0%B0%EA%B2%BD\" aria-label=\"11 배경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1 배경</h3>\n<p>지금까지는 브라우져에 파일을 직접 로딩해서 결과물을 확인했다.\n인터넷에 웹사이트를 게시하려면 서버 프로그램으로 이 파일을 읽고 요청한 클라이언트에게 제공해야 한다.</p>\n<p>개발환경에서도 이와 유사한 환경을 갖추는 것이 좋다.\n운영환경과 맞춤으로써 배포시 잠재적 문제를 미리 확인할 수 있다.\n게다가 ajax 방식의 api 연동은 cors 정책 때문에 반드시 서버가 필요하다.</p>\n<p>프론트엔드 개발환경에서 이러한 개발용 서버를 제공해 주는 것이 <a href=\"https://webpack.js.org/configuration/dev-server/\">webpack-dev-server</a>다.</p>\n<h3 id=\"12-설치-및-사용\" style=\"position:relative;\"><a href=\"#12-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%82%AC%EC%9A%A9\" aria-label=\"12 설치 및 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.2 설치 및 사용</h3>\n<p>먼저 webpack-dev-server 패키지를 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm i -D webpack-dev-server</code></pre></div>\n<p>node_modules/.bin에 있는 webpack-dev-servr 명령어를 바로 실행해도 되지만 npm 스크립트로 등록해서 사용하겠다.</p>\n<p>package.json:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack-dev-server\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>npm start 명령어로 실행하면 다음과 같이 서버가 구동되었다는 메시지를 확인할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> start\n\n<span class=\"token operator\">></span> webpack-dev-server\n\nℹ ｢wds｣: Project is running at http://localhost:8080/\nℹ ｢wds｣: webpack output is served from /\nℹ ｢wds｣: Content not from webpack is served from</code></pre></div>\n<p>로컬 호스트의 8080 포트에 서버가 구동되어서 접속을 대기하고 있다.\n웹팩 아웃풋인 dist 폴더는 루트 경로를 통해 접속할 수 있다.</p>\n<p>브라우져 주소창에 <a href=\"http://localhost:8080\">http://localhost:8080</a> 으로 접속해 보면 결과물을 확인할 수 있다.</p>\n<p>소스 코드를 수정하고 저장해 보자.\n웹팩 서버는 파일 변화를 감지하면 웹팩 빌드를 다시 수행하고 브라우져를 리프레시하여 변경된 결과물을 보여준다.</p>\n<p><img src=\"/assets/imgs/2019/12/28/webpack-dev-server-run.gif\" alt=\"webpack-dev-server-run\"></p>\n<p>이것만으로도 개발 환경이 무척 편리해졌다.\n코드를 수정할때마다 저장하고 브라우져 갱신 버튼을 클릭하는 것은 무척 지난한 일인데 말이다.</p>\n<h3 id=\"13-기본-설정\" style=\"position:relative;\"><a href=\"#13-%EA%B8%B0%EB%B3%B8-%EC%84%A4%EC%A0%95\" aria-label=\"13 기본 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.3 기본 설정</h3>\n<p>웹팩 설정 파일의 devServer 객체에 개발 서버 옵션을 설정할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js:</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  devServer<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    contentBase<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"dist\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    publicPath<span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span>\n    host<span class=\"token operator\">:</span> <span class=\"token string\">\"dev.domain.com\"</span><span class=\"token punctuation\">,</span>\n    overlay<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    port<span class=\"token operator\">:</span> <span class=\"token number\">8081</span><span class=\"token punctuation\">,</span>\n    stats<span class=\"token operator\">:</span> <span class=\"token string\">\"errors-only\"</span><span class=\"token punctuation\">,</span>\n    historyApiFallback<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>contentBase</strong>: 정적파일을 제공할 경로. 기본값은 웹팩 아웃풋이다.</p>\n<p><strong>publicPath</strong>: 브라우져를 통해 접근하는 경로. 기본값은 '/' 이다.</p>\n<p><strong>host</strong>: 개발환경에서 도메인을 맞추어야 하는 상황에서 사용한다.\n예를들어 쿠기 기반의 인증은 인증 서버와 동일한 도메인으로 개발환경을 맞추어야 한다.\n운영체제의 호스트 파일에 해당 도메인과 127.0.0.1 연결한 추가한 뒤 host 속성에 도메인을 설정해서 사용한다.</p>\n<p><strong>overlay</strong>: 빌드시 에러나 경고를 브라우져 화면에 표시한다.</p>\n<p><strong>port</strong>: 개발 서버 포트 번호를 설정한다. 기본값은 8080.</p>\n<p><strong>stats</strong>: 메시지 수준을 정할수 있다.\n'none', 'errors-only', 'minimal', 'normal', 'verbose' 로 메세지 수준을 조절한다.</p>\n<p><strong>historyApiFallBack</strong>: 히스토리 API를 사용하는 SPA 개발시 설정한다.\n404가 발생하면 index.html로 리다이렉트한다.</p>\n<p>이 외에도 개발 서버를 실행할때 명령어 인자로 <code class=\"language-text\">--progress</code>를 추가하면 빌드 진행율을 보여준다. 빌드 시간이 길어질 경우 사용하면 좋다.</p>\n<p>메세지 출력 옵션만 설정한 뒤,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js:</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  devServer<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    overlay<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    stats<span class=\"token operator\">:</span> <span class=\"token string\">'errors-only'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>npm 스크립트를 수정해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack-dev-server --progress\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>빌드하면 아래와 같이 출력 메세지를 조절할 수 있다.</p>\n<p><img src=\"/assets/imgs/2019/12/28/webpack-dev-server-run-2.gif\" alt=\"webpack-dev-server-run-2\"></p>\n<p>이외에도 다양한 옵션은 <a href=\"https://webpack.js.org/configuration/dev-server/\">여기</a>를 참고하자.</p>\n<h2 id=\"2-api-연동\" style=\"position:relative;\"><a href=\"#2-api-%EC%97%B0%EB%8F%99\" aria-label=\"2 api 연동 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. API 연동</h2>\n<p>프론트엔드에서는 서버와 데이터 주고 받기 위해 ajax를 사용한다.\n보통은 api 서버를 어딘가에 띄우고(혹은 로컬호스트에 띄우고) 프론트 서버와 함께 개발한다.\n개발 환경에서 이러한 api 서버 구성을 어떻게 하는지 알아 보자.</p>\n<h3 id=\"21-목업-api-1-devserverbefore\" style=\"position:relative;\"><a href=\"#21-%EB%AA%A9%EC%97%85-api-1-devserverbefore\" aria-label=\"21 목업 api 1 devserverbefore permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1 목업 API 1: devServer.before</h3>\n<p>웹팩 개발 서버 설정 중 <a href=\"https://webpack.js.org/configuration/dev-server/#devserverbefore\">before</a> 속성은 웹팩 서버에 기능을 추가할 수 있는 여지를 제공한다.\n이것을 이해하려면 노드 Express.js에 사전지식이 있으면 유리한데,\n간단히 말하면 익스프레스는 미들웨어 형태로 서버 기능을 확장할 수 있는 웹프레임웍이다.\ndevServer.before에 추가하는 것이 바로 미들웨어인 셈이다.\n아래 코드를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  devServer<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">before</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">app<span class=\"token punctuation\">,</span> server<span class=\"token punctuation\">,</span> compiler</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/keywords'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span> keyword<span class=\"token operator\">:</span> <span class=\"token string\">'이탈리아'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> keyword<span class=\"token operator\">:</span> <span class=\"token string\">'세프의요리'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> keyword<span class=\"token operator\">:</span> <span class=\"token string\">'제철'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> keyword<span class=\"token operator\">:</span> <span class=\"token string\">'홈파티'</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>before에 설정한 미들웨어는 익스프레스에 의해서 app 객체가 인자로 전달되는데 Express 인스턴스다.\n이 객체에 라우트 컨트롤러를 추가할 수 있는데 app.get(url, controller) 형태로 함수를 작성한다.\n컨트롤러에서는 요청 req과 응답 res 객체를 받는데 여기서는 res.json() 함수로 응답하는 코드를 만들었다.</p>\n<p>웹팩 개발 서버는 GET /api/keywords 요청시 4개의 엔트리를 담은 배열을 반환할 것이다.\n서버를 다시 구동하고 curl로 http 요청을 보내보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">curl</span> localhost:8080/api/keywords\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"keyword\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"이탈리아\"</span><span class=\"token punctuation\">}</span>,<span class=\"token punctuation\">{</span><span class=\"token string\">\"keyword\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"세프의요리\"</span><span class=\"token punctuation\">}</span>,<span class=\"token punctuation\">{</span><span class=\"token string\">\"keyword\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"제철\"</span><span class=\"token punctuation\">}</span>,<span class=\"token punctuation\">{</span><span class=\"token string\">\"keyword\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"홈파티\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>이런 기능이 왜 필요할까?\n개발 초기 서버 api가 만들어지기 전, 서버 api 응답을 프론트엔드에서 추가할 때 사용할 수 있다.\n익스프레스 사전 지식이 있다면 여기에 다양한 서버 응답을 구현할 수 있다.</p>\n<p>프론트 코드를 수정해서 방금 만든 엔드폰인트를 호출하는 코드로 변경해 보자.\najax 라이브러리인 axios를 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> i axios</code></pre></div>\n<p>프론트엔드의 model.js 코드를 다음과 같이 수정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// src/model.js:</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n\n<span class=\"token comment\">// const data = [</span>\n<span class=\"token comment\">//   {keyword: '이탈리아'},</span>\n<span class=\"token comment\">//   {keyword: '세프의요리'},</span>\n<span class=\"token comment\">//   {keyword: '제철'},</span>\n<span class=\"token comment\">//   {keyword: '홈파티'},</span>\n<span class=\"token comment\">// ]</span>\n\n<span class=\"token keyword\">const</span> model <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// return data</span>\n\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/keywords'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> model<span class=\"token punctuation\">;</span></code></pre></div>\n<p>기존에는 data에 데이터를 관리했는데 이제는 ajax 호출 후 응답된 데이터를 반환하도록 변경했다.\n화면을 확인해 보면 웹펙에서 설정한 api 응답이 화면에 나오는걸 확인할 수 있다.</p>\n<p><img src=\"/assets/imgs/2019/12/28/before.jpg\" alt=\"캡처\"></p>\n<h3 id=\"22-목업-api-2-connect-api-mocker\" style=\"position:relative;\"><a href=\"#22-%EB%AA%A9%EC%97%85-api-2-connect-api-mocker\" aria-label=\"22 목업 api 2 connect api mocker permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2 목업 API 2: connect-api-mocker</h3>\n<p>목업 api 작업이 많을때는 <a href=\"https://github.com/muratcorlu/connect-api-mocker\">connect-api-mocker</a> 패키지의 도움을 받자.\n특정 목업 폴더를 만들어 api 응답을 담은 파일을 저장한 뒤, 이 폴더를 api로 제공해 주는 기능을 한다.</p>\n<p>먼저 이 패키지를 설치하고,</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm i -D connect-api-mocker</code></pre></div>\n<p>mocks/api/keywords/GET.json 경로에 API 응답 파일을 만든다.</p>\n<p>GET 메소드를 사용하기때문에 GET.json으로 파일을 만들었다(물론 POST, PUT, DELETE 도 지원).</p>\n<p>GET.json:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token property\">\"keyword\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"이탈리아\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token property\">\"keyword\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"세프의요리\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token property\">\"keyword\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"제철\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token property\">\"keyword\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"홈파티 \"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>기존에 설정한 목업 응답 컨트롤러를 제거하고 connect-api-mocker로 미들웨어를 대신한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js:</span>\n<span class=\"token keyword\">const</span> apiMocker <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connect-api-mocker'</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  devServer<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">before</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">app<span class=\"token punctuation\">,</span> server<span class=\"token punctuation\">,</span> compiler</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">apiMocker</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mocks/api'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>익스프레스 객체인 app은 get() 메소드 뿐만 아니라 미들웨어 추가를 위한 범용 메소드 use()를 제공하는데,\n이를 이용해 목업 미들웨어를 추가했다.\n첫번째 인자는 설정할 라우팅 경로인데 /api로 들어온 요청에 대해 처리하겠다는 의미다.\n두번째 인자는 응답으로 제공할 목업 파일 경로인데 방금 만든 mocks/api 경로를 전달했다.</p>\n<p>목업 API 갯수가 많다면 직접 컨트롤러를 작성하는 것 보다 목업 파일로 관리하는 것을 추천한다.</p>\n<h3 id=\"23-실제-api-연동-devserverproxy\" style=\"position:relative;\"><a href=\"#23-%EC%8B%A4%EC%A0%9C-api-%EC%97%B0%EB%8F%99-devserverproxy\" aria-label=\"23 실제 api 연동 devserverproxy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.3 실제 API 연동: devServer.proxy</h3>\n<p>이번에는 api 서버를 로컬환경에서 띄운 다음 목업이 아닌 이 서버에 직접 api 요청을 해보자.\n로컬호스트 8081 포트에 아래와 같이 서버가 구성되었다고 가정하겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">curl</span> localhost:8081/api/keywords\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"keyword\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"이탈리아\"</span><span class=\"token punctuation\">}</span>,<span class=\"token punctuation\">{</span><span class=\"token string\">\"keyword\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"세프의요리\"</span><span class=\"token punctuation\">}</span>,<span class=\"token punctuation\">{</span><span class=\"token string\">\"keyword\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"제철\"</span><span class=\"token punctuation\">}</span>,<span class=\"token punctuation\">{</span><span class=\"token string\">\"keyword\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"홈파티\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>ajax 요청 부분의 코드를 변경한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// src/model.js</span>\n<span class=\"token keyword\">const</span> model <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// const result = await axios.get('/api/keywords');</span>\n\n    <span class=\"token comment\">// 직접 api 서버로 요청한다.</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:8081/api/keywords'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>웹팩 개발서버를 띄우고 화면을 확인해 보자. 잘 나오는가?\n브라우져 개발자 도구에 보면 다음과 같은 오류 메세지가 출력된다.</p>\n<p><img src=\"/assets/imgs/2019/12/28/cors.jpg\" alt=\"cors 오류\"></p>\n<p>localhost:8080에서 localhost:8081 로 ajax 호출을 하지 못하는데 이유는 CORS 정책 때문이라는 메세지다.\n요청하는 리소스에 \"Access-Control-Allow-Origin\" 헤더가 없다는 말도 한다.</p>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/HTTP/Access_control_CORS%EC%9D%B4%EB%9E%80\">CORS(Cross Origin Resource Shaing)</a> 브라우져와 서버간의 보안상의 정책인데 브라우저가 최초로 접속한 서버에서만 ajax 요청을 할 수 있다는 내용이다.\n방금같은 경우는 localhost로 같은 도메인이지만 포트번호가 8080, 8081로 달라서 다른 서버로 인식하는 것이다.</p>\n<p>해결하는 방법은 두 가지인데 먼저 서버측 솔루션 부터 보자.\n해당 api 응답 헤더에 \"Access-Control-Allow-Origiin: *\" 헤더를 추가한 뒤 응답하면, 브라우져에서 응답 데이터를 받을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// server/index.js</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/keywords'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Access-Control-Allow-Origin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 헤더를 추가한다</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>keywords<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>한편 프론트엔드 측 해결방법을 보자. 서버 응답 헤더를 추가할 필요없이 웹팩 개발 서버에서 api 서버로 <strong>프록싱</strong>하는 것이다.\n웹팩 개발 서버는 <a href=\"https://webpack.js.org/configuration/dev-server/#devserverproxy\">proxy</a> 속성으로 이를 지원한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  devServer<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    proxy<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'/api'</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://localhost:8081'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 프록시</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>개발서버에 들어온 모든 http 요청중 /api로 시작되는것은 <a href=\"http://localhost:8081%EB%A1%9C\">http://localhost:8081로</a> 요청하는 설정이다.\napi 호출코드를 다시 복구한 뒤,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// src/model.js</span>\n<span class=\"token keyword\">const</span> model <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// const { data } = await axios.get('http://localhost:8081/api/keywords');</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/keywords'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>확인해보면 정상 동작하는 것을 확인할 수 있다.</p>\n<h2 id=\"3-핫-모듈-리플레이스먼트\" style=\"position:relative;\"><a href=\"#3-%ED%95%AB-%EB%AA%A8%EB%93%88-%EB%A6%AC%ED%94%8C%EB%A0%88%EC%9D%B4%EC%8A%A4%EB%A8%BC%ED%8A%B8\" aria-label=\"3 핫 모듈 리플레이스먼트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 핫 모듈 리플레이스먼트</h2>\n<h3 id=\"31-배경\" style=\"position:relative;\"><a href=\"#31-%EB%B0%B0%EA%B2%BD\" aria-label=\"31 배경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1 배경</h3>\n<p>웹팩 개발서버는 코드의 변화를 감지해서 전체 화면을 갱신하기 때문에 개발 속도를 높일 수 있다.\n하지만 어떤 상황에서는 전체 화면을 갱신하는 것이 좀 불편한 경우도 있다.\n싱글페이지어플리케이션은 브라우져에서 데이터를 들고 있기 때문에 리프레시 후에 모든 데이터가 초기화 되어 버리기 때문이다.\n다른 부분을 수정했는데 입력한 폼 데이터가 날아가 버리는 경우도 있고 말이다.</p>\n<p>전체 화면 갱신 하지 않고 변경한 모듈만 바꿔치기 한다면 어떨까?\n<strong>핫 모듈 리플레이스먼트</strong>는 이러한 목적으로 제공되는 웹팩 개발서버의 한 기능이다.</p>\n<h3 id=\"32-설정\" style=\"position:relative;\"><a href=\"#32-%EC%84%A4%EC%A0%95\" aria-label=\"32 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2 설정</h3>\n<p>설정은 간단하다. <a href=\"https://webpack.js.org/configuration/dev-server/#devserverhot\">devServer.hot</a> 속성을 켠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js:</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  devServer <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    hot<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>view.js를 사용하는 컨트롤러 코드를 잠깐 읽어보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// src/controller.js</span>\n<span class=\"token keyword\">import</span> model <span class=\"token keyword\">from</span> <span class=\"token string\">\"./model\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> view <span class=\"token keyword\">from</span> <span class=\"token string\">\"./view\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> controller <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el <span class=\"token operator\">=</span> el\n    view<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> model<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> controller<span class=\"token punctuation\">;</span></code></pre></div>\n<p>컨트롤러는 model과 view에 의존성이 있는데 이 둘을 이용해 데이터를 가져와 화면을 렌더한다.\n만약 view 모듈에 변화가 있을 경우 전체 화면을 갱신하지 않고 변경된 view 모듈만 다시 실행하는 것이 핫 모듈의 작동 방식이다.</p>\n<p>이 기능을 만들기 위해 컨트롤러 하단에 다음 코드를 추가해 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// src/controller.js</span>\n\n<span class=\"token comment\">// 중략</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> controller<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>hot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'핫모듈 켜짐'</span><span class=\"token punctuation\">)</span>\n\n  module<span class=\"token punctuation\">.</span>hot<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./view'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'view 모듈 변경됨'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>devServer.hot 옵션을 켜면 웹팩 개발 서버 위에서 module.hot 객체가 생성된다.\n이 객체의 accept() 메소드는 감시할 모듈과 콜백 함수를 인자로 받는다.\n위에서는 view.js 모듈을 감시하고 변경이 있으면 전달한 콜백 함수가 동작하도록 했다.</p>\n<p>웹팩 개발 서버를 재 시작하면 브라우져에 다음과 같이 로그가 찍힌다.</p>\n<p><img src=\"/assets/imgs/2019/12/28/hot1.jpg\" alt=\"핫 로딩 시작\"></p>\n<p>후에 view.js 파일을 수정하면 다음 로그가 찍히는 것을 확인할 수 있다.</p>\n<p><img src=\"/assets/imgs/2019/12/28/hot2.jpg\" alt=\"핫 로딩 변화 감지\"></p>\n<p>이 콜백 함수 안에서 변경된 view 모듈을 이용하면 view 모듈을 교체할 수 있을 것 같다.\nmodel로 데이터를 부르고 다시 변경된 view 모듈로 렌더 함수를 실행했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// src/controller.js</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>hot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  module<span class=\"token punctuation\">.</span>hot<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./view'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    view<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> model<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> controller<span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 변경된 모듈로 교체</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>view.js 코드를 변경하고 저장하면 브라우져 갱신 없이 화면이 변경된다.</p>\n<p><img src=\"/assets/imgs/2019/12/28/hot.gif\" alt=\"핫 모듈 리플레이스먼트\"></p>\n<h3 id=\"33-핫로딩을-지원하는-로더\" style=\"position:relative;\"><a href=\"#33-%ED%95%AB%EB%A1%9C%EB%94%A9%EC%9D%84-%EC%A7%80%EC%9B%90%ED%95%98%EB%8A%94-%EB%A1%9C%EB%8D%94\" aria-label=\"33 핫로딩을 지원하는 로더 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.3 핫로딩을 지원하는 로더</h3>\n<p>이러한 HMR 인터페이스를 구현한 로더만이 핫 로딩을 지원하는데 웹팩 기본편에서 보았던 style-loader가 그렇다.\n잠깐 코드를 보면 hot.accept() 함수를 사용한 것을 알 수 있다.</p>\n<p><img src=\"/assets/imgs/2019/12/28/style-loader.jpg\" alt=\"스타일 로더 코드\"></p>\n<p>참고: <a href=\"https://github.com/webpack-contrib/style-loader/blob/master/src/index.js#L34-L37\">style-loader 코드</a></p>\n<p>이 외에도 리액트를 지원하는 react-hot-loader, 파일을 지원하는 file-loader는 핫 모듈 리플레이스먼트를 지원하는데 <a href=\"https://webpack.js.org/guides/hot-module-replacement/#other-code-and-frameworks\">여기</a>를 참고하자.</p>\n<h2 id=\"4-최적화\" style=\"position:relative;\"><a href=\"#4-%EC%B5%9C%EC%A0%81%ED%99%94\" aria-label=\"4 최적화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 최적화</h2>\n<p>코드가 많아지면 번들링된 결과물도 커지기 마련이다.\n거의 메가바이트 단위로 커질수도 있는데 브라우져 성능에 영향을 줄 수 있다.\n파일을 다운로드하는데 시간이 많이 걸리기 때문이다.\n이번 섹션에서는 번들링한 결과물을 어떻게 최적화 할수 있는지 몇가지 방법에 대해 알아보겠다.</p>\n<h3 id=\"41-production-모드\" style=\"position:relative;\"><a href=\"#41-production-%EB%AA%A8%EB%93%9C\" aria-label=\"41 production 모드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.1 production 모드</h3>\n<p>웹팩에 내장되어 있는 최적화 방법중 <a href=\"https://webpack.js.org/configuration/mode/\">mode</a> 값을 설정하는 방식이 가장 기본이다.\n세 가지 값이 올 수 있는데 지금까지 설정한 \"development\"는 디버깅 편의를 위해 아래 두 개 플러그인을 사용한다.</p>\n<ul>\n<li>NamedChunksPlugin</li>\n<li>NamedModulesPlugin</li>\n</ul>\n<p>DefinePlugin을 사용한다면 process.env.NODE_ENV 값이 \"development\"로 설정되어 어플리케이션에 전역변수로 주입된다.</p>\n<p>반면 mode를 \"production\"으로 설정하면 자바스크립트 결과물을 최소화 하기 위해 다음 일곱 개 플러그인을 사용한다.</p>\n<ul>\n<li>FlagDependencyUsagePlugin</li>\n<li>FlagIncludedChunksPlugin</li>\n<li>ModuleConcatenationPlugin</li>\n<li>NoEmitOnErrorsPlugin</li>\n<li>OccurrenceOrderPlugin</li>\n<li>SideEffectsFlagPlugin</li>\n<li>TerserPlugin</li>\n</ul>\n<p>DefinePlugin을 사용한다면 process.env.NODE_ENV 값이 \"production\" 으로 설정되어 어플리케이션 전역변수로 들어간다.</p>\n<p>그럼 환경변수 NODE_ENV 값에 따라 모드를 설정하도록 웹팩 설정 코드를 다음과 같이 추가할 수 있겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js:</span>\n<span class=\"token keyword\">const</span> mode <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">||</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 기본값을 development로 설정</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  mode<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>빌드 시에 이를 운영 모드로 설정하여 실행하도록 npm 스크립트를 추가한다.</p>\n<p>package.json:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack-dev-server --progress\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NODE_ENV=production webpack --progress\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>start는 개발 서버를 구동하기 때문에 환경변수를 설정하지 않고 기본값 development를 사용할 것이다.\n배포용으로 만들 build는 환경변수를 production으로 설정했고 웹팩 mode에 설정된다.</p>\n<p>빌드한 뒤 결과물을 확인해 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> run build</code></pre></div>\n<p><img src=\"/assets/imgs/2019/12/28/compress-js.jpg\" alt=\"빌드 결과\"></p>\n<p>왼쪽에 development로 설정해서 빌드한 결과물과 비교해 보면 오른쪽에 production으로 빌드한 결과물의 확연한 차이를 볼 수 있다.</p>\n<h3 id=\"42-optimazation-속성으로-최적화\" style=\"position:relative;\"><a href=\"#42-optimazation-%EC%86%8D%EC%84%B1%EC%9C%BC%EB%A1%9C-%EC%B5%9C%EC%A0%81%ED%99%94\" aria-label=\"42 optimazation 속성으로 최적화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.2 optimazation 속성으로 최적화</h3>\n<p>빌드 과정을 커스터마지징할 수 있는 여지를 제공하는데 그것이 바로 <a href=\"https://webpack.js.org/configuration/optimization/\">optimazation</a> 속성이다.</p>\n<p>HtmlWebpackPlugin이 html 파일을 압축한것 처럼 css 파일도 빈칸을 없애는 압축을 하려면 어떻게 해야할까?\n<a href=\"https://webpack.js.org/plugins/mini-css-extract-plugin/#minimizing-for-production\">optimize-css-assets-webpack-plugin</a>이 바로 그것이다.</p>\n<p>플러그인을 다운로드 하고,</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm i -D optimize-css-assets-webpack-plugin</code></pre></div>\n<p>웹팩 설정을 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js:</span>\n<span class=\"token keyword\">const</span> OptimizeCSSAssetsPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'optimize-css-assets-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  optimization<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    minimizer<span class=\"token operator\">:</span> mode <span class=\"token operator\">===</span> <span class=\"token string\">'production'</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">OptimizeCSSAssetsPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://webpack.js.org/configuration/optimization/#optimizationminimizer\">optimization.minimizer</a>는 웹팩이 결과물을 압축할때 사용할 플러그인을 넣는 배열이다.\n설치한 OptimizeCSSAssetsPlugin을 전달해서 빌드 결과물중 css 파일을 압축하도록 했다.</p>\n<p>빌드하뒤 확인하면 css 파일도 압축되었다.</p>\n<p><img src=\"/assets/imgs/2019/12/28/compress-css.jpg\" alt=\"css 빌드 결과\"></p>\n<p><code class=\"language-text\">mode=production</code>일 경우 사용되는 <a href=\"https://webpack.js.org/plugins/terser-webpack-plugin/\">TerserWebpackPlugin</a>은 자바스크립트 코드를 난독화하고 debugger 구문을 제거한다.\n기본 설정 외에도 <a href=\"https://github.com/terser/terser#compress-options\">콘솔 로그를 제거하는 옵션</a>도 있는데 배포 버전에는 로그를 감추는 것이 좋을 수도 있기 때문이다.</p>\n<p>이 플러그인을 설치한 뒤,</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> i -D terser-webpack-plugin</code></pre></div>\n<p>optionmization.minimizer 배열에 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js:</span>\n<span class=\"token keyword\">const</span> TerserPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'terser-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  optimization<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    minimizer<span class=\"token operator\">:</span> mode <span class=\"token operator\">===</span> <span class=\"token string\">'production'</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">TerserPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        terserOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          compress<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            drop_console<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 콘솔 로그를 제거한다</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"43-코드-스플리팅\" style=\"position:relative;\"><a href=\"#43-%EC%BD%94%EB%93%9C-%EC%8A%A4%ED%94%8C%EB%A6%AC%ED%8C%85\" aria-label=\"43 코드 스플리팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.3 코드 스플리팅</h3>\n<p>코드를 압축하는 것 외에도 아예 결과물을 여러개로 쪼개면 좀 더 브라우져 다운로드 속도를 높일 수 있다.\n큰 파일 하나를 다운로드 하는것 보다 작은 파일 여러개를 동시에 다운로드하는 것이 더 빠르기 때문이다.</p>\n<p>가장 단순한 것은 엔트리를 여러개로 분리하는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  entry<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    main<span class=\"token operator\">:</span> <span class=\"token string\">\"./src/app.js\"</span><span class=\"token punctuation\">,</span>\n    controller<span class=\"token operator\">:</span> <span class=\"token string\">\"./src/controller.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>빌드하면 엔트리가 두 개 생성되고 물론 하나의 엔트이일 때보다 용량이 조금 줄었다.</p>\n<p><img src=\"/assets/imgs/2019/12/28/optimazation1.jpg\" alt=\"다중 엔트리\"></p>\n<p>모듈을 어떻게 분리하는냐에 따라 이 결과물의 크기를 조절할 수 있는데 지금은 거의 변화가 없다.\nHtmlWebpackPlugin에 의해 html 코드에소 두 파일을 로딩하는 코드도 추가된다.</p>\n<p>하지만 두 파일을 비교해 보면 중복코드가 있다.</p>\n<p><img src=\"/assets/imgs/2019/12/28/duplicate.jpg\" alt=\"중복\"></p>\n<p>axios 모듈인데 main, controller 둘 다 axios를 사용하기 때문이다.</p>\n<p><a href=\"https://webpack.js.org/guides/code-splitting/#prevent-duplication\">SplitChunksPlugin</a>은 코드를 분리할때 중복을 예방하는 플러그인이다.\noptization.splitChucks 속성을 설정하는 방식이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js:</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  optimization<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    splitChunks<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      chunks<span class=\"token operator\">:</span> <span class=\"token string\">'all'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다시 빌드해보자.</p>\n<p><img src=\"/assets/imgs/2019/12/28/optimazation2.jpg\" alt=\"청크 분리\"></p>\n<p>main.js, controller.js외에도 vendors~controller_main.js 파일도 생겼다.\n마지막 파일은 두 엔트리의 중복 코드를 담은 파일이다.\naxios로 검색하면 main.js와 controller.js에서는 없고 vendors~controller~main.js에만 있다.</p>\n<p>이런 방식은 엔트리 포인트를 적절히 분리해야기 때문에 손이 많이 가는 편이다.\n반면 자동으로 변경해 주는 방식이 있는데 이를 <strong>다이나믹 임포트</strong>라고 부른다.</p>\n<p>기존 컨트롤러 코드를 보면 이렇다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> controller <span class=\"token keyword\">from</span> <span class=\"token string\">'./controller'</span><span class=\"token punctuation\">;</span>\n\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DOMContentLoaded'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  controller<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>import/from으로 컨트롤러 모듈을 가져와서 사용했다.</p>\n<p>이를 동적으로 임포트하려면 다음처럼 변경한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* webpackChunkName: \"controller\" */</span> <span class=\"token string\">'./controller'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">m</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> m<span class=\"token punctuation\">.</span>default\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DOMContentLoaded'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">controller</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    controller<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>getController() 함수를 정의했는데 컨트롤러 모듈을 가져는 함수다.\nimport() 함수로 가져올 컨트롤러 모듈 경로를 전달하는데 주석으로 webpackHunkName: \"controller\"를 전달했다.\n이것은 웹펙이 이 파일을 처리할때 청크로 분리하는데 그 청그 이름을 설정한 것이다.</p>\n<p>그리고 나서 프라미스를 반환하는 getController() 함수로 모듈을 가져와 사용하였다.</p>\n<p>변경한 웹팩 설정 파일도 다시 복구해야 한다.\n엔트리 포인트를 다시 main만 남겨두고 optimization에 설정한 SplitChunksPlugin 옵션도 제거한다.</p>\n<p>빌드하면 자동으로 파일이 분리되었다.</p>\n<p><img src=\"/assets/imgs/2019/12/28/optimazation3.jpg\" alt=\"다이나믹 임포트\"></p>\n<p>엔트리를 분리하지 않아도 controller와 app의 중복코드를 vendors~controller.js 파일로 분리한다.\n다이나믹 임포트로 모듈을 가져오면 단일 엔트리를 유지하면서 코드를 분리할 수 있다.</p>\n<h3 id=\"44-externals\" style=\"position:relative;\"><a href=\"#44-externals\" aria-label=\"44 externals permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.4 externals</h3>\n<p>조금만 더 생각해 보면 최적화해 볼 수 있는 부분이 있다. 바로 axios같은 써드파티 라이브러리다.\n패키지로 제공될때 이미 빌드 과정을 거쳤기 때문에 빌드 프로세스에서 제외하는 것이 좋다.\n웹팩 설정중 <a href=\"https://webpack.js.org/configuration/externals/\">externals</a>가 바로 이러한 기능을 제공한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js:</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  externals<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    axios<span class=\"token operator\">:</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>externals에 추가하면 웹팩은 코드에서 axios를 사용하더라도 번들에 포함하지 않고 빌드한다.\n대신 이를 전역 변수로 접근하도록하는데 키로 설정한 axios가 그 이름이다.</p>\n<p><img src=\"/assets/imgs/2019/12/28/axios.jpg\" alt=\"axios 전역 이름\"></p>\n<p>axios는 이미 node_modules에 위치해 있기 때문에 이를 웹팩 아웃풋 폴더에 옮기고 index.html에서 로딩해야한다.\n파일을 복사하는 <a href=\"https://webpack.js.org/plugins/copy-webpack-plugin/\">CopyWebpackPlugin</a>을 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> i -D copy-webpack-plugin</code></pre></div>\n<p>플러그인을 사용해서 라이브러리를 복사한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> CopyPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'copy-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">CopyPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">from</span><span class=\"token operator\">:</span> <span class=\"token string\">'./node_modules/axios/dist/axios.min.js'</span><span class=\"token punctuation\">,</span>\n      to<span class=\"token operator\">:</span> <span class=\"token string\">'./axios.min.js'</span> <span class=\"token comment\">// 목적지 파일에 들어간다</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>마지막으로 index.html에서는 axios를 로딩하는 코드를 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- src/index.html --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>axios.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>axios는 이렇게 직접 추가했지만 번들링한 결과물은 htmlwebpacPlugin이 주입해 주는 것을 잊지말자.</p>\n<p>다시 빌드해 보면......</p>\n<p><img src=\"/assets/imgs/2019/12/28/optimazation4.jpg\" alt=\"externals\"></p>\n<p>axios는 빌드하지 않고 복사만 한다. controller와  main이 분리되었다.\n이전에는 공통의 코드인 axios가 vender~.js로 분리되었는데 지금은 파일조차 없다.\n만약 써드파티 라이브러리 외에 공통의 코드가 있다면 이 파일로 분리되었을 것이다.</p>\n<p>이렇게 써드파티 라이브러리를 externals로 분리하면 용량이 감소뿐만 아니라 빌드시간도 줄어들고 덩달아 개발 환경도 가벼워질 수 있다.</p>\n<h2 id=\"5-정리\" style=\"position:relative;\"><a href=\"#5-%EC%A0%95%EB%A6%AC\" aria-label=\"5 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 정리</h2>\n<p>웹팩 사용방법에 대해 좀더 알아 보았다.</p>\n<p>개발 서버를 띄워 파일 감지, api 서버 연동 등 개발 환경을 좀 더 편리하게 구성할 수 있었다.\n특히 핫 모듈 리플레이스먼트는 일부 모듈의 변경만 감지하여 페이지 갱신 없이 변경사항을 브라우져에 렌더링할 수 있다.</p>\n<p>웹팩 최적화 방법에 대해서도 알아보았다.\nmode 옵션을 production으로 설정하면 웹팩 내장 플러그인이 프로덕션 모드로 동작한다.\n번들링 결과물 크기가 커지면 브라우져에서 다운로딩하는 성능이 떨어질수 있는데 코드 스플리트 기법을 사용해서 해결할 수 있다.\n써드파티 라이브러리는 externals로 옮겨 빌드 과정에서 제외할수 있다.</p>","fields":{"dateStr":"2020년 01월 02일","date":"2020-01-02T00:00:00.000Z","slug":"/series/2020/01/02/frontend-dev-env-webpack-intermediate.html","beforeGatsby":true},"frontmatter":{"title":"프론트엔드 개발환경의 이해: 웹팩(심화)","tags":["webpack"],"seriesId":"46a6066f-809e-52ed-949b-553de74d1f3a","videoId":"59f0bdf2-e898-50db-8800-52a3fa758f04"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#1-%EC%9B%B9%ED%8C%A9-%EA%B0%9C%EB%B0%9C-%EC%84%9C%EB%B2%84\">1. 웹팩 개발 서버</a></p>\n<ul>\n<li><a href=\"#11-%EB%B0%B0%EA%B2%BD\">1.1 배경</a></li>\n<li><a href=\"#12-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%82%AC%EC%9A%A9\">1.2 설치 및 사용</a></li>\n<li><a href=\"#13-%EA%B8%B0%EB%B3%B8-%EC%84%A4%EC%A0%95\">1.3 기본 설정</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#2-api-%EC%97%B0%EB%8F%99\">2. API 연동</a></p>\n<ul>\n<li><a href=\"#21-%EB%AA%A9%EC%97%85-api-1-devserverbefore\">2.1 목업 API 1: devServer.before</a></li>\n<li><a href=\"#22-%EB%AA%A9%EC%97%85-api-2-connect-api-mocker\">2.2 목업 API 2: connect-api-mocker</a></li>\n<li><a href=\"#23-%EC%8B%A4%EC%A0%9C-api-%EC%97%B0%EB%8F%99-devserverproxy\">2.3 실제 API 연동: devServer.proxy</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#3-%ED%95%AB-%EB%AA%A8%EB%93%88-%EB%A6%AC%ED%94%8C%EB%A0%88%EC%9D%B4%EC%8A%A4%EB%A8%BC%ED%8A%B8\">3. 핫 모듈 리플레이스먼트</a></p>\n<ul>\n<li><a href=\"#31-%EB%B0%B0%EA%B2%BD\">3.1 배경</a></li>\n<li><a href=\"#32-%EC%84%A4%EC%A0%95\">3.2 설정</a></li>\n<li><a href=\"#33-%ED%95%AB%EB%A1%9C%EB%94%A9%EC%9D%84-%EC%A7%80%EC%9B%90%ED%95%98%EB%8A%94-%EB%A1%9C%EB%8D%94\">3.3 핫로딩을 지원하는 로더</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#4-%EC%B5%9C%EC%A0%81%ED%99%94\">4. 최적화</a></p>\n<ul>\n<li><a href=\"#41-production-%EB%AA%A8%EB%93%9C\">4.1 production 모드</a></li>\n<li><a href=\"#42-optimazation-%EC%86%8D%EC%84%B1%EC%9C%BC%EB%A1%9C-%EC%B5%9C%EC%A0%81%ED%99%94\">4.2 optimazation 속성으로 최적화</a></li>\n<li><a href=\"#43-%EC%BD%94%EB%93%9C-%EC%8A%A4%ED%94%8C%EB%A6%AC%ED%8C%85\">4.3 코드 스플리팅</a></li>\n<li><a href=\"#44-externals\">4.4 externals</a></li>\n</ul>\n</li>\n<li><a href=\"#5-%EC%A0%95%EB%A6%AC\">5. 정리</a></li>\n</ul>"},"series":{"id":"46a6066f-809e-52ed-949b-553de74d1f3a","title":"프론트엔드 개발환경의 이해"},"video":{"id":"59f0bdf2-e898-50db-8800-52a3fa758f04","title":"프론트엔드 개발환경의 이해와 실습","thumb":"https://cdn.inflearn.com/public/courses/324671/course_cover/638eee1a-6381-402d-a17b-3724751414f1/frontend-env-eng.png","url":"https://www.inflearn.com/course/프론트엔드-개발환경"},"allMarkdownRemark":{"nodes":[{"id":"e4135042-a89d-59ae-8a2a-a9af6b245c41","fields":{"slug":"/series/2019/12/09/frontend-dev-env-npm.html","date":"2019-12-09T00:00:00.000Z"},"frontmatter":{"title":"프론트엔드 개발환경의 이해: NPM","seriesId":"46a6066f-809e-52ed-949b-553de74d1f3a"}},{"id":"5d0b2d29-5875-5945-9cad-c1e7308cef69","fields":{"slug":"/series/2019/12/10/frontend-dev-env-webpack-basic.html","date":"2019-12-10T00:00:00.000Z"},"frontmatter":{"title":"프론트엔드 개발환경의 이해: 웹팩(기본)","seriesId":"46a6066f-809e-52ed-949b-553de74d1f3a"}},{"id":"80f2b4e1-8403-5729-9b4c-9cff739f0e4d","fields":{"slug":"/series/2019/12/22/frontend-dev-env-babel.html","date":"2019-12-22T00:00:00.000Z"},"frontmatter":{"title":"프론트엔드 개발환경의 이해: Babel","seriesId":"46a6066f-809e-52ed-949b-553de74d1f3a"}},{"id":"46a2b40e-c285-5478-93ba-6a0e407d9e79","fields":{"slug":"/series/2019/12/30/frontend-dev-env-lint.html","date":"2019-12-30T00:00:00.000Z"},"frontmatter":{"title":"프론트엔드 개발환경의 이해: 린트","seriesId":"46a6066f-809e-52ed-949b-553de74d1f3a"}},{"id":"b4f4ac66-88f6-5d5b-a353-f9258058a94c","fields":{"slug":"/series/2020/01/02/frontend-dev-env-webpack-intermediate.html","date":"2020-01-02T00:00:00.000Z"},"frontmatter":{"title":"프론트엔드 개발환경의 이해: 웹팩(심화)","seriesId":"46a6066f-809e-52ed-949b-553de74d1f3a"}}]}},"pageContext":{"slug":"/series/2020/01/02/frontend-dev-env-webpack-intermediate.html","date":"2020-01-02T00:00:00.000Z","seriesId":"46a6066f-809e-52ed-949b-553de74d1f3a","videoId":"59f0bdf2-e898-50db-8800-52a3fa758f04","previous":{"fields":{"slug":"/series/2019/12/30/frontend-dev-env-lint.html","date":"2019-12-30T00:00:00.000Z","beforeGatsby":true},"frontmatter":{"title":"프론트엔드 개발환경의 이해: 린트","category":"series","permalink":null,"seriesId":"46a6066f-809e-52ed-949b-553de74d1f3a","videoId":"59f0bdf2-e898-50db-8800-52a3fa758f04"}},"next":{"fields":{"slug":"/dev/2020/01/28/component-design.html","date":"2020-01-28T00:00:00.000Z","beforeGatsby":true},"frontmatter":{"title":"컴포넌트의 역할 분리","category":"dev","permalink":null,"seriesId":null,"videoId":null}}}}}