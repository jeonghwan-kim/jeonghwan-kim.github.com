{
    "componentChunkName": "component---src-templates-blog-post-index-tsx",
    "path": "/dev/2019/02/07/go-net-http.html",
    "result": {"data":{"site":{"siteMetadata":{"title":"김정환 블로그","url":"https://jeonghwan-kim.github.io"}},"markdownRemark":{"id":"5521c509-dfc2-579b-902c-a773f2000eef","html":"<p>웹 어플리케이션을 개발하려고 Go 언어를 살펴보기 시작했다.\n<a href=\"/tags#go\">앞서 정리한 몇 가지 기본 패키지</a>는 net/http 패키지를 사용하기 위한 준비 과정이라 생각하자.\n이번에는 네트웍 프로그래밍을 위한 net/http 패키지 사용법을 정리해 보겠다.</p>\n<h2 id=\"get-요청하기\" style=\"position:relative;\"><a href=\"#get-%EC%9A%94%EC%B2%AD%ED%95%98%EA%B8%B0\" aria-label=\"get 요청하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Get 요청하기</h2>\n<p>브라우져는 사용자가 입력한 url를 통해 해당 웹페이지를 요청한다.\n이처럼 웹상의 리소스를 요청하려면 패키지의 <strong>Get</strong> 함수를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>url <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>resp <span class=\"token operator\">*</span>Response<span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>요청 주소 url을 인자로 받아 Response를 반환하는 함수다.\n예제로 구글의 robots.txt 파일을 요청해서 응답 결과를 확인해겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">url <span class=\"token operator\">:=</span> <span class=\"token string\">\"https://google.com/robots.txt\"</span>\n\nresp<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\nrobots<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAll</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span>\nresp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> robots<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Get으로 요청하여 서버로 부터 응답을 받으면 데이터를 읽은 뒤 Close 함수로 바디를 닫아 주어야 한다.</p>\n<p>터미널에 출력하면 수신한 파일 내용을 확인할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">User-agent: *\nDisallow: /search\nAllow: /search/about\n// 생략</code></pre></div>\n<h2 id=\"client와-request로-요청-제어하기\" style=\"position:relative;\"><a href=\"#client%EC%99%80-request%EB%A1%9C-%EC%9A%94%EC%B2%AD-%EC%A0%9C%EC%96%B4%ED%95%98%EA%B8%B0\" aria-label=\"client와 request로 요청 제어하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Client와 Request로 요청 제어하기</h2>\n<p>Get 함수는 내부에서 <strong>Client</strong> 구조체를 사용하고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>url <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>resp <span class=\"token operator\">*</span>Response<span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> DefaultClient<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> DefaultClient <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>Client<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>요청에 대한 세부적인 제어를 하려면 Client를 하나 생성해야 한다.\n가령 자동으로 리다이렉트하는 서버일 경우 요청단에서 이를 차단하여 한 번만 요청할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">client <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>http<span class=\"token punctuation\">.</span>Client<span class=\"token punctuation\">{</span>\n  CheckRedirect<span class=\"token punctuation\">:</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>req <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">,</span> via <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"redirectPolicyFunc()\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> http<span class=\"token punctuation\">.</span>ErrUseLastResponse <span class=\"token comment\">// 자동 리다이렉트 하지 않음</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Client 생성시 CheckRedirect 훅에 리다이렉트 관련 동작을 정의했다.\nErrUseLastResponse 값을 리턴하면 리다이렉트를 처리할때 다음 요청을 보내지 않겠다는 의미다.</p>\n<p>더불어 <strong>Request</strong> 구조체도 필요한데 NewRequest 함수로 만들 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">NewRequest</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> url <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> body io<span class=\"token punctuation\">.</span>Reader<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Request<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>요청 메소드, 주소, 바디 데이터를 인자로 받아 Request를 생성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">req<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">NewRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://google.com/robots.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\nreq<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"set-cookie\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"foo=bar\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 헤더값 설정</span></code></pre></div>\n<p>반환된 Request는 헤더 정보를 담고있는 Header의 Add 메소드로 요청 헤더를 설정할 수 있다.</p>\n<p>이렇게 준비한 Client와 Request로 요청을 보내기 위해 Client의 Do 메소드를 사용하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Client<span class=\"token punctuation\">)</span> <span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>req <span class=\"token operator\">*</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Response<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이것은 응답 정보를 담은 Response를 반환하기 때문에 ReadAll 함수로 읽을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">resp<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span>\nrobots<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAll</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span>\nresp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> robots<span class=\"token punctuation\">)</span></code></pre></div>\n<p>서버를 구동한뒤 요청을 보내보면 리다이렉트 요청을 하지 않았기 때문에 다음과 같은 응답을 받게 될 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">redirectPolicyFunc()\n\n&lt;HTML>&lt;HEAD>&lt;meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\">\n&lt;TITLE>301 Moved&lt;/TITLE>&lt;/HEAD>&lt;BODY>\n&lt;H1>301 Moved&lt;/H1>\nThe document has moved\n&lt;A HREF=\"https://www.google.com/robots.txt\">here&lt;/A>.\n&lt;/BODY>&lt;/HTML></code></pre></div>\n<h2 id=\"서버-구현을-위한-handler\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%B2%84-%EA%B5%AC%ED%98%84%EC%9D%84-%EC%9C%84%ED%95%9C-handler\" aria-label=\"서버 구현을 위한 handler permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서버 구현을 위한 Handler</h2>\n<p>브라우져가 서버로 요청을 만들면 서버는 해당 요청을 처리하고 응답한다.\n이러한 요청/응답 패턴을 추상화한 것이 바로 <strong>Handler</strong> 인터페이스다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Handler <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">ServeHTTP</span><span class=\"token punctuation\">(</span>ResponseWriter<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>Request<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>웹 서버에서 \"핸들러\"라는 이름은 보통 라우팅할 때 경로에 따른 로직을 가리킬 때 사용한다.\nHandler 인터페이스도 마찬가지 역할을 하는데 ServeHTTP 메소드가 응답 헤더와 데이터를 ResponseWriter로 보내는 역할을 한다.</p>\n<h2 id=\"서버를-구동하는-listenandserve\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%B2%84%EB%A5%BC-%EA%B5%AC%EB%8F%99%ED%95%98%EB%8A%94-listenandserve\" aria-label=\"서버를 구동하는 listenandserve permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서버를 구동하는 ListenAndServe</h2>\n<p>Handler 인터페이스는 어디에서 사용할까? 가장 쉽게 발견할 수 있는 곳이 바로 서버를 구동하는 <strong>ListenAndServe</strong> 함수다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span>addr <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> handler Handler<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span></code></pre></div>\n<p>리슨할 주소 정보와 핸들러를 인자로 받아 서버를 요청대기상태로 만드는 일을하는 함수다.</p>\n<h2 id=\"정적-파일-서버를-만들수-있는-fileserve\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%A0%81-%ED%8C%8C%EC%9D%BC-%EC%84%9C%EB%B2%84%EB%A5%BC-%EB%A7%8C%EB%93%A4%EC%88%98-%EC%9E%88%EB%8A%94-fileserve\" aria-label=\"정적 파일 서버를 만들수 있는 fileserve permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정적 파일 서버를 만들수 있는 FileServe</h2>\n<p>그럼 Handler 구현체는 뭐가 있을까? 정적 파일을 호스팅하는 <strong>FileServer</strong> 함수가 이를 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">FileServer</span><span class=\"token punctuation\">(</span>root FileSystem<span class=\"token punctuation\">)</span> Handler</code></pre></div>\n<p>웹 프론트엔드 개발시 정적서버를 띄워서 작업하는 경우 파이썬의 SimpleHTTPServer 같은 프로그램을 사용해서 로컬 환경에 개발 서버를 띄운다.\nGo를 이용하면 이런 서버를 만드는데 한 줄이면 충분하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">http<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">,</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">FileServer</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span><span class=\"token function\">Dir</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./public\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>코드를 실행하면 서버가 구동될 것이다. 브라우져로 확인해 보면 public 폴더의 정적파일이 다운로드 되는것을 확인 할수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ tree ./\n./\n├── main.go\n└── public\n    ├── index.html\n    ├── script.js\n    └── style.css\n\n$ go run main.go</code></pre></div>\n<p>￼\n<img src=\"/assets/imgs/2019/02/07/static-file-server-test.jpg\" alt=\"정적파일 서버 테스트\"></p>\n<h2 id=\"핸들러를-등록하는-handle과-handlefunc\" style=\"position:relative;\"><a href=\"#%ED%95%B8%EB%93%A4%EB%9F%AC%EB%A5%BC-%EB%93%B1%EB%A1%9D%ED%95%98%EB%8A%94-handle%EA%B3%BC-handlefunc\" aria-label=\"핸들러를 등록하는 handle과 handlefunc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>핸들러를 등록하는 Handle과 HandleFunc</h2>\n<p>이번엔 다양한 핸들러를 등록해 보자. <strong>Handle</strong> 함수가 본격적으로 핸들러를 등록하는 함수다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span>pattern <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> handler Handler<span class=\"token punctuation\">)</span></code></pre></div>\n<p>url 패턴과 연결할 핸들러를 등록하는 방식이다. 이를 이용해 위에서 구현한 파일 서버를 만들어 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">http<span class=\"token punctuation\">.</span><span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">FileServer</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span><span class=\"token function\">Dir</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./public\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nhttp<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>핸들러 로직을 만들고 싶다면 <strong>HandlerFunc</strong>을 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span>pattern <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> handler <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>ResponseWriter<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>Request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>가령 \"/api\" url에 대한 핸들러 함수를 등록하고 싶다면 아래 코드로 시작할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">http<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 핸들러 로직을 작성한다.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nhttp<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"request로-요청-쿼리-접근하기\" style=\"position:relative;\"><a href=\"#request%EB%A1%9C-%EC%9A%94%EC%B2%AD-%EC%BF%BC%EB%A6%AC-%EC%A0%91%EA%B7%BC%ED%95%98%EA%B8%B0\" aria-label=\"request로 요청 쿼리 접근하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Request로 요청 쿼리 접근하기</h2>\n<p>핸들러 로직을 작성하려면 먼저 요청 정보에 접근할 수 있어야 할 것이다. <strong>Request</strong> 구조체는 요청 정보를 추상화한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Request <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  Method <span class=\"token builtin\">string</span>\n  URL    <span class=\"token operator\">*</span>url<span class=\"token punctuation\">.</span>URL\n  Header Header\n  Body   io<span class=\"token punctuation\">.</span>ReadCloser\n  Host   <span class=\"token builtin\">string</span>\n  Form   url<span class=\"token punctuation\">.</span>Values\n  <span class=\"token comment\">// 생략</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>쿼리 문자열은 URL을 통해 접근할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">http<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"URL: %#v\\n\\nQuery: %#v\\n\\nname: %s\\n\"</span><span class=\"token punctuation\">,</span>\n    r<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">,</span>\n    r<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span><span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    r<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span><span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nhttp<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>서버를 구동하고 요청을 보내 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ curl \"localhost:8080?name=Gopher\"</code></pre></div>\n<p>서버 로그에 다음과 같이 요청 정보가 출력된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">URL: &amp;url.URL{Scheme:\"\", Opaque:\"\", User:(*url.Userinfo)(nil), Host:\"\", Path:\"/\", RawPath:\"\", ForceQuery:false, RawQuery:\"name=Gopher\", Fragment:\"\"}\n\nQuery: url.Values{\"name\":[]string{\"Gopher\"}}\n\nname: Gopher</code></pre></div>\n<h2 id=\"responsewriter로-응답하기\" style=\"position:relative;\"><a href=\"#responsewriter%EB%A1%9C-%EC%9D%91%EB%8B%B5%ED%95%98%EA%B8%B0\" aria-label=\"responsewriter로 응답하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ResponseWriter로 응답하기</h2>\n<p>핸들러 함수 인자 중 <strong>ResponseWriter</strong>가 응답을 위한 구조체다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> ResponseWriter <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">Header</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> Header\n  <span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">WriteHeader</span><span class=\"token punctuation\">(</span>statusCode <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Write 메소드가 io.Writer 인터페이를 충족하기 때문에 fmt.Fprintf 함수로 출력을 보낼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>w io<span class=\"token punctuation\">.</span>Writer<span class=\"token punctuation\">,</span> format <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> a <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">http<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token string\">\"URL: %#v\\n\\nQuery: %#v\\n\\nname: %s\\n\"</span><span class=\"token punctuation\">,</span>\n    r<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">,</span>\n    r<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span><span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    r<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span><span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nhttp<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>서버를 구동하고 요청을 보내면 서버 터미널에 찍현던 로그가 응답 데이터로 전달된다.</p>\n<h2 id=\"요청-바디-처리\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%B2%AD-%EB%B0%94%EB%94%94-%EC%B2%98%EB%A6%AC\" aria-label=\"요청 바디 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요청 바디 처리</h2>\n<p>Request 구조체 안을 잘 살펴보면 io.ReadCloser 타입의 Body가 있는데 요청 바디 데이터를 담고 있는 녀석이다.\n이를 Go 구조체로 변경하기 위해서는 encoding/json 패키지를 같이 사용한다.</p>\n<p>먼저 요청 바디를 담을 User 구조체를 정의한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> User <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  Id <span class=\"token builtin\">int</span> <span class=\"token string\">`json:\"id\"`</span>\n  Name <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"name\"`</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그리고 핸들러에서 바디데이터를 디코딩한다. (encoding/json에 대한 설명은 <a href=\"/dev/2019/01/18/go-encoding-json.html\">Go encoding/json 패키지</a> 참고)</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">http<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> u User\n  json<span class=\"token punctuation\">.</span><span class=\"token function\">NewDecoder</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Decode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>u<span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%+v\"</span><span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nhttp<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>서버를 구동하고 요청 바디를 보내 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ curl \"localhost:8080\" -d '{\"id\":1,\"name\":\"Gopher\"}'</code></pre></div>\n<p>서버측 로그를 확인하면 다음과 같이 디코딩된 구조체가 출력된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{Id:1 Name:Gopher}</code></pre></div>\n<h2 id=\"json-데이터-응답하기\" style=\"position:relative;\"><a href=\"#json-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9D%91%EB%8B%B5%ED%95%98%EA%B8%B0\" aria-label=\"json 데이터 응답하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSON 데이터 응답하기</h2>\n<p>요청 바디 처리와 반대로 JSON 응답은 구조체를 JSON 형식의 문자열로 인코딩한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">http<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  u <span class=\"token operator\">:=</span> User<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Gopher\"</span><span class=\"token punctuation\">}</span>\n  enc <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">NewEncoder</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span>\n\n  w<span class=\"token punctuation\">.</span><span class=\"token function\">Header</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">)</span>\n\n  enc<span class=\"token punctuation\">.</span><span class=\"token function\">Encode</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nhttp<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>먼저 User 값을 담은 u를 만든다.\nNewEncoder를 만들때 io.Writer를 충족하는 ResponseWriter를 인자로 전달해서 엔코더 enc를 만들 수 있다.</p>\n<p>ResponseWriter의 Header() 함수는 Header를 반환하는데 Set() 메소드로 헤더 값을 설정할 수 있다.\nContent-Type을 \"application/json\"으로 설정하여 JSON 응답임을 알린다.</p>\n<p>마지막으로 User 값 u를 인코딩하여 보내준다.</p>\n<p>서버를 구동하고 요청을 보내면 다음과 같이 JSON 응답을 확인할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ curl \"localhost:8080\" -d '{\"id\":1,\"name\":\"Gopher\"}'  -vs\n\n&lt; Content-Type: application/json\n\n{\"id\":1,\"name\":\"Gopher\"}</code></pre></div>\n<h2 id=\"에러-응답을-위한-error\" style=\"position:relative;\"><a href=\"#%EC%97%90%EB%9F%AC-%EC%9D%91%EB%8B%B5%EC%9D%84-%EC%9C%84%ED%95%9C-error\" aria-label=\"에러 응답을 위한 error permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>에러 응답을 위한 Error</h2>\n<p>서버가 정상 응답만하는 것은 아니다. 에러 처리야 말로 신뢰성 있는 서버를 만드는 필수 조건이다.\n<strong>Error</strong> 클라이언트에게 에러 헤더와 데이터를 응답하는 함수다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span>w ResponseWriter<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> code <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>에러 문자열 error와 헤더에 설정할 에러코드 code를 인자로 받아 ResponsWriter로 응답하는 함수다.</p>\n<p>password 쿼리 문자열을 검증해서 에러를 응답하는 핸들러 함수를 만들어 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">http<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  pw <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span><span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> pw <span class=\"token operator\">==</span> <span class=\"token string\">\"mypassword\"</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintln</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    http<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Not Authorized\"</span><span class=\"token punctuation\">,</span> http<span class=\"token punctuation\">.</span>StatusUnauthorized<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nhttp<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Error 함수 세 번째 인자에 Unauthorized를 의미하는 401 정수를 전달할 수도 있지만 미리 정의된 상수를 이용하는 것이 더 좋다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n  StatusContinue <span class=\"token operator\">=</span> <span class=\"token number\">100</span>        <span class=\"token comment\">// RFC 7231, 6.2.1</span>\n  <span class=\"token comment\">// 생략</span>\n  StatusOK <span class=\"token operator\">=</span> <span class=\"token number\">200</span>              <span class=\"token comment\">// RFC 7231, 6.3.1</span>\n  <span class=\"token comment\">// 생략</span>\n  StatusMultipleChoices <span class=\"token operator\">=</span> <span class=\"token number\">300</span> <span class=\"token comment\">// RFC 7231, 6.4.1</span>\n  <span class=\"token comment\">// 생략</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>password 쿼리 문자열 없이 요청하면 다음과 같이 에러 응답을 확인할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ curl \"localhost:8080\" -vs\n\n&lt; HTTP/1.1 401 Unauthorized\n\nNot Authorized</code></pre></div>\n<h2 id=\"notfound-에러\" style=\"position:relative;\"><a href=\"#notfound-%EC%97%90%EB%9F%AC\" aria-label=\"notfound 에러 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NotFound 에러</h2>\n<p>404 처럼 잘 알려진 에러는 미리 만들어 놓은 함수 <strong>NotFound</strong> 혹은 <strong>NotFoundHandler</strong> 함수를 사용하면 간편하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">NotFound</span><span class=\"token punctuation\">(</span>w ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>Request<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">NotFoundHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> Handler <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">HandlerFunc</span><span class=\"token punctuation\">(</span>NotFound<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>함수 시그니쳐가 이제 눈에 익는다.\nNotFound는 핸들러 함수 시그니처와 같고, NotFoundHandler는 Handler 타입을 반환한다.\n따라서 Handle이나 HandleFunc 함수로 등록할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">http<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintln</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello world\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nhttp<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> http<span class=\"token punctuation\">.</span>NotFound<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// http.Handle(\"/\", http.NotFoundHandler())</span>\n\nhttp<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"리다이렉트-처리\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EB%8B%A4%EC%9D%B4%EB%A0%89%ED%8A%B8-%EC%B2%98%EB%A6%AC\" aria-label=\"리다이렉트 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리다이렉트 처리</h2>\n<p>에러는 아니지만 리다이렉트 응답도 NotFound와 비슷한 시그니처의 함수를 제공한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">Redirect</span><span class=\"token punctuation\">(</span>w ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>Request<span class=\"token punctuation\">,</span> url <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> code <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">RedirectHandler</span><span class=\"token punctuation\">(</span>url <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> code <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> Handler</code></pre></div>\n<p>\"/will-be-redirected\" 로 요청하면 \"/api\"로 리다이렉트하는 핸들러를 구현해 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">http<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintln</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello world\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nhttp<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/will-be-redirected\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  http<span class=\"token punctuation\">.</span><span class=\"token function\">Redirect</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/api\"</span><span class=\"token punctuation\">,</span> http<span class=\"token punctuation\">.</span>StatusMovedPermanently<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// http.Handle(\"/will-be-redirected\", http.RedirectHandler(\"/api\", http.StatusMovedPermanently))</span>\n\nhttp<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<p>net/http 패키지는 네트웍 요청과 응답을 위한 방법을 제공한다.</p>\n<p>Get은 서버로 요청을 만들때 사용하는 함수다. 세부적인 제어를 하려면 Request와 Client 구조체를 사용한다.</p>\n<p>응답 처리를 위한 핸들러는 모두 Handler 인터페이스를 따른다.</p>\n<p>ListenAndServe 함수에 Handler 를 전달할수 있는데 가장 간단한 것이 FileServer 함\b수로 만든 핸들러다. 정적 파일 서버를 만드는데 사용한다.</p>\n<p>Handle도 Handler를 등록할수 있다. HandleFunc 함수는 핸들러 로직을 작성하여 등록한다.</p>\n<p>Request는 요청 정보를 추상화한 구조체다.</p>\n<p>ResponseWriter는 응답을 위한 인터페이스다.</p>\n<p>에러를 응답할 땐 Error함수를 사용하고 자주 사용하는 응답을 위한 NotFound, NotFoundHandler, Redirect, RedirectHandler가 마련되어 있다.</p>","frontmatter":{"slug":"/dev/2019/02/07/go-net-http.html","date":"2019-02-07T00:00:00.000Z","title":"Go net/http 패키지","tags":["go"],"seriesId":null,"videoId":null,"featuredImage":null},"tableOfContents":"<ul>\n<li><a href=\"#get-%EC%9A%94%EC%B2%AD%ED%95%98%EA%B8%B0\">Get 요청하기</a></li>\n<li><a href=\"#client%EC%99%80-request%EB%A1%9C-%EC%9A%94%EC%B2%AD-%EC%A0%9C%EC%96%B4%ED%95%98%EA%B8%B0\">Client와 Request로 요청 제어하기</a></li>\n<li><a href=\"#%EC%84%9C%EB%B2%84-%EA%B5%AC%ED%98%84%EC%9D%84-%EC%9C%84%ED%95%9C-handler\">서버 구현을 위한 Handler</a></li>\n<li><a href=\"#%EC%84%9C%EB%B2%84%EB%A5%BC-%EA%B5%AC%EB%8F%99%ED%95%98%EB%8A%94-listenandserve\">서버를 구동하는 ListenAndServe</a></li>\n<li><a href=\"#%EC%A0%95%EC%A0%81-%ED%8C%8C%EC%9D%BC-%EC%84%9C%EB%B2%84%EB%A5%BC-%EB%A7%8C%EB%93%A4%EC%88%98-%EC%9E%88%EB%8A%94-fileserve\">정적 파일 서버를 만들수 있는 FileServe</a></li>\n<li><a href=\"#%ED%95%B8%EB%93%A4%EB%9F%AC%EB%A5%BC-%EB%93%B1%EB%A1%9D%ED%95%98%EB%8A%94-handle%EA%B3%BC-handlefunc\">핸들러를 등록하는 Handle과 HandleFunc</a></li>\n<li><a href=\"#request%EB%A1%9C-%EC%9A%94%EC%B2%AD-%EC%BF%BC%EB%A6%AC-%EC%A0%91%EA%B7%BC%ED%95%98%EA%B8%B0\">Request로 요청 쿼리 접근하기</a></li>\n<li><a href=\"#responsewriter%EB%A1%9C-%EC%9D%91%EB%8B%B5%ED%95%98%EA%B8%B0\">ResponseWriter로 응답하기</a></li>\n<li><a href=\"#%EC%9A%94%EC%B2%AD-%EB%B0%94%EB%94%94-%EC%B2%98%EB%A6%AC\">요청 바디 처리</a></li>\n<li><a href=\"#json-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9D%91%EB%8B%B5%ED%95%98%EA%B8%B0\">JSON 데이터 응답하기</a></li>\n<li><a href=\"#%EC%97%90%EB%9F%AC-%EC%9D%91%EB%8B%B5%EC%9D%84-%EC%9C%84%ED%95%9C-error\">에러 응답을 위한 Error</a></li>\n<li><a href=\"#notfound-%EC%97%90%EB%9F%AC\">NotFound 에러</a></li>\n<li><a href=\"#%EB%A6%AC%EB%8B%A4%EC%9D%B4%EB%A0%89%ED%8A%B8-%EC%B2%98%EB%A6%AC\">리다이렉트 처리</a></li>\n<li><a href=\"#%EC%A0%95%EB%A6%AC\">정리</a></li>\n</ul>"},"series":null,"video":null,"allMarkdownRemark":{"nodes":[{"id":"de0745b6-1d57-5939-8076-276d4d922fc7","frontmatter":{"slug":"/elastic-beanstalk/","date":"2014-07-12T08:18:53.000Z","title":"Elastic Beanstalk","seriesId":null}},{"id":"84bfd284-cfb4-5a4b-967f-2deacdc69a03","frontmatter":{"slug":"/아마존-s3를-이용한-이미지-업로드-서버-구축/","date":"2014-07-23T08:31:17.000Z","title":"아마존 S3를 이용한 이미지 업로드 서버 구축","seriesId":null}},{"id":"dd3c498a-c2fa-508b-8753-10ced609bf9c","frontmatter":{"slug":"/트위터-부트스트랩-소스분석/","date":"2014-07-26T08:31:45.000Z","title":"트위터 부트스트랩 소스분석","seriesId":null}},{"id":"236cb5f1-daee-5797-a4c3-a0d5150250af","frontmatter":{"slug":"/노드에서-세션을-이용한-로그인아웃-구현/","date":"2014-07-31T08:32:17.000Z","title":"노드에서 세션을 이용한 로그인/아웃 구현","seriesId":null}},{"id":"5bb8dced-3905-531b-8974-71c0b2a07bcc","frontmatter":{"slug":"/angular-fullstack-로딩-속도-개선/","date":"2014-08-02T08:33:03.000Z","title":"Angular-fullstack 로딩 속도 개선","seriesId":null}},{"id":"70be4152-4b4b-5ecc-bbd9-2b8c20d4d616","frontmatter":{"slug":"/log-io를-이용한-beanstalk-로그-모니터링/","date":"2014-08-08T08:33:35.000Z","title":"log.io를 이용한 beanstalk 로그 모니터링","seriesId":null}},{"id":"359533f2-ec29-5dba-ae01-cc810b954241","frontmatter":{"slug":"/노드-실행모드에-따른-환경설정/","date":"2014-08-14T16:42:51.000Z","title":"노드 실행모드에 따른 환경설정","seriesId":null}},{"id":"69fed822-1b8c-56a4-bdca-6d06af9b12eb","frontmatter":{"slug":"/expressjs-4-0-마이그레이션/","date":"2014-08-21T16:43:14.000Z","title":"expressjs 4.0 마이그레이션","seriesId":null}},{"id":"00252337-61fb-5be7-af76-97edf51708af","frontmatter":{"slug":"/underscore-js/","date":"2015-01-05T22:16:09.000Z","title":"underscore.js","seriesId":null}},{"id":"0043ae66-12f2-56a6-a46d-90690dd23ca6","frontmatter":{"slug":"/angular-form/","date":"2015-01-09T19:02:17.000Z","title":"Angular Form","seriesId":null}},{"id":"a0eaa9cc-ea94-5bd3-879e-37f21bac8e1b","frontmatter":{"slug":"/wordpress-study-01-misfit-kr/","date":"2015-01-09T21:52:58.000Z","title":"WordPress study 01 & misfit.kr","seriesId":null}},{"id":"31c8b6ba-b0a4-5722-baef-54ca72e0547a","frontmatter":{"slug":"/워드프레스-ssh2-설정/","date":"2015-01-10T15:27:00.000Z","title":"워드프레스 SSH2 설정","seriesId":null}},{"id":"f7248362-a541-5cd4-870c-34f99ccd6597","frontmatter":{"slug":"/angularjs-passport로-인증구현/","date":"2015-01-17T12:34:54.000Z","title":"AngularJS, Passport로 인증구현","seriesId":null}},{"id":"d11bc9a4-e7f5-5596-9f58-94d9fb745614","frontmatter":{"slug":"/eb-cli-툴-사용법-정리/","date":"2015-01-17T14:10:57.000Z","title":"eb-cli 툴 사용법 정리","seriesId":null}},{"id":"072d1ac5-646d-5e94-a493-a9be30630fe2","frontmatter":{"slug":"/resource-캐쉬-설정/","date":"2015-01-18T21:39:09.000Z","title":"$resource 캐쉬 설정","seriesId":null}},{"id":"a7ae25c5-df68-56ed-ba4f-0ad20a1876f6","frontmatter":{"slug":"/꼬리에-꼬리를-무는-timeout/","date":"2015-01-22T01:05:37.000Z","title":"꼬리에 꼬리를 무는 setTimeout()","seriesId":null}},{"id":"e3e780d7-dbff-5f04-8dc8-9fa9032604dd","frontmatter":{"slug":"/resource와-service/","date":"2015-01-22T01:13:07.000Z","title":"$resource와 service","seriesId":null}},{"id":"15d65411-c468-552a-9aff-d924706361cb","frontmatter":{"slug":"/브라우져에서-아마존-s3-파일-업로드/","date":"2015-01-24T17:32:45.000Z","title":"브라우져에서 아마존 S3 파일 업로드","seriesId":null}},{"id":"1b8e2d15-448e-578d-a7ca-1485f3a44f67","frontmatter":{"slug":"/bit-operation/","date":"2015-02-07T23:08:18.000Z","title":"비트 연산","seriesId":null}},{"id":"8102ac28-5ee7-5ad5-b30c-67291d40da96","frontmatter":{"slug":"/http-테스트-코드-작성/","date":"2015-02-10T10:00:11.000Z","title":"$http 테스트 코드 작성","seriesId":null}},{"id":"5649fce9-25fa-5fb4-a876-c5b0e291b58f","frontmatter":{"slug":"/wordpress-and-grunt/","date":"2015-02-18T21:35:59.000Z","title":"워드프레스에 Grunt 설정하기","seriesId":null}},{"id":"629b397a-6f2a-517a-ac47-58d2540cebf1","frontmatter":{"slug":"/서버-다운타임-없이-빈스톡-갈아타기/","date":"2015-03-05T20:47:38.000Z","title":"서버 다운타임 없이 빈스톡 갈아타기","seriesId":null}},{"id":"cbf6d862-6264-586b-b6c5-abdfaab8649d","frontmatter":{"slug":"/몽고db-인덱스-외/","date":"2015-03-10T00:10:10.000Z","title":"몽고DB 인덱스 외","seriesId":null}},{"id":"11f3c5f6-8907-584b-ae1c-6f15541c038f","frontmatter":{"slug":"/wordpress-and-jquery/","date":"2015-03-11T00:16:00.000Z","title":"워드프레스와 제이쿼리 등","seriesId":null}},{"id":"275759a9-7339-5ffe-a40e-afb9f43a5ff8","frontmatter":{"slug":"/plugins-in-wordpress/","date":"2015-03-12T20:32:16.000Z","title":"워드프레스 플러그인 정리","seriesId":null}},{"id":"8aedb6c7-05e4-569e-8961-7fda05f752fb","frontmatter":{"slug":"앵귤러-디렉티브-등/","date":"2015-03-18T22:04:01.000Z","title":"앵귤러 디렉티브 등","seriesId":null}},{"id":"a78c4f36-5dd4-5193-a4a1-b0c87052b9ef","frontmatter":{"slug":"/options-메쏘드에-대해/","date":"2015-03-19T23:14:17.000Z","title":"options 메쏘드에 대해","seriesId":null}},{"id":"add2ba8c-960e-55cd-ad28-49a27fbfcee9","frontmatter":{"slug":"/앵귤러-서비스에-템플릿-로딩/","date":"2015-03-23T20:28:13.000Z","title":"앵귤러 서비스에 템플릿 로딩","seriesId":null}},{"id":"2da7d26a-3723-56dd-9cd1-fcfaa609b0d6","frontmatter":{"slug":"/fileupload-in-expressjs/","date":"2015-03-28T14:13:12.000Z","title":"익스프레스 파일 업로드","seriesId":null}},{"id":"a1449dc6-b818-5d27-8e6b-9c69b929c180","frontmatter":{"slug":"/how-to-build-wordpress-child-theme/","date":"2015-03-28T15:07:50.000Z","title":"워드프레스 자식 테마 만들기","seriesId":null}},{"id":"6178e28f-77b0-5aa5-a431-1cf0a79731ad","frontmatter":{"slug":"/custom-menu-in-wordpress/","date":"2015-03-28T15:43:26.000Z","title":"워드프레스 커스텀 메뉴 추가하기","seriesId":null}},{"id":"5f905179-f327-5b3f-89b3-c6e8acfe3191","frontmatter":{"slug":"/ui-route로-라우팅-인증-구현/","date":"2015-04-01T23:38:41.000Z","title":"ui-route로 라우팅 인증 구현","seriesId":null}},{"id":"320b235d-22aa-5987-941f-cad89282ca4f","frontmatter":{"slug":"/angularjs-스터디-노트/","date":"2015-04-02T18:16:34.000Z","title":"AngularJS 스터디 노트","seriesId":null}},{"id":"4779949f-6673-530c-9f6f-610b81516e16","frontmatter":{"slug":"/how-to-run-nodejs-and-php-by-using-nginx/","date":"2015-04-10T10:04:00.000Z","title":"nginx를 이용하여 nodejs와 php 어플리케이션 함께 구동하기","seriesId":null}},{"id":"bab21309-cdcc-545c-ae22-f97021db939d","frontmatter":{"slug":"/server-side-loggin-in-angular/","date":"2015-05-05T23:45:45.000Z","title":"프론트에서 잡지 못한 예외를 서버에 리포팅하는 방법","seriesId":null}},{"id":"14919133-4ff7-5ba5-94d0-116ed2dfb344","frontmatter":{"slug":"/oauth2-0-in-rest-api/","date":"2015-06-11T15:31:20.000Z","title":"REST api에 OAuth2.0 구현","seriesId":null}},{"id":"d2ab7bf2-e833-5f62-bc82-eb6189f263af","frontmatter":{"slug":"/google-material-design/","date":"2015-06-14T15:20:29.000Z","title":"Google Material Design","seriesId":null}},{"id":"6f996122-20dd-574b-b9ba-227068cd1d77","frontmatter":{"slug":"/이니페이-모바일-결제-신용카드-개발-후기/","date":"2015-06-18T09:03:02.000Z","title":"이니페이 모바일 결제 (신용카드) 개발 후기","seriesId":null}},{"id":"981c4452-c8d0-52cb-840b-ec881b05d98e","frontmatter":{"slug":"/momentjs/","date":"2015-06-19T08:12:10.000Z","title":"momentjs","seriesId":null}},{"id":"c8db2903-17e3-50a3-806d-b0937dfd3e7a","frontmatter":{"slug":"/이니페이-모바일-결제-계좌이체-개발-후기/","date":"2015-06-26T09:14:45.000Z","title":"이니페이 모바일 결제 (계좌이체) 개발 후기","seriesId":null}},{"id":"a47e538f-3f5a-5b30-a1ee-b703369d1c6c","frontmatter":{"slug":"/socket-io를-이용한-실시간-웹-구현/","date":"2015-07-07T22:14:13.000Z","title":"Socket.io를 이용한 실시간 웹 구현","seriesId":null}},{"id":"1ae73647-cff4-5acf-ba39-054e38fc92ed","frontmatter":{"slug":"/mi-band-moves-rocket-pocket/","date":"2015-07-19T19:25:06.000Z","title":"Mi Band, Moves, Rocket Pocket","seriesId":null}},{"id":"e749320c-2503-5285-ac9d-8f6e8bee2a64","frontmatter":{"slug":"/ngform-클래스명-활용하기/","date":"2015-07-21T23:47:11.000Z","title":"ngForm 클래스명 활용하기","seriesId":null}},{"id":"532239b3-3cc0-5641-9642-f2fe6c5c3429","frontmatter":{"slug":"/passport-google-oauth-구글-인증-모듈/","date":"2015-07-23T21:50:03.000Z","title":"passport-google-oauth 구글 인증 모듈","seriesId":null}},{"id":"a2536be3-03b8-50b9-9a62-a84322a08c2d","frontmatter":{"slug":"/ngform-밸리데이터-활용/","date":"2015-07-24T09:10:27.000Z","title":"ngForm 밸리데이터 활용","seriesId":null}},{"id":"c706f7d7-1c77-5229-90cf-f243df786e48","frontmatter":{"slug":"/ngform-사용자-정의-밸리데이터-만들기/","date":"2015-07-24T21:08:44.000Z","title":"ngForm 사용자 정의 밸리데이터 만들기","seriesId":null}},{"id":"ed1c8dfa-5834-52b3-8922-e2614699a5e9","frontmatter":{"slug":"/dusk-theme-in-webstorm/","date":"2015-07-26T21:42:47.000Z","title":"웹스톰 Dusk 테마","seriesId":null}},{"id":"ee0af369-fddd-5388-9d2b-31a13833d9e5","frontmatter":{"slug":"/이미지-업로드-1-multer-모듈로-파일-업로드/","date":"2015-07-27T17:09:22.000Z","title":"이미지 업로드 - 1. multer 모듈로 파일 업로드","seriesId":null}},{"id":"11b2716d-7855-529d-87e0-1a45733b4187","frontmatter":{"slug":"/이미지-업로드-2-gm-모듈로-이미지-리사이징/","date":"2015-07-27T17:10:21.000Z","title":"이미지 업로드 – 2. gm 모듈로 이미지 리사이징","seriesId":null}},{"id":"e4c1a655-4a9f-51f9-8e74-216e8c512f5b","frontmatter":{"slug":"/리눅스-데몬으로-노드-어플리케이션-관리하기/","date":"2015-07-29T23:04:12.000Z","title":"리눅스 데몬으로 노드 어플리케이션 관리하기","seriesId":null}},{"id":"8f2542d8-769e-5b09-94bd-9b5af89ae16d","frontmatter":{"slug":"/express-js-1-설치와-구조/","date":"2015-07-30T22:12:40.000Z","title":"Express.js - 1. 설치와 구조","seriesId":null}},{"id":"b9e32bb4-2367-5c5e-b755-8b05f5869528","frontmatter":{"slug":"/express-js-2-라우팅/","date":"2015-08-03T09:56:22.000Z","title":"Express.js - 2. 라우팅","seriesId":null}},{"id":"5acd0e73-7bba-5652-9650-7f5ee1328668","frontmatter":{"slug":"/express-js-3-템플릿jade/","date":"2015-08-04T21:00:46.000Z","title":"Express.js - 3. 템플릿(Jade)","seriesId":null}},{"id":"5e568fd0-29a3-52f3-8e92-6888081f469f","frontmatter":{"slug":"/grunt-open/","date":"2015-08-10T09:38:30.000Z","title":"grunt open","seriesId":null}},{"id":"766570c3-a994-5e10-a522-cc67fb2cfc83","frontmatter":{"slug":"/oh-my-zsh로-터미널-꾸미기/","date":"2015-08-10T14:41:05.000Z","title":"Oh My Zsh로 터미널 꾸미기","seriesId":null}},{"id":"a8cb9655-209b-501a-9df2-61496e5c1388","frontmatter":{"slug":"/postdigest와-timeout/","date":"2015-08-12T00:35:20.000Z","title":"$$postDigest()와 $timeout()","seriesId":null}},{"id":"59b49413-1ac2-55c4-9604-f58f41155316","frontmatter":{"slug":"/resource로-rest-api-사용하기/","date":"2015-08-13T23:32:53.000Z","title":"$resource로 REST api 사용하기","seriesId":null}},{"id":"4b74a0be-e7a3-53d9-96ca-070fdb639193","frontmatter":{"slug":"/sequalize-쿼리/","date":"2015-08-22T15:22:13.000Z","title":"sequalize 쿼리","seriesId":null}},{"id":"4b126fc4-ddd2-57f8-be8f-4764d63c6598","frontmatter":{"slug":"/아톰-에디터-외모-변경하기/","date":"2015-08-30T11:28:05.000Z","title":"아톰 에디터 외모 변경하기","seriesId":null}},{"id":"ca778c8e-21a0-58f2-9c19-9deba9685b9c","frontmatter":{"slug":"/카페24-sms-node-모듈/","date":"2015-08-31T14:16:34.000Z","title":"카페24 SMS node 모듈","seriesId":null}},{"id":"a51e63b4-6294-5fe2-bf2e-9bd59a7f842f","frontmatter":{"slug":"/개발-절차에-도커-적용하기/","date":"2015-09-02T11:13:03.000Z","title":"개발 절차에 도커 적용하기","seriesId":null}},{"id":"b3089b79-6a48-5cde-af99-706a18ef1f6e","frontmatter":{"slug":"/docker-git/","date":"2015-09-07T10:55:26.000Z","title":"Docker + Git","seriesId":null}},{"id":"4e074ab1-83eb-507b-97dc-8889190c5425","frontmatter":{"slug":"/크론을-사용할때-서버-시간을-정확히-맞추자/","date":"2015-09-08T20:10:54.000Z","title":"크론을 사용할때 서버 시간을 정확히 맞추자","seriesId":null}},{"id":"6ef9818d-c1a2-50fa-8969-29aa7605716e","frontmatter":{"slug":"/깃git-서버-만들기/","date":"2015-09-08T20:12:06.000Z","title":"깃(git) 서버 만들기","seriesId":null}},{"id":"56c29ef1-41f9-59f5-a9c2-86c0c03a378b","frontmatter":{"slug":"/agenda/","date":"2015-09-10T23:03:16.000Z","title":"Agenda","seriesId":null}},{"id":"b439e989-d4d5-52ca-b2ec-2146d9fc1e39","frontmatter":{"slug":"/안쓰는-imac을-맥북-외장-모니터로-사용하자/","date":"2015-09-11T21:56:33.000Z","title":"안쓰는 iMac을 맥북 외장 모니터로 사용하자!","seriesId":null}},{"id":"196e7222-17cf-52b1-8539-85c20341133c","frontmatter":{"slug":"/익스프레스-api-서버-테스트-코드-작성하기/","date":"2015-09-15T11:55:36.000Z","title":"익스프레스 API 서버 테스트 코드 작성하기","seriesId":null}},{"id":"72fba5fc-afb3-5621-b09e-a56fba9a11f9","frontmatter":{"slug":"/forever-and-docker/","date":"2015-09-19T14:12:03.000Z","title":"Forever와 Docker","seriesId":null}},{"id":"732d40e5-a9a3-5a53-b4a6-6bd2000acf63","frontmatter":{"slug":"/docker-usage/","date":"2015-09-19T15:16:40.000Z","title":"도커 활용기","seriesId":null}},{"id":"47ed1cd2-a345-5b38-a06b-54397817d776","frontmatter":{"slug":"/원격로그인ssh-접속/","date":"2015-09-23T09:27:20.000Z","title":"원격로그인(SSH) 접속","seriesId":null}},{"id":"ae8f2168-3e59-53d3-8d79-763659971940","frontmatter":{"slug":"/mysql-데이터베이스-삭제-에러/","date":"2015-09-27T12:27:46.000Z","title":"mysql 데이터베이스 삭제 에러","seriesId":null}},{"id":"b892559d-d9f6-58f7-b704-cdaddb1ce32a","frontmatter":{"slug":"/osx-노트-글꼴-변경/","date":"2015-09-28T15:48:23.000Z","title":"osx 노트 글꼴 변경","seriesId":null}},{"id":"aaedff24-fa8d-589f-b772-fe171293017d","frontmatter":{"slug":"/git-push-이벤트를-slack-채널로-보내기/","date":"2015-10-01T19:59:03.000Z","title":"git push 이벤트를 slack 채널로 보내기","seriesId":null}},{"id":"e55023f2-54f8-5781-805f-7f63f34d17c3","frontmatter":{"slug":"/simpletest-php-unit-test/","date":"2015-10-13T17:17:22.000Z","title":"SimpleTest & php unit test","seriesId":null}},{"id":"188453ad-c7bb-569c-a4a7-1b53045b7f4c","frontmatter":{"slug":"/도커에서-몽고디비-컨테이너-사용하기/","date":"2015-10-16T17:33:59.000Z","title":"도커에서 몽고디비 컨테이너 사용하기","seriesId":null}},{"id":"8816031a-8fc0-553c-a07f-a0ccbf77fa31","frontmatter":{"slug":"/앵귤러로-만든-spa-프로그램을-아마존웹서비스-s3에서-웹/","date":"2015-10-27T10:08:59.000Z","title":"앵귤러로 만든 spa 프로그램을 아마존웹서비스 s3에서 웹호스팅 하는 방법","seriesId":null}},{"id":"c8ffdeb1-b418-53aa-9220-37fe02ec2136","frontmatter":{"slug":"/서버-구동시-버전-체크/","date":"2015-10-30T09:29:05.000Z","title":"서버 구동시 버전 체크","seriesId":null}},{"id":"dc2ffcb7-92c1-5621-94d5-7a734663528e","frontmatter":{"slug":"/karma와-watch로-유닛테스트-코드-개발하기/","date":"2015-11-04T10:49:41.000Z","title":"karma와 watch로 유닛테스트 코드 개발하기","seriesId":null}},{"id":"c1fa8b71-4c01-557b-9547-5e3b3be47c1d","frontmatter":{"slug":"/karma에-리포터-추가하기/","date":"2015-11-11T19:44:34.000Z","title":"karma에 리포터 추가하기","seriesId":null}},{"id":"13876ff7-9445-5a57-aff4-e6f852a7a99b","frontmatter":{"slug":"/atom-에디터-플러그인-정리/","date":"2015-11-11T20:34:05.000Z","title":"Atom 에디터 플러그인 정리","seriesId":null}},{"id":"0ace5339-cdb0-5d46-bd21-a96cb9d72c75","frontmatter":{"slug":"/기존-프로젝트와-swagger-ui-연동하기/","date":"2015-11-24T20:33:24.000Z","title":"기존 프로젝트와 Swagger-ui 연동하기","seriesId":null}},{"id":"a2dfe5b2-497d-5d24-ac1d-120af24dab6f","frontmatter":{"slug":"/atom-플러그인-atom-sync/","date":"2015-11-25T20:48:34.000Z","title":"Atom 플러그인: atom-sync","seriesId":null}},{"id":"cce718aa-39b7-546a-a1be-739a4b012d2c","frontmatter":{"slug":"/카카오-인증-테스트/","date":"2015-11-28T18:53:58.000Z","title":"카카오 인증 테스트","seriesId":null}},{"id":"cf98d420-420e-5595-b5ee-1adeefd11771","frontmatter":{"slug":"/ghost-라우팅-로직-분석/","date":"2015-11-30T22:40:51.000Z","title":"Ghost 라우팅 로직 분석","seriesId":null}},{"id":"3dacbbc1-57ab-5cbf-abed-72323040d9d5","frontmatter":{"slug":"/페이스북-토큰-권한-확인-주소/","date":"2015-12-02T14:46:07.000Z","title":"페이스북 토큰 권한 확인 주소","seriesId":null}},{"id":"965e6258-f062-534f-ac1a-60537cee23c9","frontmatter":{"slug":"/기존-mysql에-장고-어드민-붙이기/","date":"2015-12-02T20:19:58.000Z","title":"기존 데이터베이스에 장고 어드민 통합하기","seriesId":null}},{"id":"e4a75967-f215-5163-a6ca-c50885cbbc0b","frontmatter":{"slug":"/gunicorn-장고-어드민-프로덕션-서버에-구동하기/","date":"2015-12-03T17:12:21.000Z","title":"gunicorn: 장고 어드민 프로덕션 서버에 구동하기","seriesId":null}},{"id":"05e87f1e-b5d5-50a8-adf9-c5901e4935ba","frontmatter":{"slug":"/우분투에-django-admin-mysql-python-설치/","date":"2015-12-03T18:04:28.000Z","title":"우분투에 Django-admin, mysql-python 설치","seriesId":null}},{"id":"4158ab19-891b-55e4-97f6-0c455a2c3784","frontmatter":{"slug":"/mongodump-is-not-working-on-cronjob/","date":"2015-12-07T20:55:16.000Z","title":"mongodump 크론잡이 동작하지 않을 때","seriesId":null}},{"id":"751e9b6e-f18a-5e61-8eca-a1a7841d1f65","frontmatter":{"slug":"/swagger-node/","date":"2015-12-11T11:40:31.000Z","title":"Swagger-node로 express 시작하기","seriesId":null}},{"id":"5405f9bf-ee93-5285-a720-cf1d229590b0","frontmatter":{"slug":"/javascript-decorator-pattern/","date":"2015-12-13T08:20:53.000Z","title":"Javascript Decorator Pattern","seriesId":null}},{"id":"d97cbbdf-410c-580f-8cd3-5cf2a0626561","frontmatter":{"slug":"/ng-plualize-단수-복수형-처리/","date":"2015-12-21T09:56:48.000Z","title":"ng-plualize 단수, 복수형 처리","seriesId":null}},{"id":"c67c2d6a-d03e-53dc-bb15-7d514b4ae268","frontmatter":{"slug":"/2015-블로그-결산","date":"2016-01-01T22:42:19.000Z","title":"2015 블로그 결산","seriesId":null}},{"id":"3287fae5-69d8-52a9-b3b1-36a94f0de0de","frontmatter":{"slug":"/boot2docker-업데이트-v1-9/","date":"2016-01-03T18:26:20.000Z","title":"boot2docker 업데이트 (v1.9)","seriesId":null}},{"id":"d8e263e8-44b2-5b64-a7d6-9d03aab06f80","frontmatter":{"slug":"/mocha/","date":"2016-01-05T00:02:30.000Z","title":"NodeJS에서 가장 많이 사용하는 테스트 프레임웍, Mocha","seriesId":null}},{"id":"832105c4-f1eb-527c-81db-342773116457","frontmatter":{"slug":"/naming-uploaded-file-on-wordpress/","date":"2016-01-11T21:15:30.000Z","title":"워드프레스 파일 업로드 시 파일명 처리","seriesId":null}},{"id":"5f3596a3-57c1-503c-b024-3b54c3c97eef","frontmatter":{"slug":"/add-fk-on-sequelize-migration/","date":"2016-01-12T22:17:40.000Z","title":"Sequelize로 마이그레이션 시 외래키 추가하기","seriesId":null}},{"id":"71f87be3-91d3-5d89-944b-9310209dd785","frontmatter":{"slug":"/sequelize-migration/","date":"2016-01-14T09:21:17.000Z","title":"Sequelize 마이그레이션","seriesId":null}},{"id":"d59122cd-f914-589a-a9ed-a703d912b668","frontmatter":{"slug":"/sequelize-model/","date":"2016-01-26T23:27:50.000Z","title":"Sequelize Modeling","seriesId":null}},{"id":"3f7e7e68-9ebb-55a8-b303-31601ab8742d","frontmatter":{"slug":"/aws-서울-리전으로-블로그-이동/","date":"2016-01-30T19:35:32.000Z","title":"AWS 서울 리전으로 블로그 이동","seriesId":null}},{"id":"f8e8b9ca-b2f3-55dd-996a-68993e4f00c0","frontmatter":{"slug":"/lodash/","date":"2016-01-31T15:14:43.000Z","title":"lodash","seriesId":null}},{"id":"4cbc2671-a199-5e3a-8273-5389b0c32628","frontmatter":{"slug":"/morgan-helper/","date":"2016-02-01T08:29:51.000Z","title":"morgan-helper","seriesId":null}},{"id":"bde7a81e-6bf9-5414-8dc0-b3bcb1c15c99","frontmatter":{"slug":"/sequelize-seed-시드-데이터-관리하기/","date":"2016-02-03T12:02:53.000Z","title":"Sequelize Seed - 시드 데이터 관리하기","seriesId":null}},{"id":"e9fc5fd2-ebac-54a0-b4be-40d27cb898af","frontmatter":{"slug":"/2016/02/07/from-wordpress-to-jekyll.html","date":"2016-02-07T00:00:00.000Z","title":"워드프레스에서 지킬로 블로그 이동","seriesId":null}},{"id":"642e39a6-9ccf-506e-b3fd-6faec6a34919","frontmatter":{"slug":"/2016/02/07/jekyll-customizing.html","date":"2016-02-07T00:00:00.000Z","title":"Jekyll 커스터마이징 1 - 코멘트와 페이지네이션","seriesId":null}},{"id":"7d0cf408-23f4-5b63-bf00-63ed8679ecbe","frontmatter":{"slug":"/2016/02/20/beanstalk-in-seoul.html","date":"2016-02-20T00:00:00.000Z","title":"서울에서 Elastic Beanstalk 사용하기","seriesId":null}},{"id":"723ccab6-053a-51cd-8b35-72304e03fa98","frontmatter":{"slug":"/2016/02/28/http-test-with-nock-mocha.html","date":"2016-02-28T00:00:00.000Z","title":"Nock, Mocha로 HTTP 테스트하기","seriesId":null}},{"id":"319941cd-c67c-5251-a7d6-ab1e17b7128d","frontmatter":{"slug":"/2016/02/29/jekyll-tag.html","date":"2016-02-29T00:00:00.000Z","title":"Jekyll 커스터마이징 2 - 태그","seriesId":null}},{"id":"7e09e63b-1ef3-5bba-b6dc-c8efabced06a","frontmatter":{"slug":"/2016/03/21/must-use-error-in-reject.html","date":"2016-03-21T00:00:00.000Z","title":"Promise.reject()에 에러 객체를 넘겨줘야하는 이유","seriesId":null}},{"id":"bc0594c3-8fa9-5010-a3b3-e2a624612322","frontmatter":{"slug":"/2016/03/29/mobile-rest-api.html","date":"2016-03-29T00:00:00.000Z","title":"서버 개발자 입장에서 바라본 모바일 API 디자인","seriesId":null}},{"id":"e8bf8dda-761f-58c4-8fbc-72f47a73cb57","frontmatter":{"slug":"/2016/04/28/es6.html","date":"2016-04-28T00:00:00.000Z","title":"ECMAScript2015(ES6)로 Node.JS 코딩하기","seriesId":null}},{"id":"4081de2a-b70d-51d7-9105-ca2278cf580d","frontmatter":{"slug":"/2016/05/13/image-resizing-with-lambda.html","date":"2016-05-13T00:00:00.000Z","title":"람다를 이용해 이미지 리사이징 서버 만들기","seriesId":null}},{"id":"0318a0f7-f12e-59b0-962e-c08eee1965fa","frontmatter":{"slug":"/2016/05/13/swagger-parser.html","date":"2016-05-13T00:00:00.000Z","title":"스웨거 문서 문법 체크하기","seriesId":null}},{"id":"1e6cb093-9b25-5c34-985e-bc32ea7dff80","frontmatter":{"slug":"/2016/05/17/aws-submit-2016.html","date":"2016-05-17T00:00:00.000Z","title":"AWS Summit 2016 참관 후기","seriesId":null}},{"id":"3162b917-cc79-5e0b-aa56-0b3d91820d68","frontmatter":{"slug":"/2016/06/29/querystring-body-in-express.html","date":"2016-06-29T00:00:00.000Z","title":"노드에서는 쿼리스트링 인코딩을 어떻게 처리할까?","seriesId":null}},{"id":"f7239c4d-f432-5c20-8ef1-341b456ae634","frontmatter":{"slug":"/2016/07/13/sequelize-transaction.html","date":"2016-07-13T00:00:00.000Z","title":"Sequelize Transaction 사용할때 주의할 점","seriesId":null}},{"id":"a996784f-a117-5c77-9b76-ba15550f7b9c","frontmatter":{"slug":"/2016/07/19/babel.html","date":"2016-07-19T00:00:00.000Z","title":"Babel로 ES6 코드 사용하기","seriesId":null}},{"id":"8ebccd12-4aab-5e60-bfb0-344adeba4a5d","frontmatter":{"slug":"/2016/07/28/istanbul.html","date":"2016-07-28T00:00:00.000Z","title":"Istanbul로 코드 커버리지 측정하기","seriesId":null}},{"id":"f3bee76b-0608-5f71-8469-2fc2d5a2f604","frontmatter":{"slug":"/2016/08/03/ionic-hello-world.html","date":"2016-08-03T00:00:00.000Z","title":"Ionic으로 Hello world 시작하기","seriesId":null}},{"id":"704fb78f-90e8-5f5b-a1c3-70c05cf96875","frontmatter":{"slug":"/2016/08/10/nvm.html","date":"2016-08-10T00:00:00.000Z","title":"NVM으로 노드 버전 관리하기","seriesId":null}},{"id":"0f98658a-c29b-55b2-a4fb-8fdda3dd2949","frontmatter":{"slug":"/2016/08/11/pyenv.html","date":"2016-08-11T00:00:00.000Z","title":"PYENV로 파이썬 버전 관리하기","seriesId":null}},{"id":"3bd92667-0acd-5256-8c3d-095385473e20","frontmatter":{"slug":"/2016/08/16/git-alias.html","date":"2016-08-16T00:00:00.000Z","title":"Git Alias 사용법: 깃 단축키 설정하는 방법 ","seriesId":null}},{"id":"42155ab7-0fd0-5b37-bdd6-0afc50aa5644","frontmatter":{"slug":"/2016/08/20/angular-facts-easy-to-miss.html","date":"2016-08-20T00:00:00.000Z","title":"앵귤러 개발자가 놓치기 쉬운 10가지 사실들","seriesId":null}},{"id":"6888ced2-9814-5fd8-a2af-743eae0063d9","frontmatter":{"slug":"/2016/08/23/about-angular2-quickstart-libraries.html","date":"2016-08-23T00:00:00.000Z","title":"Angular2 Quickstart에서 사용하는 라이브러리는 왜 이렇게 많을까?","seriesId":null}},{"id":"8834f8ac-9c71-5ac0-830c-5df558bdf2a1","frontmatter":{"slug":"/2016/09/03/jscon2016.html","date":"2016-09-03T00:00:00.000Z","title":"JSCON 2016 참관 후기","seriesId":null}},{"id":"b40dc6fd-2c03-5597-aae2-b1bb4058e370","frontmatter":{"slug":"/2016/09/27/imac-kernel-panic.html","date":"2016-09-27T00:00:00.000Z","title":"아이맥, 커널 패닉에 빠지다","seriesId":null}},{"id":"ac5889fd-3305-52ad-a397-02d1c0219576","frontmatter":{"slug":"/2016/10/13/how-to-make-yeoman-generator.html","date":"2016-10-13T00:00:00.000Z","title":"Yeoman 제너레이터 만들기","seriesId":null}},{"id":"0bec7f49-d401-5629-a69e-729729b53701","frontmatter":{"slug":"/2016/11/29/flow.html","date":"2016-11-29T00:00:00.000Z","title":"WebStorm에 Flow 기능 사용 후기","seriesId":null}},{"id":"773b50c1-a616-5d13-bfff-c110fe0a42dd","frontmatter":{"slug":"/2016/12/15/coroutine.html","date":"2016-12-15T00:00:00.000Z","title":"제너레이터와 프라미스를 이용한 비동기 처리","seriesId":null}},{"id":"2dbfce45-5f3a-5401-9db7-c55fc0bc09f1","frontmatter":{"slug":"/etc/2017/01/02/review-2016.html","date":"2017-01-02T00:00:00.000Z","title":"2016년을 보내며","seriesId":null}},{"id":"75f0f95a-a03c-5d46-b2f8-9b19055a2991","frontmatter":{"slug":"/toy_project/2017/01/09/reading-book.html","date":"2017-01-09T00:00:00.000Z","title":"토이프로젝트_독서노트","seriesId":null}},{"id":"e45a663f-fd77-5757-9eeb-4f57680dae64","frontmatter":{"slug":"/toy_project/2017/01/16/facebook-analysis.html","date":"2017-01-16T00:00:00.000Z","title":"토이프로젝트_페이스북 분석기","seriesId":null}},{"id":"6650bd9e-4c32-59a1-a732-2a940f8233a5","frontmatter":{"slug":"/etc/2017/01/16/so-you-want-to-be-a-functional-programmer-part-6.html","date":"2017-01-16T00:00:00.000Z","title":"함수형 프로그래머가 되고 싶다고? 파트6","seriesId":null}},{"id":"0c1b5bfa-df96-5f93-a6f3-fe36d3083072","frontmatter":{"slug":"/toy_project/2017/01/17/life-tracker.html","date":"2017-01-17T00:00:00.000Z","title":"토이프로젝트_라이프트래커","seriesId":null}},{"id":"1a5f3815-341a-561f-a82c-be88905e623b","frontmatter":{"slug":"/node/2017/01/27/node-io-deep.html","date":"2017-01-27T00:00:00.000Z","title":"노드 개발자가 IO 작업을 시작하면 무슨일이 일어날까?","seriesId":null}},{"id":"410452d2-443b-5ad6-bc0d-a7ff585d81e7","frontmatter":{"slug":"/node/2017/02/06/utf8mb4-in-sequelize.html","date":"2017-02-06T00:00:00.000Z","title":"시퀄라이즈에서 이모티콘 저장하기","seriesId":null}},{"id":"12514722-9745-52ba-8d1e-641604f71583","frontmatter":{"slug":"/js/2017/02/17/dependency-injection.html","date":"2017-02-17T00:00:00.000Z","title":"의존성 주입","seriesId":null}},{"id":"4f59d816-e30d-5867-99f3-0988b5c1a64b","frontmatter":{"slug":"/aws/2017/03/06/apex.html","date":"2017-03-06T00:00:00.000Z","title":"Apex로 좀 더 편리한 람다 개발환경 만들기","seriesId":null}},{"id":"ecd20b85-63c4-5eef-9e81-1af62adbb9a6","frontmatter":{"slug":"/vue/2017/03/27/vue.html","date":"2017-03-27T00:00:00.000Z","title":"Vue.js 살펴보기","seriesId":null}},{"id":"fb8153bd-66bc-59ed-a78b-b83162513d54","frontmatter":{"slug":"/tool/2017/03/28/jasmine.html","date":"2017-03-28T00:00:00.000Z","title":"자스민으로 프론트엔드 테스트 코드 작성하기","seriesId":null}},{"id":"5339e760-d690-5452-96ce-36b2ad3d6d96","frontmatter":{"slug":"/vue/2017/03/29/is-vue-better-than-angular-react.html","date":"2017-03-29T00:00:00.000Z","title":"과연 Vue.js가 앵귤러나 리엑트보다 좋을까?","seriesId":null}},{"id":"bb66bde6-ba0b-5d84-8cef-53b2e51c7cd7","frontmatter":{"slug":"/vue/2017/04/19/vue-component-test.html","date":"2017-04-19T00:00:00.000Z","title":"Vue 글로벌 컴포넌트 테스트","seriesId":null}},{"id":"8e6219d6-4699-5062-924f-da5477b9f830","frontmatter":{"slug":"/js/2017/05/15/webpack.html","date":"2017-05-15T00:00:00.000Z","title":"웹팩의 기본 개념","seriesId":null}},{"id":"cddc9b77-1b56-54d4-bada-f242f980bb23","frontmatter":{"slug":"/js/2017/05/22/webpack-file-loader.html","date":"2017-05-22T00:00:00.000Z","title":"웹팩의 file-loader와 url-loader","seriesId":null}},{"id":"d213f087-8a2a-523c-8151-890563a6ea55","frontmatter":{"slug":"/node/2017/07/03/node-stream-you-need-to-know.html","date":"2017-07-03T00:00:00.000Z","title":"Node.js Stream 당신이 알아야할 모든 것 1편","seriesId":null}},{"id":"d2f98e89-3c8c-5ef3-a184-1cf9797c9319","frontmatter":{"slug":"/node/2017/08/07/node-stream-you-need-to-know-2.html","date":"2017-08-07T00:00:00.000Z","title":"Node.js Stream 당신이 알아야할 모든 것 2편","seriesId":null}},{"id":"a2d872c2-a3f0-5bd9-812b-93707fc03bf3","frontmatter":{"slug":"/node/2017/08/12/node-stream-you-need-to-know-3.html","date":"2017-08-12T00:00:00.000Z","title":"Node.js Stream 당신이 알아야할 모든 것 3편","seriesId":null}},{"id":"e6850aa7-978f-59b9-94e3-2f722fd293b6","frontmatter":{"slug":"/node/2017/08/17/express-error-handling.html","date":"2017-08-17T00:00:00.000Z","title":"에러 처리를 위한 익스프레스 가이드","seriesId":null}},{"id":"eb72a758-4c75-56e6-8780-db45f8f33ca2","frontmatter":{"slug":"/tool/2017/09/16/gulp-workflow-for-frentend-development.html","date":"2017-09-16T00:00:00.000Z","title":"프론트엔드 개발을 위한 Gulp","seriesId":null}},{"id":"8dcc41ce-91b6-52ab-96c9-6de4bce4e329","frontmatter":{"slug":"/2017/10/22/js-context-binding.html","date":"2017-10-22T00:00:00.000Z","title":"자바스크립트 this 바인딩 우선순위","seriesId":null}},{"id":"87c386f2-ab75-5f76-bbb2-362eef1d16b9","frontmatter":{"slug":"/2018/01/01/review-2017.html","date":"2018-01-01T00:00:00.000Z","title":"2017년을 보내며","seriesId":null}},{"id":"935353e4-d13e-5735-a5fd-6a22c17619e7","frontmatter":{"slug":"/2018/01/25/before-jquery.html","date":"2018-01-25T00:00:00.000Z","title":"jQuery 보다 먼저 알았으면 좋았을 것들","seriesId":null}},{"id":"48c2c5d9-ba19-59ba-ab46-d168dd4510aa","frontmatter":{"slug":"/2018/03/26/vue-authentication.html","date":"2018-03-26T00:00:00.000Z","title":"Vuex, Vue-router, Axios를 이용한 SPA 인증 구현","seriesId":null}},{"id":"2cca2729-7225-5477-9880-a52f933d1427","frontmatter":{"slug":"/2018/04/07/vue-router.html","date":"2018-04-07T00:00:00.000Z","title":"Vue-Router 살펴보기","seriesId":null}},{"id":"4371cfed-f0fb-55b5-8267-07f24c3eea95","frontmatter":{"slug":"/2018/05/12/extended-component.html","date":"2018-05-12T00:00:00.000Z","title":"UI 컴포넌트 확장","seriesId":null}},{"id":"85acb33c-a874-5a2f-8679-406d73fb9fbb","frontmatter":{"slug":"/2018/05/31/vue-form-validation.html","date":"2018-05-31T00:00:00.000Z","title":"VueJS 폼 검증","seriesId":null}},{"id":"e22ea907-1513-5ae3-b89a-fd481c038cf7","frontmatter":{"slug":"/2018/07/16/react-app-overview.html","date":"2018-07-16T00:00:00.000Z","title":"React로 만든 프로젝트 톺아보기","seriesId":null}},{"id":"cd1ef163-6caa-5731-8b3a-545c65b6376e","frontmatter":{"slug":"/2018/08/19/express-travis-beanstalk.html","date":"2018-08-19T00:00:00.000Z","title":"리액트, 노드 백엔드 통합 후 CI 연동하기","seriesId":null}},{"id":"8a5b7a9e-ed91-5a09-b2c1-0e42ce05c44e","frontmatter":{"slug":"/2018/10/13/ant-design-101.html","date":"2018-10-13T00:00:00.000Z","title":"앤트 디자인 - 어드민 개발을 위한 프레임웍","seriesId":null}},{"id":"8e525630-0796-55cf-80ee-2d3ad92c5364","frontmatter":{"slug":"/2018/10/21/aws-sns-to-slack.html","date":"2018-10-21T00:00:00.000Z","title":"AWS를 슬랙으로 모니터링","seriesId":null}},{"id":"0690026f-ce4a-545d-8045-61cba2f980bf","frontmatter":{"slug":"/2018/11/08/remote-work.html","date":"2018-11-08T00:00:00.000Z","title":"비오는 날, 집에서 일하기 좋은 날씨다","seriesId":null}},{"id":"5818931e-f714-58a1-9ead-e904f0bf25da","frontmatter":{"slug":"/series/2018/12/01/node-web-0_index.html","date":"2018-12-01T00:00:00.000Z","title":"🌳[Node.js 코드랩] 소개 및 목차","seriesId":null}},{"id":"580cc3cb-24ce-5263-9599-3e84dda42efc","frontmatter":{"slug":"/think/2018/12/22/codelab-review.html","date":"2018-12-22T00:00:00.000Z","title":"코드랩 시리즈를 마치고 느낀점","seriesId":null}},{"id":"277a7404-2fab-5c0b-883e-d1dbb3a4cc5d","frontmatter":{"slug":"/think/2019/01/03/record.html","date":"2019-01-03T00:00:00.000Z","title":"기록","seriesId":null}},{"id":"4bdf0001-6204-50dc-94fe-06092437ebbf","frontmatter":{"slug":"/dev/2019/01/08/go-fmt.html","date":"2019-01-08T00:00:00.000Z","title":"Go fmt 패키지","seriesId":null}},{"id":"94912c76-2fab-5d21-8e46-bbb59b2d0074","frontmatter":{"slug":"/dev/2019/01/14/go-time.html","date":"2019-01-14T00:00:00.000Z","title":"Go time 패키지","seriesId":null}},{"id":"9b8c1d44-6687-51f3-be81-ea0514429352","frontmatter":{"slug":"/dev/2019/01/18/go-encoding-json.html","date":"2019-01-18T00:00:00.000Z","title":"Go encoding/json 패키지","seriesId":null}},{"id":"5521c509-dfc2-579b-902c-a773f2000eef","frontmatter":{"slug":"/dev/2019/02/07/go-net-http.html","date":"2019-02-07T00:00:00.000Z","title":"Go net/http 패키지","seriesId":null}},{"id":"21516c99-2bcd-57b0-879b-bd7cd2fbd67d","frontmatter":{"slug":"/dev/2019/02/18/go-todo-web-application.html","date":"2019-02-18T00:00:00.000Z","title":"Go로 투두 웹 어플리케이션 만들기","seriesId":null}},{"id":"837d3db9-6f3a-5185-890c-0f05b73042ed","frontmatter":{"slug":"/think/2019/04/15/change-pain-concentration.html","date":"2019-04-15T00:00:00.000Z","title":"변화와 고통 그리고 집중","seriesId":null}},{"id":"55900534-2875-5bf6-bd05-c5f2d3f910bf","frontmatter":{"slug":"/think/2019/04/26/running-machine-load.html","date":"2019-04-26T00:00:00.000Z","title":"러닝머신과 도로 위","seriesId":null}},{"id":"ca6522c1-93ef-50e5-93bd-b6408f843a28","frontmatter":{"slug":"/dev/2019/06/25/react-ts.html","date":"2019-06-25T00:00:00.000Z","title":"리액트, 타입스크립트 시작하기","seriesId":null}},{"id":"176e48a1-9298-5ddf-8b4d-181d8017ee8e","frontmatter":{"slug":"/dev/2019/07/08/react-router-ts.html","date":"2019-07-08T00:00:00.000Z","title":"리액트 라우터 사용하기 (타입스크립트 버전)","seriesId":null}},{"id":"9943d20c-bf3b-58f9-bf6b-24a1886b50b3","frontmatter":{"slug":"/dev/2019/07/15/react-redux-ts.html","date":"2019-07-15T00:00:00.000Z","title":"리액트 리덕스 사용하기 (타입스크립트 버전)","seriesId":null}},{"id":"0349bf75-4d9f-5426-b39b-0ab35635ee8a","frontmatter":{"slug":"/dev/2019/07/22/react-saga-ts-1.html","date":"2019-07-22T00:00:00.000Z","title":"리덕스 사가 사용하기 (타입스크립트 버전) - 1편","seriesId":null}},{"id":"b6e9af46-50f0-58d8-8af5-7917ad7906fd","frontmatter":{"slug":"/dev/2019/07/29/react-saga-ts-2.html","date":"2019-07-29T00:00:00.000Z","title":"리덕스 사가 사용하기 (타입스크립트 버전) - 2편","seriesId":null}},{"id":"2c87be56-61cd-5ed0-b7a5-60113703daa7","frontmatter":{"slug":"/dev/2019/08/12/ie-cache.html","date":"2019-08-12T00:00:00.000Z","title":"IE의 ajax 캐시 이슈를 처리하는 방법","seriesId":null}},{"id":"3ed409de-9ac1-5b7b-9158-28d743bf0ec7","frontmatter":{"slug":"/dev/2020/01/28/component-design.html","date":"2020-01-28T00:00:00.000Z","title":"컴포넌트의 역할 분리","seriesId":null}},{"id":"6899b5a1-ffdc-5ea6-98ff-0b565eb578e6","frontmatter":{"slug":"/dev/2020/02/10/git-usage.html","date":"2020-02-10T00:00:00.000Z","title":"깃(Git) 개념과 상황별 팁","seriesId":null}},{"id":"20f8f59e-9e88-513f-ac1a-c8aeed90a2c1","frontmatter":{"slug":"/dev/2020/03/09/flex.html","date":"2020-03-09T00:00:00.000Z","title":"플렉스(flex) 박스, 한 번 정리하고 가자","seriesId":null}},{"id":"83c6e25d-100f-52a2-88b0-43d75b9095b7","frontmatter":{"slug":"/dev/2020/03/20/role-based-react-router.html","date":"2020-03-20T00:00:00.000Z","title":"리액트 라우터를 활용한 권한별 라우팅 제어","seriesId":null}},{"id":"f7abfd9f-3bd3-55d7-bb72-3e42112dfdc5","frontmatter":{"slug":"/dev/2020/03/24/circular-dependancy.html","date":"2020-03-24T00:00:00.000Z","title":"순환 참조","seriesId":null}},{"id":"3d8daf46-1c8d-58e9-a1a5-57c202122b54","frontmatter":{"slug":"/think/2020/03/27/imac-ssd-replacement.html","date":"2020-03-27T00:00:00.000Z","title":"오래된 아이맥, SSD 교체하기","seriesId":null}},{"id":"5a448022-ace4-5bae-87f6-0df73d069173","frontmatter":{"slug":"/think/2020/03/30/remote-work.html","date":"2020-03-30T00:00:00.000Z","title":"슬기로운 재택생활","seriesId":null}},{"id":"ea09b8c4-e32b-5e7c-8e09-c93bed57d301","frontmatter":{"slug":"/dev/2020/04/05/vscode.html","date":"2020-04-05T00:00:00.000Z","title":"알아두면 쓸데있는 VSCode 노하우","seriesId":null}},{"id":"ad9fb3e8-d63b-5b70-af95-fd940621e94c","frontmatter":{"slug":"/dev/2020/04/18/interface-to-class.html","date":"2020-04-18T00:00:00.000Z","title":"인터페이스만 사용하다가 클래스를 다시 보았다","seriesId":null}},{"id":"3f5378c9-2ddc-5b54-be84-90bd751632c3","frontmatter":{"slug":"/dev/2020/04/30/nodemon-EADDRINUSE.html","date":"2020-04-30T00:00:00.000Z","title":"노드몬(nodemon) 사용시 포트 충돌 이슈","seriesId":null}},{"id":"c1b3b309-10ce-5d25-878b-9a01ed3cb1bc","frontmatter":{"slug":"think/2020/05/11/test.html","date":"2020-05-11T00:00:00.000Z","title":"테스트 코드는 꼭 필요한가요?","seriesId":null}},{"id":"534220c3-2857-58b1-9b2c-6a8bf1d3a36a","frontmatter":{"slug":"/dev/2020/05/18/filename.html","date":"2020-05-18T00:00:00.000Z","title":"파일명 컨벤션과 웹팩/노드 오류","seriesId":null}},{"id":"656879a1-eee2-53ca-95e4-0794df97590b","frontmatter":{"slug":"/dev/2020/05/25/supertest.html","date":"2020-05-25T00:00:00.000Z","title":"Node.js로 만든 API 테스트(supertest)","seriesId":null}},{"id":"632aa41c-a331-5047-a68c-6da2ab581389","frontmatter":{"slug":"/dev/2020/06/08/html5-form-validation.html","date":"2020-06-08T00:00:00.000Z","title":"HTML5 폼 검증에 대해 정리해 보자","seriesId":null}},{"id":"dd35b5d1-ad3e-5d96-80f8-a85946eebf69","frontmatter":{"slug":"/dev/2020/06/20/passport.html","date":"2020-06-20T00:00:00.000Z","title":"패스포트 동작 원리와 인증 구현","seriesId":null}},{"id":"b2d85cb8-f54e-589c-b814-ed7e8437af5c","frontmatter":{"slug":"/dev/2020/06/27/node-sass.html","date":"2020-06-27T00:00:00.000Z","title":"node-sass가 노드 버전에 의존적이 이유","seriesId":null}},{"id":"c889fc6f-56a9-534b-b2f3-94b06a877b2a","frontmatter":{"slug":"/dev/2020/07/06/sequelize-model.html","date":"2020-07-06T00:00:00.000Z","title":"시퀄라이즈 Model 클래스 활용하기","seriesId":null}},{"id":"82c41162-4ef7-5b20-a49c-c9c478c460d0","frontmatter":{"slug":"/dev/2020/07/18/webpack-dev-middleware.html","date":"2020-07-18T00:00:00.000Z","title":"웹팩 개발 서버로 부족하다면 webpack-dev-middleware를 사용해 보자","seriesId":null}},{"id":"0e71db45-5d9f-5718-8372-e243100a2e6d","frontmatter":{"slug":"/dev/2020/07/30/gatsby.html","date":"2020-07-30T00:00:00.000Z","title":"Gatsby.js 훑어보기","seriesId":null}},{"id":"693b1262-8af5-5e29-8d65-fec5430c1f9b","frontmatter":{"slug":"/dev/2020/08/15/react-helmet.html","date":"2020-08-15T00:00:00.000Z","title":"react-helmet의 동작 방식","seriesId":null}},{"id":"02c6d6f5-6aa9-542a-abf1-052f0c3608e5","frontmatter":{"slug":"/dev/2020/08/19/gatsby-image.html","date":"2020-08-19T00:00:00.000Z","title":"개츠비의 이미지 처리 방식","seriesId":null}},{"id":"59d85bd3-e3ae-5b12-9567-31b78e528859","frontmatter":{"slug":"/dev/2020/08/21/gatsby-prefetch.html","date":"2020-08-21T00:00:00.000Z","title":"개츠비 프리로딩과 프리패치","seriesId":null}},{"id":"39626eaf-f14f-50c1-bf71-7ae67adb0d6f","frontmatter":{"slug":"/dev/2020/10/10/mobx.html","date":"2020-10-10T00:00:00.000Z","title":"상태관리 라이브러리 mobx","seriesId":null}},{"id":"d0b4849c-8ba0-56a0-a4be-0d82cd05b54f","frontmatter":{"slug":"/dev/2020/10/25/styled-components.html","date":"2020-10-25T00:00:00.000Z","title":"styled-component로 리액트 컴포넌트 만들기","seriesId":null}},{"id":"456d8e21-8ed6-505b-8bf2-55ad2b17f510","frontmatter":{"slug":"/think/2020/11/01/work-density.html","date":"2020-11-01T00:00:00.000Z","title":"업무 밀도","seriesId":null}},{"id":"2de409ac-ce78-59d2-868c-45d947385990","frontmatter":{"slug":"/dev/2020/11/08/serverless-1.html","date":"2020-11-08T00:00:00.000Z","title":"서버리스 웹 애플리케이션 만들기","seriesId":null}},{"id":"134459b9-f622-5ca7-a45b-73097b6211d8","frontmatter":{"slug":"/think/2020/11/14/the-reason-i-write.html","date":"2020-11-14T00:00:00.000Z","title":"블로그에 글을 쓰는 이유","seriesId":null}},{"id":"4ad362ec-e685-59c2-9497-8d70a97bf129","frontmatter":{"slug":"/think/2020/12/21/happy-now.html","date":"2020-12-21T00:00:00.000Z","title":"\"당장 야금야금 부지런히 행복해야 돼\"","seriesId":null}},{"id":"ddaecacc-8200-5e59-8043-9529b5a37195","frontmatter":{"slug":"/think/2020/12/29/frontend-developer-roles.html","date":"2020-12-29T00:00:00.000Z","title":"프론트엔드 개발자의 역할","seriesId":null}},{"id":"166fed98-28de-5153-ae3a-6c310d6461a8","frontmatter":{"slug":"/think/2021/01/07/sense-of-balence.html","date":"2021-01-07T00:00:00.000Z","title":"균형 감각","seriesId":null}},{"id":"10620375-4a6e-5089-bed4-7435a172e48c","frontmatter":{"slug":"/think/2021/01/05/2020.html","date":"2021-01-15T00:00:00.000Z","title":"아, 전설적인 한 해였다","seriesId":null}},{"id":"7fc047e8-8750-5888-aacf-adbf015068ae","frontmatter":{"slug":"/2021-01-scrap","date":"2021-01-31T00:00:00.000Z","title":"2021-01 스크랩","seriesId":null}},{"id":"5a4bccdc-933b-5e42-bb60-fafb842b7b66","frontmatter":{"slug":"/2021-02-scrap","date":"2021-02-28T00:00:00.000Z","title":"2021-02 스크랩","seriesId":null}},{"id":"2149b5c1-7ccc-5142-8d6c-a92eb7c569c7","frontmatter":{"slug":"/dev/2021/03/08/babel-typescript.html","date":"2021-03-08T00:00:00.000Z","title":"babel-loader와 ts-loader의 빌드 결과가 다른 현상","seriesId":null}},{"id":"1f20f251-e4c7-5edc-a31e-d7122a4c7fa8","frontmatter":{"slug":"/dev/2021/03/18/type-guard.html","date":"2021-03-18T00:00:00.000Z","title":"유니온 타입과 타입 가드","seriesId":null}},{"id":"0ef9667f-f763-5ec7-8ca8-4c609984a935","frontmatter":{"slug":"/dev/2021/03/22/i18n.html","date":"2021-03-22T00:00:00.000Z","title":"어플리케이션 다국어 기능과 번역가와 협업 방법","seriesId":null}},{"id":"ea2ba8ce-227b-5413-b89f-13c8ef2f8565","frontmatter":{"slug":"/dev/2021/03/29/lambda-limits.html","date":"2021-03-29T00:00:00.000Z","title":"AWS 람다 용량 관리","seriesId":null}},{"id":"8e962eb8-5a56-55df-bc83-b749f77472f9","frontmatter":{"slug":"/2021-03-scrap","date":"2021-03-31T00:00:00.000Z","title":"2021-03 스크랩","seriesId":null}},{"id":"4edcc266-5c9f-5713-8b44-0126626c4113","frontmatter":{"slug":"/dev/2021/04/01/aws-lambda-cold-start.html","date":"2021-04-01T00:00:00.000Z","title":"AWS 람다 초기 응답 속도 개선하기","seriesId":null}},{"id":"ecea53d9-4795-513e-bec1-c1667d0c2d7e","frontmatter":{"slug":"/think/2021/04/29/my-first-capacitive-keyboard.html","date":"2021-04-29T00:00:00.000Z","title":"나의 첫 무접점 키보드 ","seriesId":null}},{"id":"8a47a6f8-1b10-5c60-85b9-b5e12bae112b","frontmatter":{"slug":"/2021-04-scrap","date":"2021-04-30T00:00:00.000Z","title":"2021-04 스크랩","seriesId":null}},{"id":"d11e1fd8-40fd-5c03-9539-9146e5d16614","frontmatter":{"slug":"/dev/2021/05/05/react-context.html","date":"2021-05-05T00:00:00.000Z","title":"리액트 컨텍스트","seriesId":null}},{"id":"0b15f43f-48f8-557c-8c00-7e1d72bd90d3","frontmatter":{"slug":"/dev/2021/05/17/css-variable.html","date":"2021-05-17T00:00:00.000Z","title":"CSS 변수와 웹사이트 테마","seriesId":null}},{"id":"5d98f829-205a-5c05-9444-9541c8fd62ba","frontmatter":{"slug":"/2021-06-scrap","date":"2021-06-30T00:00:00.000Z","title":"2021-06 스크랩","seriesId":null}},{"id":"54abed62-aab5-552b-8302-a8b81f763c22","frontmatter":{"slug":"/think/2021/07/19/design-system-and-streaming.html","date":"2021-07-19T00:00:00.000Z","title":"디자인시스템과 라이브 방송","seriesId":null}},{"id":"3f48d674-8ee3-5386-b590-46fa6efd0a7c","frontmatter":{"slug":"/2021-07-scrap","date":"2021-07-31T00:00:00.000Z","title":"2021-07 스크랩","seriesId":null}},{"id":"d9472afd-0b7b-5080-aa35-0b184126e5d6","frontmatter":{"slug":"/dev/2021/08/09/testing-frontend.html","date":"2021-08-09T00:00:00.000Z","title":"프론트엔드 테스트할 기회가 생겼다","seriesId":null}},{"id":"4633cfe8-175a-5d74-a012-0f803d4b297a","frontmatter":{"slug":"/think/2021/08/23/customizing-keyboard.html","date":"2021-08-23T00:00:00.000Z","title":"한성 키보드를 매직 키보드와 유사하게 사용하기","seriesId":null}},{"id":"fd40ed5a-e5cb-5c37-a29f-44cf8f87a75f","frontmatter":{"slug":"/dev/2021/08/26/utterances.html","date":"2021-08-26T00:00:00.000Z","title":"블로그 댓글 서비스 교체: Utterances","seriesId":null}},{"id":"d9bba45e-e456-5f8c-95ff-f2baac54b928","frontmatter":{"slug":"/dev/2021/08/31/disqus-to-utterances.html","date":"2021-08-31T00:00:00.000Z","title":"블로그 댓글 서비스 교체: Disqus → Utterances 데이터 이관 ","seriesId":null}},{"id":"1abaca12-c481-5f90-8fe6-6f244219f7d5","frontmatter":{"slug":"/2021-08-scrap","date":"2021-08-31T00:00:00.000Z","title":"2021-08 스크랩","seriesId":null}},{"id":"6d27d373-658c-531a-a6d7-f3eaa57a8d34","frontmatter":{"slug":"/2021-09-scrap","date":"2021-09-30T00:00:00.000Z","title":"2021-09 스크랩","seriesId":null}},{"id":"550b86da-b14b-5788-860d-55eb5571b573","frontmatter":{"slug":"/dev/2021/10/29/return-to-intellij.html","date":"2021-10-29T00:00:00.000Z","title":"최근에 발견한 인텔리제이 기능과 플러그인","seriesId":null}},{"id":"ef82afec-02a5-54b4-b685-bd126d49c0bd","frontmatter":{"slug":"/2021-10-scrap","date":"2021-10-31T00:00:00.000Z","title":"2021-10 스크랩","seriesId":null}},{"id":"58f4c3e0-94e2-50a2-9639-30d8bfd2e5e4","frontmatter":{"slug":"/2021-11-scrap","date":"2021-11-30T00:00:00.000Z","title":"2021-11 스크랩","seriesId":null}},{"id":"99ab0c76-e135-5d08-b4cf-93ebbfdb0ea4","frontmatter":{"slug":"/2022-01-scrap","date":"2022-01-31T00:00:00.000Z","title":"2022-01 스크랩","seriesId":null}},{"id":"79e6619c-f092-51a4-8fb8-3613ce2f387f","frontmatter":{"slug":"/2022/02/28/scrap","date":"2022-02-28T00:00:00.000Z","title":"2022-02 스크랩","seriesId":null}},{"id":"bb07b900-a4c1-5353-adf5-68e0283d98c5","frontmatter":{"slug":"/dev/2022/03/29/react-form-and-formik.html","date":"2022-03-29T00:00:00.000Z","title":"리액트로 폼(Form) 다루기","seriesId":null}},{"id":"8c7b8967-edc3-57ce-b628-4aff16282c66","frontmatter":{"slug":"/2022/03/31/scrap","date":"2022-03-31T00:00:00.000Z","title":"2022-03 스크랩","seriesId":null}},{"id":"544f02d3-db8a-520c-a64b-6c0b1e78a497","frontmatter":{"slug":"/dev/2022/04/11/use-state.html","date":"2022-04-11T00:00:00.000Z","title":"리액트 useState는 어떤 모습일까?","seriesId":null}},{"id":"5d26b369-3206-5f25-8870-85422dee72fb","frontmatter":{"slug":"/dev/2022/04/24/use-effect.html","date":"2022-04-24T00:00:00.000Z","title":"리액트 useEffect는 어떤 모습일까?","seriesId":null}},{"id":"7212958f-d96b-59bc-ad7d-5493b072e428","frontmatter":{"slug":"/dev/2022/04/28/use-context.html","date":"2022-04-28T00:00:00.000Z","title":"리액트 useContext는 어떤 모습일까?","seriesId":null}},{"id":"d83941f0-732c-5ac0-8479-17b486eddfb7","frontmatter":{"slug":"/2022/04/30/scrap","date":"2022-04-30T00:00:00.000Z","title":"2022-04 스크랩","seriesId":null}},{"id":"96e1501f-f49c-5217-8113-a463a9841296","frontmatter":{"slug":"/dev/2022/05/06/react-router.html","date":"2022-05-06T00:00:00.000Z","title":"리액트 라우터 만들기 ","seriesId":null}},{"id":"97cd57e7-1084-5fe8-a91b-d3e461985de2","frontmatter":{"slug":"/react-strict-mode","date":"2022-05-20T00:00:00.000Z","title":"리액트 StrictMode","seriesId":null}}]}},"pageContext":{"slug":"/dev/2019/02/07/go-net-http.html","date":"2019-02-07T00:00:00.000Z","seriesId":null,"videoId":null,"previous":{"frontmatter":{"slug":"/dev/2019/01/18/go-encoding-json.html","date":"2019-01-18T00:00:00.000Z","title":"Go encoding/json 패키지","category":"dev","seriesId":null,"videoId":null}},"next":{"frontmatter":{"slug":"/dev/2019/02/18/go-todo-web-application.html","date":"2019-02-18T00:00:00.000Z","title":"Go로 투두 웹 어플리케이션 만들기","category":"dev","seriesId":null,"videoId":null}}}},
    "staticQueryHashes": ["3044774879"]}