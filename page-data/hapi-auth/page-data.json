{"componentChunkName":"component---src-templates-blog-post-index-tsx","path":"/hapi-auth/","result":{"data":{"site":{"siteMetadata":{"title":"김정환 블로그","url":"https://jeonghwan-kim.github.io"}},"markdownRemark":{"id":"2f1e7166-7e7f-5a94-ab23-fd9358e18317","excerpt":"이번에는 Hapi Api 서버의 인증 기능을 구현해 보자. hapi-auth-cookie 모듈을 이용하여 세션 쿠키를 이용하여 인증을 구현할 것이다. 인증 정보를 세션에 저장하고 클라이언트와는 쿠키를 통해 인증상태를 통신하도록 구현한다. 세션 인증 활성화 Hapi에는 서버객체의 reg…","html":"<p>이번에는 Hapi Api 서버의 인증 기능을 구현해 보자. <a href=\"https://github.com/hapijs/hapi-auth-cookie\">hapi-auth-cookie</a> 모듈을 이용하여 <a href=\"http://www-01.ibm.com/support/knowledgecenter/SSPREK_8.0.0.2/com.ibm.amweb.doc_8.0.0.2/wrp_config/concept/con_sess_cookies_conc.html?lang=ko\">세션 쿠키</a>를 이용하여 인증을 구현할 것이다. 인증 정보를 세션에 저장하고 클라이언트와는 쿠키를 통해 인증상태를 통신하도록 구현한다.</p>\n<h1 id=\"세션-인증-활성화\" style=\"position:relative;\"><a href=\"#%EC%84%B8%EC%85%98-%EC%9D%B8%EC%A6%9D-%ED%99%9C%EC%84%B1%ED%99%94\" aria-label=\"세션 인증 활성화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>세션 인증 활성화</h1>\n<p>Hapi에는 서버객체의 register() 함수를 통해 플러그인을 등록할 수 있다. Hapi에서의 플러그인은 익스프레스의 미들웨어와 비슷한 개념이다. 세션 인증 모듈 hapi-auth-cookie를 등록하기위해 <code>server.register()</code> 함수를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Hapi 서버 객체를 이용해 인증 설정을 한다.</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">server</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 인증 모듈을 등록한다.</span>\n  server<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hapi-auth-cookie\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> err\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 인증 strategy 를 생성한다.</span>\n    server<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">.</span><span class=\"token function\">strategy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mySessionStrategy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cookie\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      password<span class=\"token operator\">:</span> <span class=\"token string\">\"secret\"</span><span class=\"token punctuation\">,</span>\n      cookie<span class=\"token operator\">:</span> <span class=\"token string\">\"sid-example\"</span><span class=\"token punctuation\">,</span>\n      redirectTo<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      isSecure<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>인증에는 <code>scheme</code>와 <code>strategy</code>라는 두 가지 개념이 등장한다. scheme은 hapi-auth-cookie 모듈을 통해 생성되는데 서버의 인증 방법을 설정하는 것이다. hapi에서는 scheme별로 추가적인 모듈을 제공한다.</p>\n<ul>\n    <li><a href=\"https://github.com/hapijs/hapi-auth-basic\">hapi-auth-basic</a></li>\n    <li><a href=\"https://github.com/hapijs/hapi-auth-cookie\">hapi-auth-cookie</a></li>\n    <li><a href=\"https://github.com/hapijs/hapi-auth-hawk\">hapi-auth-hawk</a> (잘 모르겠음)</li>\n</ul>\n<p>이외에도 서드파티에서 제공하는 shceme 모듈이 있다.</p>\n<ul>\n    <li><a href=\"https://github.com/j/hapi-auth-bearer\">hapi-auth-bearer</a></li>\n    <li><a href=\"https://github.com/asafdav/hapi-auth-extra\">hapi-auth-extra</a></li>\n</ul>\n<p>strategy는 서버객체의 <code>server.auth.strategy()</code> 함수로 생성하는데 세부적인 인증 정책에 대한 정의라고 할 수 있다. 위 샘플코드의 경우 세션쿠키에 대해 비밀번호 설정, 쿠키명 설정, 리타이렉트 정책 설정, secure 설정을 정의하고 있다.</p>\n<p>세션 플러그인을 설정한 Hapi 서버 객체는 request 객체를 통해 세션을 시작하고 종료할 수 있다.</p>\n<ul>\n    <li>request.auth.session.set(): 세션 시작</li>\n    <li>request.auth.session.clear(): 세션 종료</li>\n</ul>\n<p>이 두 함수를 이용해 세션 시작/종료 함수를 구현한 것이 아래 코드다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">startup</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">auth<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 사전 인증정보가 없을 경우 세션에 인증정보 저장</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>auth<span class=\"token punctuation\">.</span>isAuthenticated<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    auth<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">teardown</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">auth</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 세션정보 삭제</span>\n  auth<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이상 Hapi 서버에 세션 쿠키 인증을 위한 환경설정을 마쳤다. 이제는 실제 인증을 위한 프로토콜일 login, logout을 구현해 보자.</p>\n<h1 id=\"라우팅-설정\" style=\"position:relative;\"><a href=\"#%EB%9D%BC%EC%9A%B0%ED%8C%85-%EC%84%A4%EC%A0%95\" aria-label=\"라우팅 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>라우팅 설정</h1>\n<p>프로토콜은 최대한 RESTful 하게 작성하기 위해 아래와 같이 구현한다.</p>\n<ul>\n    <li>/auth (post): 로그인, 인증 파라메터는 payload로 받는다. 인증성공시 201, 실패시 403코드를 반환한다.</li>\n    <li>/auth (delete): 로그아웃</li>\n    <li>/auth (get): 테스트용 프로토콜. 세션 정보를 확인한다.</li>\n</ul>\n<p>우선 위 프로토콜에 대한 라우팅 설정하는 부분이다. route() 함수 설정 객체의 속성중 config.auth 키를 통해 인증 정책을 설정한다. <code>mode</code>는 'try', 'required' 두 가지 타입을 설정할 수 있다. 로그인의 경우 'try'를 설정하고 인증된 상태에서 접근할수 있는 프로토콜은 'required'를 설정한다. <code>strategy</code>는 server.auth.strategy() 함수로 생성한 strategy를 문자열로 설정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">server</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 로그인</span>\n  server<span class=\"token punctuation\">.</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    method<span class=\"token operator\">:</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">\"/auth\"</span><span class=\"token punctuation\">,</span>\n    handler<span class=\"token operator\">:</span> ctrl<span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">,</span>\n    config<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      auth<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        mode<span class=\"token operator\">:</span> <span class=\"token string\">\"try\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 인증 시도</span>\n        strategy<span class=\"token operator\">:</span> <span class=\"token string\">\"mySessionStrategy\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 사용할 strategy</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 로그아웃</span>\n  server<span class=\"token punctuation\">.</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    method<span class=\"token operator\">:</span> <span class=\"token string\">\"DELETE\"</span><span class=\"token punctuation\">,</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">\"/auth\"</span><span class=\"token punctuation\">,</span>\n    handler<span class=\"token operator\">:</span> ctrl<span class=\"token punctuation\">.</span>logout<span class=\"token punctuation\">,</span>\n    config<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      auth<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        mode<span class=\"token operator\">:</span> <span class=\"token string\">\"required\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 인증 필수</span>\n        strategy<span class=\"token operator\">:</span> <span class=\"token string\">\"mySessionStrategy\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 세션 확인 (개발용)</span>\n  server<span class=\"token punctuation\">.</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    method<span class=\"token operator\">:</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">\"/auth\"</span><span class=\"token punctuation\">,</span>\n    handler<span class=\"token operator\">:</span> ctrl<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">,</span>\n    config<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      auth<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        mode<span class=\"token operator\">:</span> <span class=\"token string\">\"required\"</span><span class=\"token punctuation\">,</span>\n        strategy<span class=\"token operator\">:</span> <span class=\"token string\">\"mySessionStrategy\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"컨트롤러-로직\" style=\"position:relative;\"><a href=\"#%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC-%EB%A1%9C%EC%A7%81\" aria-label=\"컨트롤러 로직 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컨트롤러 로직</h1>\n<p>로그인 시나리오는 이렇다. /auth (post) 프로토콜을 통해 인증 시도 → 인증 정보 검증 → 검증에 통과하면 세션에 유저정보 저장 → 클라이언트에 인증 성공 정보를 응답. 아래 코드와 주석을 같이 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 위에서 구현한 세션 모듈. 이것을 통해서 세션 시작/종료 할 수 있다.</span>\n<span class=\"token keyword\">var</span> session <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../../components/session'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">login</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> reply</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    username<span class=\"token operator\">:</span> <span class=\"token string\">'Chris'</span><span class=\"token punctuation\">,</span>\n    password<span class=\"token operator\">:</span> <span class=\"token string\">'chrisPass'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 인증 정보 검증</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>username <span class=\"token operator\">!==</span> req<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>username <span class=\"token operator\">||</span> user<span class=\"token punctuation\">.</span>password <span class=\"token operator\">!==</span> req<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">reply</span><span class=\"token punctuation\">(</span><span class=\"token number\">403</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 세션 시작, 유저정보 저장</span>\n  session<span class=\"token punctuation\">.</span><span class=\"token function\">startup</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 인증 성공 정보를 응답</span>\n  <span class=\"token function\">reply</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">code</span><span class=\"token punctuation\">(</span><span class=\"token number\">201</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>pre<span class=\"token operator\">></span>\n\n로그아웃은 세션을 삭제하고 응답한다<span class=\"token punctuation\">.</span> find는 세션 확인용이다<span class=\"token punctuation\">.</span>\n\n<span class=\"token operator\">&lt;</span>pre <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"lang:js decode:true \"</span> title<span class=\"token operator\">=</span><span class=\"token string\">\"routes/auth/auth.ctrl.js\"</span><span class=\"token operator\">></span>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">logout</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> reply</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// 세선 종료</span>\n  session<span class=\"token punctuation\">.</span><span class=\"token function\">teardown</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 응답</span>\n  <span class=\"token function\">reply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 세션 확인용</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">find</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> reply</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">reply</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이상으로 로그인/로그아웃 프로토콜을 구현했다. 실제 로그인, 로그아웃 프로토콜 결과를 첨부한다.</p>\n<p>로그인:</p>\n<p><img src=\"/assets/imgs/2015/login.png\" alt=\"login\"></p>\n<p>세션확인:</p>\n<p><img src=\"/assets/imgs/2015/get-auth.png\" alt=\"get-auth\"></p>\n<p>로그아웃:</p>\n<p><img src=\"/assets/imgs/2015/logout.png\" alt=\"logout\"></p>\n<p> </p>\n<p>전체 코드: <a href=\"https://github.com/jeonghwan-kim/hapi_study/tree/08_auth%EA%B5%AC%ED%98%84\">https://github.com/jeonghwan-kim/hapi<em>study/tree/08</em>auth구현</a></p>","fields":{"dateStr":"2015년 02월 18일","date":"2015-02-18T20:41:16.000Z","slug":"/hapi-auth/"},"frontmatter":{"title":"Hapi 인증","tags":["authentication","hapijs"],"seriesId":"f390bf73-face-589a-be3e-5d38fc5f704b","videoId":null,"featured_image":null,"featuredImage":null},"tableOfContents":"<ul>\n<li><a href=\"#%EC%84%B8%EC%85%98-%EC%9D%B8%EC%A6%9D-%ED%99%9C%EC%84%B1%ED%99%94\">세션 인증 활성화</a></li>\n<li><a href=\"#%EB%9D%BC%EC%9A%B0%ED%8C%85-%EC%84%A4%EC%A0%95\">라우팅 설정</a></li>\n<li><a href=\"#%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC-%EB%A1%9C%EC%A7%81\">컨트롤러 로직</a></li>\n</ul>"},"series":{"id":"f390bf73-face-589a-be3e-5d38fc5f704b","title":"Hapi.js로 API 서버 시작하기"},"video":null,"allMarkdownRemark":{"nodes":[{"id":"8a5e64d3-5ad7-5113-9752-99272410a942","fields":{"slug":"/start-with-hapi/","date":"2015-02-14T16:15:06.000Z"},"frontmatter":{"title":"Hapi 시작하기","seriesId":"f390bf73-face-589a-be3e-5d38fc5f704b"}},{"id":"dab2c7a8-dd59-55c2-8903-95a9f1742232","fields":{"slug":"/hapijs-joi/","date":"2015-02-14T17:43:54.000Z"},"frontmatter":{"title":"Hapi 파라매터 검증, Joi","seriesId":"f390bf73-face-589a-be3e-5d38fc5f704b"}},{"id":"8df9709d-281b-56e7-af9d-182823518a79","fields":{"slug":"/hapi-logging-good/","date":"2015-02-16T10:23:33.000Z"},"frontmatter":{"title":"Hapi 로깅, Good","seriesId":"f390bf73-face-589a-be3e-5d38fc5f704b"}},{"id":"2f1e7166-7e7f-5a94-ab23-fd9358e18317","fields":{"slug":"/hapi-auth/","date":"2015-02-18T20:41:16.000Z"},"frontmatter":{"title":"Hapi 인증","seriesId":"f390bf73-face-589a-be3e-5d38fc5f704b"}},{"id":"c7003df2-680e-53bd-921e-321ef3d4b7e7","fields":{"slug":"/hapi-test/","date":"2015-02-19T18:50:23.000Z"},"frontmatter":{"title":"Hapi 테스트 코드","seriesId":"f390bf73-face-589a-be3e-5d38fc5f704b"}},{"id":"b23fd909-fca2-5bc1-87da-adb6a48895db","fields":{"slug":"/hapi-api-server-scaffold/","date":"2015-02-22T12:00:26.000Z"},"frontmatter":{"title":"Hapi Api 서버 스캐폴드","seriesId":"f390bf73-face-589a-be3e-5d38fc5f704b"}}]}},"pageContext":{"slug":"/hapi-auth/","date":"2015-02-18T20:41:16.000Z","seriesId":"f390bf73-face-589a-be3e-5d38fc5f704b","videoId":null,"previous":{"fields":{"slug":"/hapi-logging-good/","date":"2015-02-16T10:23:33.000Z","beforeGatsby":true},"frontmatter":{"title":"Hapi 로깅, Good","category":"series","permalink":"/hapi-logging-good/","seriesId":"f390bf73-face-589a-be3e-5d38fc5f704b","videoId":null}},"next":{"fields":{"slug":"/wordpress-and-grunt/","date":"2015-02-18T21:35:59.000Z","beforeGatsby":true},"frontmatter":{"title":"워드프레스에 Grunt 설정하기","category":"dev","permalink":"/wordpress-and-grunt/","seriesId":null,"videoId":null}}}},"staticQueryHashes":["1591182808"]}