{"componentChunkName":"component---src-templates-blog-post-index-tsx","path":"/2017/10/03/diy-express-day1.html","result":{"data":{"site":{"siteMetadata":{"title":"김정환 블로그","url":"https://jeonghwan-kim.github.io"}},"markdownRemark":{"id":"c851f5ac-71d2-5f87-a445-97115296ee4b","excerpt":"이번 추석만 기다리고 있었다. 어느때 보다 긴 연휴라서 그리고 혼자있는 시간이 생겨서 집중해서 해보고 싶은\n일이 있었다. 프레임웍을 사용하지 않고 웹 어플리케이션을 개발하는 것.\n만들게 되면 아마도 노드 익스프레스와 비슷한 구조일 것 같다. 헬로 월드부터 시작하자 서버 어플리케이션이니…","html":"<p>이번 추석만 기다리고 있었다. 어느때 보다 긴 연휴라서 그리고 혼자있는 시간이 생겨서 집중해서 해보고 싶은\n일이 있었다. 프레임웍을 사용하지 않고 웹 어플리케이션을 개발하는 것.\n만들게 되면 아마도 노드 익스프레스와 비슷한 구조일 것 같다.</p>\n<h2 id=\"헬로-월드부터-시작하자\" style=\"position:relative;\"><a href=\"#%ED%97%AC%EB%A1%9C-%EC%9B%94%EB%93%9C%EB%B6%80%ED%84%B0-%EC%8B%9C%EC%9E%91%ED%95%98%EC%9E%90\" aria-label=\"헬로 월드부터 시작하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>헬로 월드부터 시작하자</h2>\n<p>서버 어플리케이션이니깐 app.js에다 헬로 월드 코드부터 만들자.</p>\n<p>app.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> hostname <span class=\"token operator\">=</span> <span class=\"token string\">\"127.0.0.1\"</span>\n<span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> <span class=\"token number\">3000</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/plain\"</span><span class=\"token punctuation\">)</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\\n\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> hostname<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server running at http://</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>hostname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>음... 어플리케이션 코드에 서버 실행 코드는 빼도 되겠다.\n<code class=\"language-text\">server.listen()</code> 호출부분은 bin.js로 분리하자.</p>\n<p>app.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/plain\"</span><span class=\"token punctuation\">)</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\\n\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> app</code></pre></div>\n<p>bin.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./app\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> hostname <span class=\"token operator\">=</span> <span class=\"token string\">\"127.0.0.1\"</span>\n<span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> <span class=\"token number\">3000</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> hostname<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server running at http://</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>hostname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>아, 참고로 모든 코드는 TDD로 작성할거다.\n모카 프레임웍만 추가하고 검증은 assert 기본 모듈로 사용해야지.\n나중에 기회가 되면 모카도 구현해 볼거다.</p>\n<h2 id=\"application\" style=\"position:relative;\"><a href=\"#application\" aria-label=\"application permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Application</h2>\n<p>헬로월드에서 사용한 http 모듈. 이것을 그대로 사용할 수는 없지.\n한번더 추상화해서 Application 모듈로 감싸자. 익스프레스 Application 기능과 비슷한 거다.</p>\n<p>application.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Application</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/plain\"</span><span class=\"token punctuation\">)</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\\n\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> hostname <span class=\"token operator\">=</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> hostname<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>간단히 <code class=\"language-text\">listen()</code> 함수만 노출시키자.\n익스프레스의 Application은 <code class=\"language-text\">use()</code>, <code class=\"language-text\">get()</code>, <code class=\"language-text\">set()</code> 같은 메소드가 있지만 아직은 필요없으니깐.</p>\n<p>app.js에는 요걸 간단히 생성만 하고:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./modules/application\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> app</code></pre></div>\n<p>bind.js에서는 <code class=\"language-text\">app.listen()</code> 메소드를 실행한다:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./app\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> hostname <span class=\"token operator\">=</span> <span class=\"token string\">\"127.0.0.1\"</span>\n<span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> <span class=\"token number\">3000</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> hostname<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server running at http://</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>hostname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"디버그-모듈\" style=\"position:relative;\"><a href=\"#%EB%94%94%EB%B2%84%EA%B7%B8-%EB%AA%A8%EB%93%88\" aria-label=\"디버그 모듈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>디버그 모듈</h2>\n<p><a href=\"https://github.com/visionmedia/debug\">debug</a> 모듈이 편리한 점은\n태그를 한번 설정하면 자동으로 붙여주는 거다. debug 모듈을 만들어야겠다.</p>\n<p>debug.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">debug</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">tag</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>msg</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>msg<span class=\"token punctuation\">)</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> debug</code></pre></div>\n<p>음... 잠깐. 디버그 모듈은 태그에 색상이 있었잖아. 색상도 추가해 보자.\n<a href=\"https://stackoverflow.com/questions/9781218/how-to-change-node-jss-console-font-color?answertab=active#tab-top\">여기</a>를\n보니깐 <code class=\"language-text\">console.log()</code> 함수에 색상 설정하는 방법이 있네.</p>\n<p>debug.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"cyan\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token string\">\"\\x1b[36m\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"yellow\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token string\">\"\\x1b[33m\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token string\">\"\\x1b[31m\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"green\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token string\">\"\\x1b[32m\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"magenta\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token string\">\"\\x1b[35m\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> resetColor <span class=\"token operator\">=</span> <span class=\"token string\">\"\\x1b[0m\"</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">debug</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">tag</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> randIdx <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> colors<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> colors<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">const</span> color <span class=\"token operator\">=</span> colors<span class=\"token punctuation\">[</span>randIdx<span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>msg</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>color<span class=\"token punctuation\">.</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">[</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>tag<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">]</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>resetColor<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>msg<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> debug</code></pre></div>\n<p>debug 모듈과 똑같이 생성시 태그 문자열을 넘겨주고 사용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> debug <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./gdebug\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"app\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"app is initiated\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><img src=\"/assets/imgs/2017/10/debug-result.png\" alt=\"debug result\"></p>\n<h2 id=\"정적-파일-제공\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%A0%81-%ED%8C%8C%EC%9D%BC-%EC%A0%9C%EA%B3%B5\" aria-label=\"정적 파일 제공 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정적 파일 제공</h2>\n<p>정적 파일이라 불리는 HTML, CSS, 자바스크립트를 제공하는 기능을 만들자.\n물론 이미지, 폰트도 함께 말이다.\npublic 폴더를 만들어 정적 파일을 담고 요청이 있으면 이 폴더의 파일을 제공하도록 한다.</p>\n<p>파일 작업을 할거니깐 <a href=\"https://nodejs.org/dist/latest-v8.x/docs/api/fs.html\">fs</a> 모듈을\n사용하면 되겠다.</p>\n<p>먼저 index.html 파일을 읽어서 응답해 보자.</p>\n<p>application.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Application</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/plain\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> filePath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"../public/index.html\"</span><span class=\"token punctuation\">)</span>\n    fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err\n\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>index.html 파일 내용이 터미널에 잘 찍히는군.\n브라우져로 열어보면? 그냥 문자로만 보임. HTML 문서로 보여야하는데...</p>\n<p>'text/plain' 기본 응답 헤더를 변경하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/html\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>옳지! 이제 HTML 문서로 렌더링 되는군.</p>\n<p>css, 자바스크립트는? 흠... 둘다 index.html 파일로 응답되는것 같다.\n이 경로에 대한 라우팅 로직이 없어서 그렇구만.\n단순히 index.html만 보여주는 것으론 부족함. css, js 등 모든 정적 파일을 제공하는 로직을 추가하자.</p>\n<ul>\n<li>요청 주소 <code class=\"language-text\">req.url</code>을 파싱한다</li>\n<li>확장자를 추출한다</li>\n<li>확장자별로 미리 정의한 http 헤더를 응답에 추가한다</li>\n<li>파일을 읽어 응답으로 보낸다</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mimeType <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\".ico\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"image/x-icon\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\".html\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text/html\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\".js\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text/javascript\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\".css\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text/css\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\".png\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"image/png\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\".jpg\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"image/jpeg\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\".eot\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"appliaction/vnd.ms-fontobject\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\".ttf\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"aplication/font-sfnt\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> ext <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ext\n<span class=\"token keyword\">const</span> publicPath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"../public\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>mimeType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>ext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>publicPath<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>req<span class=\"token punctuation\">.</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      res<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">404</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not found\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n\n    res<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> mimeType<span class=\"token punctuation\">[</span>ext<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>옳지. <code class=\"language-text\">/index.html</code>로 접속하면 index.html 파일을 읽어서 요청측으로 보내준다.\n브라우져는 index.html을 렌더링하다가 script.js와 style.css를 추가 요청한다. 서버에서는\n이 파일도 읽어서 보내준다.</p>\n<p>파일 찾기에 실패하면 404 Not found를 응답한다.</p>\n<h2 id=\"리팩토링\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81\" aria-label=\"리팩토링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리팩토링</h2>\n<p>코드가 좀 길어졌다. 이 녀석을 modules 폴더로 이동해서 분리하자.\nstiatc-serve 모듈로 분리. http에서 만들어내는 req, res 객체를 넘겨 받아서 파일을 처리한다.\n익스프레스에서 사용한 <a href=\"https://github.com/expressjs/serve-static/\">serve-static</a>과\n비슷한 녀석이다. 이름이 거꾸로 됐군.</p>\n<p>static-serve.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> debug <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./debug\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"static-serve\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">staticServe</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> mimeType <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\".ico\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"image/x-icon\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\".html\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text/html\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\".js\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text/javascript\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\".css\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text/css\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\".png\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"image/png\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\".jpg\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"image/jpeg\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\".eot\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"appliaction/vnd.ms-fontobject\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\".ttf\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"aplication/font-sfnt\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> ext <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ext\n  <span class=\"token keyword\">const</span> publicPath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"../public\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ext:\"</span><span class=\"token punctuation\">,</span> ext<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>mimeType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>ext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>publicPath<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>req<span class=\"token punctuation\">.</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        res<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">404</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n      <span class=\"token punctuation\">}</span>\n\n      res<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> mimeType<span class=\"token punctuation\">[</span>ext<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> staticServe</code></pre></div>\n<p>application 모듈에서는 static-serve에 <code class=\"language-text\">req</code>, <code class=\"language-text\">res</code> 객체를 전달해서 실행한다</p>\n<p>application.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Application</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">staticServe</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> hostname <span class=\"token operator\">=</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"listen()\"</span><span class=\"token punctuation\">)</span>\n      server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> hostname<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>간단하게 application 코드를 유지하고 정적 파일을 처리하는 역할은 static-serve로 분리완료.</p>\n<h2 id=\"루트경로-접속시에-indexhtml을-제공\" style=\"position:relative;\"><a href=\"#%EB%A3%A8%ED%8A%B8%EA%B2%BD%EB%A1%9C-%EC%A0%91%EC%86%8D%EC%8B%9C%EC%97%90-indexhtml%EC%9D%84-%EC%A0%9C%EA%B3%B5\" aria-label=\"루트경로 접속시에 indexhtml을 제공 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>루트경로 접속시에 index.html을 제공</h2>\n<p><code class=\"language-text\">/</code> 로 요청시 <code class=\"language-text\">index.html</code>를 제공하도록 하자. 보통은 그렇게 만드니깐.</p>\n<p>application.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Application</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">staticServe</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> publicPath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"../public\"</span><span class=\"token punctuation\">)</span>\n    fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>publicPath<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/index.html</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err\n\n      res<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/html\"</span><span class=\"token punctuation\">)</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>정적 파일 요청이 아니면 index.html를 호출하도록 한것이다.\n<code class=\"language-text\">/</code>로 요청하면 index.html이 응답된다.</p>\n<p>하지만... <code class=\"language-text\">/index.html</code>로 요청하면 에러발생!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Error: Can&#39;t set headers after they are sent.</code></pre></div>\n<p><code class=\"language-text\">/index.html</code>로 요청하면 헤더를 다시 보낼수 없다는 에러가 발생한다. 이런 상황인것 같다.</p>\n<ul>\n<li><code class=\"language-text\">/index.thml</code>로 요청이 들어온다</li>\n<li>static-serve 모듈이 먼저 동작한다</li>\n<li>요청 url을 가지고 확장자를 추출한다</li>\n<li>정적파일을 찾고 응답한다</li>\n<li>application으로 돌아와서 index.html 파일을 한번 더 읽는다</li>\n<li><code class=\"language-text\">res</code> 객체로 한번 더 응답하려고 한다</li>\n<li>헤더를 다시 보낼수 없다는 에러가 발생한다</li>\n</ul>\n<p>static-serve 모듈로 분리전에는 잘 동작했는데 리팩토링한 후에는 실패하는 이유가 뭘까?\n전에는 return 문으로 로직을 제어할 수 있었다. 별도 파일(모듈, 함수)로 분리되면서\napplication에서 return 문 제어가 동작하지 않는 것이다</p>\n<p>게다가 문제는 더 있다.\nstatic-serve가 로직을 수행하다가 에러를 만나면 어떻게 처리해야 할까?\n정적 파일을 찾지 못하는 경우 말이다.\n여기서는 404를 응답하도록 res 객체를 사용해 버린것인데...\napplication 으로 나오면 다시 res 객체를 사용해서 index.html을 위한 작업을 또 하게된다.\n헤더를 두번 읽는다는 에러가 또 나오겠지.</p>\n<p>뭔가 큰 구조 변경이 필요하다.</p>\n<h2 id=\"미들웨어\" style=\"position:relative;\"><a href=\"#%EB%AF%B8%EB%93%A4%EC%9B%A8%EC%96%B4\" aria-label=\"미들웨어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>미들웨어</h2>\n<p>그렇지. <a href=\"https://blog.risingstack.com/fundamental-node-js-design-patterns/#middlewarespipelines\">미들웨어 패턴</a>을 사용하면 될것 같다.\n익스프레스 프레임웍의 4가지 주요 기능중에 하나가 <a href=\"http://expressjs.com/en/guide/writing-middleware.html\">미들웨어</a>다.</p>\n<ul>\n<li>어플리케이션 객체에 미들웨어 함수를 추가하는 방식으로 기능을 확장할 수 있다</li>\n<li>에러가 발생하면 연결된 미들웨어간에 파라매터로 전달할 수 있는 특징이 있다</li>\n</ul>\n<p>미들웨러를 추가하는 방식의 <code class=\"language-text\">application.use()</code> 함수로 추가한다. 클라이언트 요청이 들어오면\n미들웨어로 추가한 함수를 모두 실행하도록 한다.</p>\n<p>코딩중...</p>\n<p>오마이가앗~ 좀 복잡하군. 여튼 해결했다.</p>\n<p>에러 처리가 좀 복잡했다.\n파라매터 갯수로 에러를 처리하도록 했다.\n3개를 받으면 일반 미들웨어 4개를 받으면 에러미들웨어로 처리했다. 익스프레스 엔진에서는 다른 방법으로\n구현한게 확실하다. 갯수에 의존적이지 않으니깐.</p>\n<p>application.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Application</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 클라이언트 요청이 들어오면 이미 설정한 미들웨어들을 순차적으로 실행한다</span>\n  <span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">runMw</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">middlewares<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">>=</span> middlewares<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n\n      <span class=\"token keyword\">const</span> nextMw <span class=\"token operator\">=</span> middlewares<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">next</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token function\">runMw</span><span class=\"token punctuation\">(</span>middlewares<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isErrorMw</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">mw</span> <span class=\"token operator\">=></span> mw<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">4</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isErrorMw</span><span class=\"token punctuation\">(</span>nextMw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">nextMw</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// 에러가 있고, 다음에 실행할 미들웨어가 에러 처리기가 아니면 그 다음 미들웨어를 찾는다</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">runMw</span><span class=\"token punctuation\">(</span>middlewares<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token function\">nextMw</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">runMw</span><span class=\"token punctuation\">(</span>middlewares<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">let</span> middlewares <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 미들웨어를 추가한다</span>\n    <span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      middlewares<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> hostname <span class=\"token operator\">=</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> hostname<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 구조에 따라 static-serve, hello-world, index 로직도 변경해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">staticServe</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/*... */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">index</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/*... */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">error404</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">404</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not Found\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">error</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"err mw:\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">.</span>message <span class=\"token operator\">||</span> err<span class=\"token punctuation\">)</span>\n  res<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">500</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">staticServe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>error404<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></code></pre></div>\n<p>나이스. 이제 좀 익스프레스처럼 코딩하는 것 같다. 오늘은 여기까지</p>","fields":{"dateStr":"2017년 10월 03일","date":"2017-10-03T00:00:00.000Z","slug":"/2017/10/03/diy-express-day1.html"},"frontmatter":{"title":"익스프레스 만들기 Day 1","tags":["expressjs"],"seriesId":"f301d537-b1a9-5ed7-8175-0ea58ee80a70","videoId":null,"featured_image":null,"featuredImage":null},"tableOfContents":"<ul>\n<li><a href=\"#%ED%97%AC%EB%A1%9C-%EC%9B%94%EB%93%9C%EB%B6%80%ED%84%B0-%EC%8B%9C%EC%9E%91%ED%95%98%EC%9E%90\">헬로 월드부터 시작하자</a></li>\n<li><a href=\"#application\">Application</a></li>\n<li><a href=\"#%EB%94%94%EB%B2%84%EA%B7%B8-%EB%AA%A8%EB%93%88\">디버그 모듈</a></li>\n<li><a href=\"#%EC%A0%95%EC%A0%81-%ED%8C%8C%EC%9D%BC-%EC%A0%9C%EA%B3%B5\">정적 파일 제공</a></li>\n<li><a href=\"#%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81\">리팩토링</a></li>\n<li><a href=\"#%EB%A3%A8%ED%8A%B8%EA%B2%BD%EB%A1%9C-%EC%A0%91%EC%86%8D%EC%8B%9C%EC%97%90-indexhtml%EC%9D%84-%EC%A0%9C%EA%B3%B5\">루트경로 접속시에 index.html을 제공</a></li>\n<li><a href=\"#%EB%AF%B8%EB%93%A4%EC%9B%A8%EC%96%B4\">미들웨어</a></li>\n</ul>"},"series":{"id":"f301d537-b1a9-5ed7-8175-0ea58ee80a70","title":"Express.js 만들기"},"video":null,"allMarkdownRemark":{"nodes":[{"id":"c851f5ac-71d2-5f87-a445-97115296ee4b","fields":{"slug":"/2017/10/03/diy-express-day1.html","date":"2017-10-03T00:00:00.000Z"},"frontmatter":{"title":"익스프레스 만들기 Day 1","seriesId":"f301d537-b1a9-5ed7-8175-0ea58ee80a70"}},{"id":"06940246-99d1-5a6f-b51a-6ea9825e503c","fields":{"slug":"/2017/10/05/diy-express-day2.html","date":"2017-10-05T00:00:00.000Z"},"frontmatter":{"title":"익스프레스 만들기 Day 2","seriesId":"f301d537-b1a9-5ed7-8175-0ea58ee80a70"}},{"id":"94cf8981-5aca-5efc-97e9-b496ece6473c","fields":{"slug":"/2017/10/06/diy-express-day3.html","date":"2017-10-06T00:00:00.000Z"},"frontmatter":{"title":"익스프레스 만들기 Day 3","seriesId":"f301d537-b1a9-5ed7-8175-0ea58ee80a70"}},{"id":"6c77651a-80d5-5bb4-ac7a-ec73e9336628","fields":{"slug":"/2017/10/21/diy-express-day4.html","date":"2017-10-21T00:00:00.000Z"},"frontmatter":{"title":"익스프레스 만들기 Day 4","seriesId":"f301d537-b1a9-5ed7-8175-0ea58ee80a70"}}]}},"pageContext":{"slug":"/2017/10/03/diy-express-day1.html","date":"2017-10-03T00:00:00.000Z","seriesId":"f301d537-b1a9-5ed7-8175-0ea58ee80a70","videoId":null,"previous":{"fields":{"slug":"/tool/2017/09/16/gulp-workflow-for-frentend-development.html","date":"2017-09-16T00:00:00.000Z","beforeGatsby":true},"frontmatter":{"title":"프론트엔드 개발을 위한 Gulp","category":"dev","permalink":"tool/2017/09/16/gulp-workflow-for-frentend-development.html","seriesId":null,"videoId":null}},"next":{"fields":{"slug":"/2017/10/05/diy-express-day2.html","date":"2017-10-05T00:00:00.000Z","beforeGatsby":true},"frontmatter":{"title":"익스프레스 만들기 Day 2","category":"series","permalink":"2017/10/05/diy-express-day2.html","seriesId":"f301d537-b1a9-5ed7-8175-0ea58ee80a70","videoId":null}}}},"staticQueryHashes":["1591182808"]}