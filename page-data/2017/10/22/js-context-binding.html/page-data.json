{"componentChunkName":"component---src-templates-blog-post-index-tsx","path":"/2017/10/22/js-context-binding.html","result":{"data":{"site":{"siteMetadata":{"title":"김정환 블로그","url":"https://jeonghwan-kim.github.io"}},"markdownRemark":{"id":"69f82274-96d6-5297-bd05-df69186c5068","html":"<p>자바스크립의 컨텍스트(this) 바인딩은 헷갈릴 때가 많다.\n\"이 정도면 이해할수 있겠군\" 하다가도, 막상 코딩하다 보면 예상치 못한 상황에 부딪쳐 당황한적이 있지 않은가?</p>\n<p>이 글은 자바스크립트 컨텍스트 바인딩을 \"<strong>우선순위</strong>\"라는 관점에서 정리했다.\n카일 심슨의 글 <a href=\"http://www.yes24.com/24/Goods/44132601?Acode=101\">this와 객체 프로토타입</a>을 참고했다.</p>\n<h2 id=\"기본-바인딩\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8-%EB%B0%94%EC%9D%B8%EB%94%A9\" aria-label=\"기본 바인딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본 바인딩</h2>\n<p>먼저 아래 코드로 시작해 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"chris\"</span>\n\n<span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"chris\"</span></code></pre></div>\n<p>기본적인 함수 실행이다.\n<code>hello()</code> 함수를 실행하면 this는 전역객체와 바인딩된다.\n자바스크립트는 <strong>기본적으로 전역 객체에 컨텍스트가 바인딩되는 규칙</strong>을 가진다.</p>\n<p>하지만 엄격모드에서는 좀 다르다.\n<code>hello()</code> 함수를 호출하면 기본바인딩 규칙이 동작하지 않는다.\n<code>hello()</code> 함수에서 this는 undefeined가 되어 \"Type Error\"가 발생한다.</p>\n<p><img src=\"/assets/imgs/2017/10/type-error.png\" alt=\"Type Error 캡쳐 이미지\"></p>\n<p>그럼 엄격모드와 비엄격모드를 섞어서 코딩하면 어떻게 될까?\n아래 코드를 읽어보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"chris\"</span>\n\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"use strict\"</span>\n  <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"chris\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>엄격모드에서 <code>hello()</code> 함수를 호출했더라도 함수 실행부가 비엄격 모드라면 컨텍스트는 전역 객체에 바인딩된다.</p>\n<p>브라우져 개발자 도구로 중단점을 찍어서 디버깅해 보면 엄격모드로 실행되는 호출부에서는 this가 undefined로 확인된다.</p>\n<p><img src=\"/assets/imgs/2017/10/context-in-strict-mode.png\" alt=\"엄격 모드에서의 컨텍스트 확인 캡처 이미지\"></p>\n<p><code>hello()</code> 함수 실행부에서는 전역인 Window 객체임을 알 수 있다.</p>\n<p><img src=\"/assets/imgs/2017/10/context-in-non-strict-mode.png\" alt=\"비엄격 모드에서의 컨텍스트 확인 캡처 이미지\"></p>\n<h2 id=\"암시적-바인딩\" style=\"position:relative;\"><a href=\"#%EC%95%94%EC%8B%9C%EC%A0%81-%EB%B0%94%EC%9D%B8%EB%94%A9\" aria-label=\"암시적 바인딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>암시적 바인딩</h2>\n<p>다음은 함수 호출시 객체의 프로퍼티로 접근해서 실행하는 암시적 바인딩이다.\n아래 코드를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"chris\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">hello</span><span class=\"token operator\">:</span> hello<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'chris'</span></code></pre></div>\n<p><code>obj</code> 객체의 <code>hello</code> 프로퍼티에 <code>hello()</code> 함수의 레퍼런스를 할당했다.\n그리고 이 <code>obj</code> 객체를 통해 <code>hello()</code> 함수를 호출했다.\n<code>hello()</code> 함수는 실행될때 <strong>호출부의 객체 프로퍼티로 접근했을 경우 이 객체를 this와 바인딩하는 규칙</strong>을 갖는다.</p>\n<p>하지만 객체 프로퍼티에 함수를 할당했더라도 아래와 같은 경우에는 다르게 동작한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"chris\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">hello</span><span class=\"token operator\">:</span> hello<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nhelloFn <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>hello\n\nname <span class=\"token operator\">=</span> <span class=\"token string\">\"global context!\"</span>\n\n<span class=\"token function\">helloFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'chris'일까 'global context!'일까?</span></code></pre></div>\n<p><code>obj</code> 객체의 프로퍼티에 <code>hello()</code> 함수를 할당했지만, <code>helloFn</code>에 레퍼런스를 저장하는 순간 이것은 일반 함수가 된다.</p>\n<p>따라서 일반함수 <code>helloFn()</code>을 호출하면 기본 바인딩 규칙을 따르게 된다.\n함수를 실행하는 순간 글로벌 컨택스트가 this에 바인딩되고 <code>this.name</code>은 <code>obj.name</code>이 아닌 글로벌 객체의 name인 'global context!'를 바라보게 되는 것이다.</p>\n<p>이런 형태는 콜백함수로 사용할 때 적잖게 발생하는 실수다.\n타이머에 콜백함수를 넘겨주는 코드다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"chris\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">hello</span><span class=\"token operator\">:</span> hello<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>hello<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1초 후에 hello 함수가 동작하면 this는?</span>\n\nname <span class=\"token operator\">=</span> <span class=\"token string\">\"global context!\"</span></code></pre></div>\n<p><code>setTimeout()</code> 함수에 콜백함수로 <code>obj.hello</code>를 넘겨줬다.\n<code>setTimeout</code> 측에서는 <code>obj</code> 객체와는 전혀 상관없이 <code>obj.hello</code>가 가리키는 <code>hello()</code> 함수만 알고 있을 뿐이다.\n1초후에 실행하는 코드는 <code>hello()</code>함수를 기본 바인딩해서 실행하는 것과 동일하다.</p>\n<p>따라서 위 결과는 'global context!'가 출력된다.</p>\n<h2 id=\"명시적-바인딩\" style=\"position:relative;\"><a href=\"#%EB%AA%85%EC%8B%9C%EC%A0%81-%EB%B0%94%EC%9D%B8%EB%94%A9\" aria-label=\"명시적 바인딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>명시적 바인딩</h2>\n<p>좀 더 직관적으로 \"난 객체를 컨택스트로 바인딩 할거야!\"라고 코드에 의도를 나타내는 방법은 없을까?\n그리고 타임아웃 함수에 넘겨준 콜백함수 문제도 해결하는 방법은 없을까?</p>\n<p>자바스크립트의 <code>call()</code>, <code>apply()</code>, <code>bind()</code> 함수가 그런 역할을 하는 내장 함수들이다.\n<code>call()</code>과 <code>apply()</code> 함수는 실행할 함수 인자를 넘기는 방식만 다를뿐, 컨텍스트 객체를 명시한다는 점에서 동일한 함수다.</p>\n<p><code>call()</code> 함수로 컨택스트를 명시하여 실행해 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"chris\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nname <span class=\"token operator\">=</span> <span class=\"token string\">\"global context!\"</span>\n<span class=\"token function\">hello</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"chris\"</span></code></pre></div>\n<p><code>call()</code>는 Function.prototype 객체의 프로퍼티 중의 하나다.\n<code>hello.call()</code> 형태로 사용할 수 있는 이유다.</p>\n<p><code>call()</code> 함수에 this 컨택스트와 바인딩할 객체를 명시할 수 있다.\n<code>hello()</code> 함수가 실행되면 this는 글로벌 컨택스트가 아닌 <code>obj</code> 객체가 된다.\n따라서 <code>this.name</code>은 <code>obj.name</code>과 같다.</p>\n<p>한편 <code>bind()</code>는 함수를 정의할때 컨택스트를 바인딩 할 수 있는데 이것은 \"<strong>하드 바인딩</strong>\"이라고 한다.</p>\n<p><code>setTimeout()</code> 함수에 전달할 함수를 <code>bind()</code>를 이용해 컨택스트를 명시해 보겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"chris\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">hello</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1초 후에 hello 함수가 동작하면 this는?</span>\n\nname <span class=\"token operator\">=</span> <span class=\"token string\">\"global context!\"</span></code></pre></div>\n<p><code>obj.hello</code>를 넘겨줄 때는 글로벌 컨택스트가 바인딩되는 반면, <code>obj.hello.bind(obj)</code>를 넘겨주면 <code>obj</code> 객체가 <code>hello()</code> 함수 실행시 this 컨택스트로 바인딩해서 실행하라는 의미다.\n따라서 1초 후에 <code>hello()</code> 함수가 실행될 것이고, 이때 this는 <code>obj</code> 객체를 가리킨다.\n따라서 <code>this.name</code> 값은 'chris'가 되는 것이다.</p>\n<h2 id=\"암시적-바인딩과-명시적-바인딩의-우선순위\" style=\"position:relative;\"><a href=\"#%EC%95%94%EC%8B%9C%EC%A0%81-%EB%B0%94%EC%9D%B8%EB%94%A9%EA%B3%BC-%EB%AA%85%EC%8B%9C%EC%A0%81-%EB%B0%94%EC%9D%B8%EB%94%A9%EC%9D%98-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84\" aria-label=\"암시적 바인딩과 명시적 바인딩의 우선순위 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>암시적 바인딩과 명시적 바인딩의 우선순위</h2>\n<p>그럼 암시적 바인딩과 명시적 바인딩의 우선순위는 어떻게 될까?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"chris\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">hello</span><span class=\"token operator\">:</span> hello<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'chris'</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">hello</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"alice\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'alice</span></code></pre></div>\n<p><code>obj.hello()</code>는 암시적 바인딩 규칙이 적용되어 <code>obj</code> 객체가 바인딩된다.\n<code>obj.name</code>인 'chris'를 출력한다.</p>\n<p>반면 <code>obj.hello.call()</code> 함수를 통해 <code>{name: 'alice'}</code> 객체를 명시적으로 바인딩하면,\n<code>obj</code> 객체를 통해 <code>hello()</code> 함수를 실행했더라도 <code>call()</code> 함수에 의해 명시적으로 바인딩된 <code>{name: 'alice'}</code> 객체가 this로 바인딩 된다.</p>\n<blockquote>\n<p>명시적 바인딩 > 암시적 바인딩</p>\n</blockquote>\n<p>따라서 암시적 바인딩을 확인하기 전에 반드시 <code>call()</code>, <code>apply()</code>, <code>bind()</code> 함수를 이용한 명시적 바인딩이 적용되었는지 확인하도록 하자!</p>\n<h2 id=\"new-바인딩\" style=\"position:relative;\"><a href=\"#new-%EB%B0%94%EC%9D%B8%EB%94%A9\" aria-label=\"new 바인딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>New 바인딩</h2>\n<p>마지막으로 new 바인딩을 살펴보겠다.</p>\n<p>자바스크립트 함수 앞에 new를 붙여서 실행하며 다음과 같은 일이 일어난다.</p>\n<ul>\n<li>새로운 객체를 반환한다</li>\n<li>새로운 객체는 객체의 메소드 호출시 this로 바인딩 된다</li>\n</ul>\n<p>아래 <code>Person()</code> 함수를 <code>new</code> 키워드로 호출하면 어떤 일이 일어날까?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'chris'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"chris\"</span></code></pre></div>\n<p><code>new Person(name)</code> 함수를 실행하면 새로운 객체를 반환하는데 이것이 <code>obj</code>에 할당된다.\n<code>obj.hello()</code> 를 실행하면 <code>hello()</code> 함수는 <strong>new로 반환된 obj 객체를 this 컨택스트와 바인딩 되는 규칙</strong>을 따른다.</p>\n<p>따라서 <code>hello()</code> 함수 내에서 this는 <code>new Person()</code> 이 반환하는 객체가 되는 것이다.</p>\n<h2 id=\"암시적-바인딩과-new-바인딩의-우선순위\" style=\"position:relative;\"><a href=\"#%EC%95%94%EC%8B%9C%EC%A0%81-%EB%B0%94%EC%9D%B8%EB%94%A9%EA%B3%BC-new-%EB%B0%94%EC%9D%B8%EB%94%A9%EC%9D%98-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84\" aria-label=\"암시적 바인딩과 new 바인딩의 우선순위 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>암시적 바인딩과 new 바인딩의 우선순위</h2>\n<p>그럼 new 바인딩은 암시적 바인딩보다 우선할까? 아래 코드로 실험해 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">hello</span><span class=\"token operator\">:</span> hello<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nobj1<span class=\"token punctuation\">.</span><span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chris\"</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// chris</span>\n\n<span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">obj<span class=\"token punctuation\">.</span>hello</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"alice\"</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// chris</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// alice</span></code></pre></div>\n<p><code>obj1.hello('chris')</code>를 실행하면 암시적 바인딩 규칙에 의해 <code>obj1</code> 객체가 컨택스트로 바인딩된다.\n따라서 함수 실행후 <code>obj1.name</code>에 'chris'가 할당된다.</p>\n<p>반면 객체의 프로퍼티로 함수에 접근해도 <code>new</code> 키워드로 함수를 실행하면 new 바인딩이 우선함을 알수 있다.\n<code>obj1.name</code>은 변함이 없고 <code>obj2.name</code>이 'alice'로 할당된 것이 그 증거다.</p>\n<blockquote>\n<p>new 바인딩 > 암시적 바인딩</p>\n</blockquote>\n<p>암시적 바인딩을 사용하기 전에 new 바인딩이 되었는지 먼저 확인하자!</p>\n<h2 id=\"명시적-바인딩과-new-바인딩의-우선순위\" style=\"position:relative;\"><a href=\"#%EB%AA%85%EC%8B%9C%EC%A0%81-%EB%B0%94%EC%9D%B8%EB%94%A9%EA%B3%BC-new-%EB%B0%94%EC%9D%B8%EB%94%A9%EC%9D%98-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84\" aria-label=\"명시적 바인딩과 new 바인딩의 우선순위 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>명시적 바인딩과 new 바인딩의 우선순위</h2>\n<p>이제 남은 건 명시적 바인딩과 new 바인딩과의 관계다.\n명시적 바인딩을 위한 <code>call()</code>, <code>apply()</code> 함수와 <code>new</code>를 동시에 테스트하는건 좀 어려워 보인다.</p>\n<p>대신 <code>bind()</code> 함수는 컨택스트가 바인딩된 새로운 함수를 반환하는 특징을 가지고 있다.\n<code>bind()</code> 함수를 이용한 하드 바인딩과 new 바인딩 사이의 우선순위를 확인해 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> helloFn <span class=\"token operator\">=</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span>\n<span class=\"token function\">helloFn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chris\"</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// chris</span>\n\n<span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">helloFn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"alice\"</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// chris</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// alice</span></code></pre></div>\n<p><code>hello.bind(obj1)</code>를 이용해 <code>obj1</code> 객체를 <code>hello()</code> 함수의 컨택스트로 하드 바인딩 처리했다.</p>\n<p>그 결과 <code>helloFn</code> 함수를 만들었다.\n<code>helloFn('chris')</code>를 실행하면 하드 바인딩된 <code>obj1</code>객체가 this가 되고, <code>obj1.name</code>이 'chris'로 할당 되는것 까지 확인할 수 있다.</p>\n<p>한편 <code>obj1</code>으로 하드바인딩된 <code>helloFn()</code> 함수를 <code>new</code> 키워드를 이용해 호출하면 어떻게 될까?\n이것은 새로운 객체를 반환하는데 이 객체가 컨택스트로 바인딩된다.\n그 결과 <code>obj2.name</code>에 'alice'값이 할당된 것을 확인할 수 있다.</p>\n<p>즉 new 바인딩이 명시적 바인딩보다 우선순위가 높다는 것을 알 수 있다.</p>\n<blockquote>\n<p>new 바인딩 > 명시적 바인딩</p>\n</blockquote>\n<p><code>call()</code>, <code>apply()</code>, <code>bind()</code> 함수로 명시적 바인딩을 사용하기 전에 new 바인딩 여부를 확인하자!</p>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<p>이제 네 가지 바인딩의 우선순위를 정리할수 있다.</p>\n<p><strong>1) new로 함수를 호출했는가? 그럼 실행결과 반환되는 값이 this다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// this === obj</span></code></pre></div>\n<p><strong>2) call, apply, bind로 함수를 호출했는가? 그럼 인자로 넘겨준 객체가 this다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token function\">hello</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// this === obj</span>\n<span class=\"token function\">hello</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// this === obj</span>\n<span class=\"token function\">hello</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// this === obj</span></code></pre></div>\n<p><strong>3) 객체 프로퍼티로 접근하여 함수를 실행했는가? 그럼 이 객체가 this다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">obj<span class=\"token punctuation\">.</span><span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// this === obj</span></code></pre></div>\n<p><strong>4) 이외의 경우는 this는 전역 객체다.</strong></p>\n<p>브라우져의 경우 this는 Window 객체이고 엄격모드에서는 undefined 값이된다.</p>\n<p>결론은 네 가지 바인딩이 아래 우선순위를 따른다는 것이다.</p>\n<blockquote>\n<p>new 바인딩 > 명시적 바인딩 > 암시적 바인딩 > 기본바인딩</p>\n</blockquote>\n<h2 id=\"예외상황들\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%99%B8%EC%83%81%ED%99%A9%EB%93%A4\" aria-label=\"예외상황들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예외상황들</h2>\n<p>이렇게 정리했음에도 불구하고 예외는 있다.</p>\n<h3 id=\"명시적-바인딩시-빈-객체를-넘겨주는-경우\" style=\"position:relative;\"><a href=\"#%EB%AA%85%EC%8B%9C%EC%A0%81-%EB%B0%94%EC%9D%B8%EB%94%A9%EC%8B%9C-%EB%B9%88-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EB%84%98%EA%B2%A8%EC%A3%BC%EB%8A%94-%EA%B2%BD%EC%9A%B0\" aria-label=\"명시적 바인딩시 빈 객체를 넘겨주는 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>명시적 바인딩시 빈 객체를 넘겨주는 경우</h3>\n<p>call, apply, bind에 명시적으로 객체를 넘기지 않고 null 값을 넘기는 경우는 어떻게 동작할까?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"chris\"</span>\n\n<span class=\"token function\">hello</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"chris\"</span></code></pre></div>\n<p><code>hello.call(null)</code>로 <code>hello()</code> 함수를 실행하면 this는 전역객체를 바라본다.\n기본 바인딩이 적용되는 것이다.</p>\n<p><code>bind()</code>함수에 null을 첫 번째 인자로 넘기는 경우가 있는데 컨텍스트 바인딩과는 다른 목적으로 사용된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> add5 <span class=\"token operator\">=</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">add5</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 7</span></code></pre></div>\n<p><code>sum.bind(null, 5)</code>는 <code>sum()</code> 함수 실행시 컨택스트를 명시하지 않았다.\n중요한 것은 두 번째 인자로 5를 넘긴 것이다.\n그 결과 반환된 것은 함수인데 <code>sum()</code> 함수의 첫번째 인자를 5로 고정한 함수다.</p>\n<p>이것을 부분함수, 혹은 커링이라고 한다.\n<a href=\"/js/2017/04/17/curry.html\">함수로 함수 만들기 2 커링</a>, <a href=\"/js/2017/04/21/partial-application.html\">함수로 함수 만들기3 부분적용\n</a> 글을 참고하기 바란다.</p>\n<p>부분함수와 커링이 목적이라고 하더라도 컨택스트 인자로 null을 넘기는 것은 좀 위험해 보인다.\n만약 sum 함수에서 this를 사용하는 코드라도 만난다면?\n예상치 못한 결과가 발생할 것이다.</p>\n<p>따라서 빈 객체라도 만들어 넘겨주는 것이 안전한 방법이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> add5 <span class=\"token operator\">=</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"어휘적-this\" style=\"position:relative;\"><a href=\"#%EC%96%B4%ED%9C%98%EC%A0%81-this\" aria-label=\"어휘적 this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어휘적 this</h3>\n<p>ES6부터 사용할수 있는 화살표 함수(arrow function)는 기존의 컨택스트 바인딩 규칙을 따르지 않는다.\n기존 네 가지 컨택스트는 실행 시점에 바인딩 규칙이 적용된다.\n**\"동적 바인딩\"**이라 할수 있다.</p>\n<p>반면 화살표함수는 실행하지 않고도 바인딩 규칙을 알 수 있다.\n이미 정해졌다는 점에서 \"<strong>정적 바인딩</strong>\"이다.\n화살표함수는 <strong>코드상 상위 블록의 컨택스트를 this로 바인딩하는 규칙</strong>을 갖는다.</p>\n<p>먼저 아래 기존 바인딩을 규칙을 이용한 타이머 예제를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"chris\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">hello</span><span class=\"token operator\">:</span> hello<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"global contenxt!\"</span>\n\n<span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'global contenxt!'</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'global contenxt!'</span>\n<span class=\"token function\">hello</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"chris\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'global contenxt!'</span></code></pre></div>\n<p>흔히 발생할 수 있는 실수다.</p>\n<p><code>setTimeout()</code> 함수에 넘겨준 <code>callback</code>은 실행시점에 컨택스트가 정해질 것이다.\n기본 바인딩인 <code>hello()</code>, 암시적 바인딩인 <code>obj.hello()</code>, 그리고 명시적 바인딩인 <code>hello.call()</code>를 실행해 보자.</p>\n<p><code>callback()</code>은 <code>setTimeout()</code> 함수가 실행시키는 것이므로 <code>setTimeout()</code>에 의존적이다.\n내장함수인 <code>setTimeout()</code> 함수는 <code>callback()</code> 형태로 실행시킬 것이므로 여기서 this는 글로벌 객체로 바인딩 된다.</p>\n<p>이제 화살표 함수의 동작을 살펴볼 차례다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"chris\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">hello</span><span class=\"token operator\">:</span> hello<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"global contenxt!\"</span>\n\n<span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'global contenxt!'</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'chris'</span>\n<span class=\"token function\">hello</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"alice\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'alice'</span></code></pre></div>\n<p>화살표 함수는 상위 블록의 컨텍스트를 this로 사용한다고 했다.</p>\n<p><code>hello()</code>로 호출했을 경우 기본 바인딩된 전역 객체를 사용하는 것을 확인할 수 있다.</p>\n<p><code>obj.hello()</code>는 암시적 바인딩된 <code>obj</code> 객체를 사용하고 있다.</p>\n<p>마지막으로 <code>hello.call()</code>처럼 명시적 바인딩된 객체를 사용하는 것을 알 수 있다.</p>","frontmatter":{"slug":"/2017/10/22/js-context-binding.html","date":"2017-10-22T00:00:00.000Z","title":"자바스크립트 this 바인딩 우선순위","tags":["JavaScript"],"series":null,"videoId":null,"featuredImage":null},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EA%B8%B0%EB%B3%B8-%EB%B0%94%EC%9D%B8%EB%94%A9\">기본 바인딩</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%95%94%EC%8B%9C%EC%A0%81-%EB%B0%94%EC%9D%B8%EB%94%A9\">암시적 바인딩</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%AA%85%EC%8B%9C%EC%A0%81-%EB%B0%94%EC%9D%B8%EB%94%A9\">명시적 바인딩</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%95%94%EC%8B%9C%EC%A0%81-%EB%B0%94%EC%9D%B8%EB%94%A9%EA%B3%BC-%EB%AA%85%EC%8B%9C%EC%A0%81-%EB%B0%94%EC%9D%B8%EB%94%A9%EC%9D%98-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84\">암시적 바인딩과 명시적 바인딩의 우선순위</a></p>\n</li>\n<li>\n<p><a href=\"#new-%EB%B0%94%EC%9D%B8%EB%94%A9\">New 바인딩</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%95%94%EC%8B%9C%EC%A0%81-%EB%B0%94%EC%9D%B8%EB%94%A9%EA%B3%BC-new-%EB%B0%94%EC%9D%B8%EB%94%A9%EC%9D%98-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84\">암시적 바인딩과 new 바인딩의 우선순위</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%AA%85%EC%8B%9C%EC%A0%81-%EB%B0%94%EC%9D%B8%EB%94%A9%EA%B3%BC-new-%EB%B0%94%EC%9D%B8%EB%94%A9%EC%9D%98-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84\">명시적 바인딩과 new 바인딩의 우선순위</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B2%B0%EB%A1%A0\">결론</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%98%88%EC%99%B8%EC%83%81%ED%99%A9%EB%93%A4\">예외상황들</a></p>\n<ul>\n<li><a href=\"#%EB%AA%85%EC%8B%9C%EC%A0%81-%EB%B0%94%EC%9D%B8%EB%94%A9%EC%8B%9C-%EB%B9%88-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EB%84%98%EA%B2%A8%EC%A3%BC%EB%8A%94-%EA%B2%BD%EC%9A%B0\">명시적 바인딩시 빈 객체를 넘겨주는 경우</a></li>\n<li><a href=\"#%EC%96%B4%ED%9C%98%EC%A0%81-this\">어휘적 this</a></li>\n</ul>\n</li>\n</ul>","excerpt":"자바스크립의 컨텍스트(this) 바인딩은 헷갈릴 때가 많다.\n\"이 정도면 이해할수 있겠군\" 하다가도, 막상 코딩하다 보면 예상치 못한 상황에 부딪쳐 당황한적이 있지 않은가? 이 글은 자바스크립트 컨텍스트 바인딩을 \"우선순위\"라는 관점에서 정리했다.\n카일 심슨의 글 this…"},"video":null,"allMarkdownRemark":{"nodes":[{"id":"93bf3718-4675-50f9-9475-f1e9f8999648","frontmatter":{"slug":"/elastic-beanstalk/","date":"2014-07-12T08:18:53.000Z","title":"Elastic Beanstalk","series":null}},{"id":"3e25aa77-db7d-5642-8abc-8793fc3113a2","frontmatter":{"slug":"/아마존-s3를-이용한-이미지-업로드-서버-구축/","date":"2014-07-23T08:31:17.000Z","title":"아마존 S3를 이용한 이미지 업로드 서버 구축","series":null}},{"id":"654cd70d-947f-58bb-a386-bb86378a5342","frontmatter":{"slug":"/트위터-부트스트랩-소스분석/","date":"2014-07-26T08:31:45.000Z","title":"트위터 부트스트랩 소스분석","series":null}},{"id":"73d4147d-a568-5e59-aa8b-d78fabc8c67b","frontmatter":{"slug":"/노드에서-세션을-이용한-로그인아웃-구현/","date":"2014-07-31T08:32:17.000Z","title":"노드에서 세션을 이용한 로그인/아웃 구현","series":null}},{"id":"57767253-e5b8-5b85-89ad-e3af813e7ee5","frontmatter":{"slug":"/angular-fullstack-로딩-속도-개선/","date":"2014-08-02T08:33:03.000Z","title":"Angular-fullstack 로딩 속도 개선","series":null}},{"id":"14bb3a60-c4e0-5403-b19d-5f997c8182be","frontmatter":{"slug":"/log-io를-이용한-beanstalk-로그-모니터링/","date":"2014-08-08T08:33:35.000Z","title":"log.io를 이용한 beanstalk 로그 모니터링","series":null}},{"id":"a8c51a5d-864c-505e-af1a-6efd25c893ab","frontmatter":{"slug":"/노드-실행모드에-따른-환경설정/","date":"2014-08-14T16:42:51.000Z","title":"노드 실행모드에 따른 환경설정","series":null}},{"id":"85da0b68-bdc9-5bc7-9eb4-18a519240280","frontmatter":{"slug":"/expressjs-4-0-마이그레이션/","date":"2014-08-21T16:43:14.000Z","title":"expressjs 4.0 마이그레이션","series":null}},{"id":"c7d17d22-274c-58fe-b380-66695ae0ab1b","frontmatter":{"slug":"/underscore-js/","date":"2015-01-05T22:16:09.000Z","title":"underscore.js","series":null}},{"id":"99fe37e9-34d2-5ef3-b6c3-3e548094010c","frontmatter":{"slug":"/angular-form/","date":"2015-01-09T19:02:17.000Z","title":"Angular Form","series":null}},{"id":"ed2e89f8-b26e-5b2b-8ede-b47d813ed0c3","frontmatter":{"slug":"/wordpress-study-01-misfit-kr/","date":"2015-01-09T21:52:58.000Z","title":"WordPress study 01 & misfit.kr","series":null}},{"id":"640d9f48-8c69-5e0a-a377-62748c16fe4d","frontmatter":{"slug":"/워드프레스-ssh2-설정/","date":"2015-01-10T15:27:00.000Z","title":"워드프레스 SSH2 설정","series":null}},{"id":"18a3532a-50aa-5c6e-8c71-d8543e44dd3b","frontmatter":{"slug":"/angularjs-passport로-인증구현/","date":"2015-01-17T12:34:54.000Z","title":"AngularJS, Passport로 인증구현","series":null}},{"id":"7990f2ad-f99b-5490-88bf-a0162753b016","frontmatter":{"slug":"/eb-cli-툴-사용법-정리/","date":"2015-01-17T14:10:57.000Z","title":"eb-cli 툴 사용법 정리","series":null}},{"id":"7d2f06d1-f1d2-5e84-8f52-3fd7814fac26","frontmatter":{"slug":"/resource-캐쉬-설정/","date":"2015-01-18T21:39:09.000Z","title":"$resource 캐쉬 설정","series":null}},{"id":"922dd45f-4f37-59e9-8a41-baa802412633","frontmatter":{"slug":"/꼬리에-꼬리를-무는-timeout/","date":"2015-01-22T01:05:37.000Z","title":"꼬리에 꼬리를 무는 setTimeout()","series":null}},{"id":"16c11963-7e23-5d5e-9d2e-1fc2cb54566e","frontmatter":{"slug":"/resource와-service/","date":"2015-01-22T01:13:07.000Z","title":"$resource와 service","series":null}},{"id":"2ec23212-521f-50e6-acbc-71b8f7416ac1","frontmatter":{"slug":"/브라우져에서-아마존-s3-파일-업로드/","date":"2015-01-24T17:32:45.000Z","title":"브라우져에서 아마존 S3 파일 업로드","series":null}},{"id":"bb1de6a0-b4da-592b-b7c3-51a173c22604","frontmatter":{"slug":"/bit-operation/","date":"2015-02-07T23:08:18.000Z","title":"비트 연산","series":null}},{"id":"b5fcc10b-3bf0-5968-8c24-ea6b834e4bb8","frontmatter":{"slug":"/http-테스트-코드-작성/","date":"2015-02-10T10:00:11.000Z","title":"$http 테스트 코드 작성","series":null}},{"id":"122eb448-ec30-5f24-a4f1-6ad3e3da59ae","frontmatter":{"slug":"/wordpress-and-grunt/","date":"2015-02-18T21:35:59.000Z","title":"워드프레스에 Grunt 설정하기","series":null}},{"id":"97f4a5ed-9f44-5b42-b9fa-29c44bb65bcb","frontmatter":{"slug":"/서버-다운타임-없이-빈스톡-갈아타기/","date":"2015-03-05T20:47:38.000Z","title":"서버 다운타임 없이 빈스톡 갈아타기","series":null}},{"id":"c08ebfb3-d878-5750-9fb4-1dad47321dc8","frontmatter":{"slug":"/몽고db-인덱스-외/","date":"2015-03-10T00:10:10.000Z","title":"몽고DB 인덱스 외","series":null}},{"id":"7bc22753-9db6-5162-b41d-e634d4afcd3d","frontmatter":{"slug":"/wordpress-and-jquery/","date":"2015-03-11T00:16:00.000Z","title":"워드프레스와 제이쿼리 등","series":null}},{"id":"e4307eb4-9e23-5854-9ea6-902e98e060ef","frontmatter":{"slug":"/plugins-in-wordpress/","date":"2015-03-12T20:32:16.000Z","title":"워드프레스 플러그인 정리","series":null}},{"id":"304814f0-ee7a-593b-a8ea-c016c2dad586","frontmatter":{"slug":"앵귤러-디렉티브-등/","date":"2015-03-18T22:04:01.000Z","title":"앵귤러 디렉티브 등","series":null}},{"id":"ad7bfe0b-42e1-554a-98f2-4bc32960d52f","frontmatter":{"slug":"/options-메쏘드에-대해/","date":"2015-03-19T23:14:17.000Z","title":"options 메쏘드에 대해","series":null}},{"id":"cf81dbb9-9140-56e4-b03d-cc5b9a6d6c12","frontmatter":{"slug":"/앵귤러-서비스에-템플릿-로딩/","date":"2015-03-23T20:28:13.000Z","title":"앵귤러 서비스에 템플릿 로딩","series":null}},{"id":"00c67b00-1098-5371-83e2-0123f22a45e5","frontmatter":{"slug":"/fileupload-in-expressjs/","date":"2015-03-28T14:13:12.000Z","title":"익스프레스 파일 업로드","series":null}},{"id":"b8288b6f-b0be-54f0-9156-03afe15d07b2","frontmatter":{"slug":"/how-to-build-wordpress-child-theme/","date":"2015-03-28T15:07:50.000Z","title":"워드프레스 자식 테마 만들기","series":null}},{"id":"88009a56-ec20-5d1b-a55b-c725e4465be0","frontmatter":{"slug":"/custom-menu-in-wordpress/","date":"2015-03-28T15:43:26.000Z","title":"워드프레스 커스텀 메뉴 추가하기","series":null}},{"id":"b94918a6-6e82-5925-b601-28da3980ad95","frontmatter":{"slug":"/ui-route로-라우팅-인증-구현/","date":"2015-04-01T23:38:41.000Z","title":"ui-route로 라우팅 인증 구현","series":null}},{"id":"a0ead7fa-e20d-5e33-90e4-6718ada790d8","frontmatter":{"slug":"/angularjs-스터디-노트/","date":"2015-04-02T18:16:34.000Z","title":"AngularJS 스터디 노트","series":null}},{"id":"30a36478-1fe6-58cd-8f18-6602b408708e","frontmatter":{"slug":"/how-to-run-nodejs-and-php-by-using-nginx/","date":"2015-04-10T10:04:00.000Z","title":"nginx를 이용하여 nodejs와 php 어플리케이션 함께 구동하기","series":null}},{"id":"742919ba-be4f-5d17-837e-ff14c9537b36","frontmatter":{"slug":"/server-side-loggin-in-angular/","date":"2015-05-05T23:45:45.000Z","title":"프론트에서 잡지 못한 예외를 서버에 리포팅하는 방법","series":null}},{"id":"3422dd6c-58fc-596e-8fdd-9dcfd489054c","frontmatter":{"slug":"/oauth2-0-in-rest-api/","date":"2015-06-11T15:31:20.000Z","title":"REST api에 OAuth2.0 구현","series":null}},{"id":"163431d6-79a1-5e62-a6b7-8f528373e748","frontmatter":{"slug":"/google-material-design/","date":"2015-06-14T15:20:29.000Z","title":"Google Material Design","series":null}},{"id":"bf080297-8150-54ce-a901-7c29869306f6","frontmatter":{"slug":"/이니페이-모바일-결제-신용카드-개발-후기/","date":"2015-06-18T09:03:02.000Z","title":"이니페이 모바일 결제 (신용카드) 개발 후기","series":null}},{"id":"34214a97-e4a9-5fb8-836f-36d9e0e678e1","frontmatter":{"slug":"/momentjs/","date":"2015-06-19T08:12:10.000Z","title":"momentjs","series":null}},{"id":"d2bc625a-ef4f-519a-a766-3f20f967cf28","frontmatter":{"slug":"/이니페이-모바일-결제-계좌이체-개발-후기/","date":"2015-06-26T09:14:45.000Z","title":"이니페이 모바일 결제 (계좌이체) 개발 후기","series":null}},{"id":"091942b2-66b5-5488-8d26-b628cd5a8193","frontmatter":{"slug":"/socket-io를-이용한-실시간-웹-구현/","date":"2015-07-07T22:14:13.000Z","title":"Socket.io를 이용한 실시간 웹 구현","series":null}},{"id":"c219b1cd-2db3-55d3-bcd0-3b56499705a3","frontmatter":{"slug":"/mi-band-moves-rocket-pocket/","date":"2015-07-19T19:25:06.000Z","title":"Mi Band, Moves, Rocket Pocket","series":null}},{"id":"0fabc65d-8575-5bbc-80d2-5d2b52d81bb6","frontmatter":{"slug":"/ngform-클래스명-활용하기/","date":"2015-07-21T23:47:11.000Z","title":"ngForm 클래스명 활용하기","series":null}},{"id":"b4caee83-e0fc-5fef-82ea-a0a84716e276","frontmatter":{"slug":"/passport-google-oauth-구글-인증-모듈/","date":"2015-07-23T21:50:03.000Z","title":"passport-google-oauth 구글 인증 모듈","series":null}},{"id":"601bf6b7-27e0-5210-a03f-d933fc342a08","frontmatter":{"slug":"/ngform-밸리데이터-활용/","date":"2015-07-24T09:10:27.000Z","title":"ngForm 밸리데이터 활용","series":null}},{"id":"cc348fa8-ae84-5bec-9df1-2c8d86a0531f","frontmatter":{"slug":"/ngform-사용자-정의-밸리데이터-만들기/","date":"2015-07-24T21:08:44.000Z","title":"ngForm 사용자 정의 밸리데이터 만들기","series":null}},{"id":"3fa5f3d2-28c7-5b70-93cd-424023104bce","frontmatter":{"slug":"/dusk-theme-in-webstorm/","date":"2015-07-26T21:42:47.000Z","title":"웹스톰 Dusk 테마","series":null}},{"id":"4215ce6b-43cc-58c9-abe4-66f5424eca17","frontmatter":{"slug":"/이미지-업로드-1-multer-모듈로-파일-업로드/","date":"2015-07-27T17:09:22.000Z","title":"이미지 업로드 - 1. multer 모듈로 파일 업로드","series":null}},{"id":"328dcb80-6ddf-5888-8623-964c2e1789ad","frontmatter":{"slug":"/이미지-업로드-2-gm-모듈로-이미지-리사이징/","date":"2015-07-27T17:10:21.000Z","title":"이미지 업로드 – 2. gm 모듈로 이미지 리사이징","series":null}},{"id":"f85c5cc5-ddd3-57bb-9490-53e7516d8827","frontmatter":{"slug":"/리눅스-데몬으로-노드-어플리케이션-관리하기/","date":"2015-07-29T23:04:12.000Z","title":"리눅스 데몬으로 노드 어플리케이션 관리하기","series":null}},{"id":"5e110e50-9cd4-515d-b68c-d75f5a96774a","frontmatter":{"slug":"/express-js-1-설치와-구조/","date":"2015-07-30T22:12:40.000Z","title":"Express.js - 1. 설치와 구조","series":null}},{"id":"fb0c5d24-1ecd-5367-8bb0-409205007e72","frontmatter":{"slug":"/express-js-2-라우팅/","date":"2015-08-03T09:56:22.000Z","title":"Express.js - 2. 라우팅","series":null}},{"id":"4769f379-9d90-5d56-8d87-3ed7d5568304","frontmatter":{"slug":"/express-js-3-템플릿jade/","date":"2015-08-04T21:00:46.000Z","title":"Express.js - 3. 템플릿(Jade)","series":null}},{"id":"30a14ed7-b46d-58e8-9f4a-9e8b8fbf7fff","frontmatter":{"slug":"/grunt-open/","date":"2015-08-10T09:38:30.000Z","title":"grunt open","series":null}},{"id":"ef4803f2-e7c1-5635-bd23-c8243d022319","frontmatter":{"slug":"/oh-my-zsh로-터미널-꾸미기/","date":"2015-08-10T14:41:05.000Z","title":"Oh My Zsh로 터미널 꾸미기","series":null}},{"id":"3d7d04c3-e09c-579e-84dc-ed0ef528f56b","frontmatter":{"slug":"/postdigest와-timeout/","date":"2015-08-12T00:35:20.000Z","title":"$$postDigest()와 $timeout()","series":null}},{"id":"7354a80a-8b5b-534f-9c87-6a6e4ebf9cc2","frontmatter":{"slug":"/resource로-rest-api-사용하기/","date":"2015-08-13T23:32:53.000Z","title":"$resource로 REST api 사용하기","series":null}},{"id":"93702631-a70a-53ec-aef1-8731b23cdaa7","frontmatter":{"slug":"/sequalize-쿼리/","date":"2015-08-22T15:22:13.000Z","title":"sequalize 쿼리","series":null}},{"id":"f4e498fb-d057-5679-9ed8-61ad138a274c","frontmatter":{"slug":"/아톰-에디터-외모-변경하기/","date":"2015-08-30T11:28:05.000Z","title":"아톰 에디터 외모 변경하기","series":null}},{"id":"57d8186d-aa05-5a71-a1e0-6d0cf7ea702a","frontmatter":{"slug":"/카페24-sms-node-모듈/","date":"2015-08-31T14:16:34.000Z","title":"카페24 SMS node 모듈","series":null}},{"id":"5d405bc0-1591-5036-86a4-b80365fbe16b","frontmatter":{"slug":"/개발-절차에-도커-적용하기/","date":"2015-09-02T11:13:03.000Z","title":"개발 절차에 도커 적용하기","series":null}},{"id":"99a6c3ff-c42b-53e6-9781-e3c6aa7abbd1","frontmatter":{"slug":"/docker-git/","date":"2015-09-07T10:55:26.000Z","title":"Docker + Git","series":null}},{"id":"8ff8794a-c1d4-5319-ba0b-ea83f3b3a446","frontmatter":{"slug":"/크론을-사용할때-서버-시간을-정확히-맞추자/","date":"2015-09-08T20:10:54.000Z","title":"크론을 사용할때 서버 시간을 정확히 맞추자","series":null}},{"id":"56d080f4-9fd8-5966-9366-ad390d9d276b","frontmatter":{"slug":"/깃git-서버-만들기/","date":"2015-09-08T20:12:06.000Z","title":"깃(git) 서버 만들기","series":null}},{"id":"435d7b8a-9d95-5dbe-8f47-6431324a2145","frontmatter":{"slug":"/agenda/","date":"2015-09-10T23:03:16.000Z","title":"Agenda","series":null}},{"id":"9bd1cd2a-65cd-506f-890f-45220768adba","frontmatter":{"slug":"/안쓰는-imac을-맥북-외장-모니터로-사용하자/","date":"2015-09-11T21:56:33.000Z","title":"안쓰는 iMac을 맥북 외장 모니터로 사용하자!","series":null}},{"id":"3dc46113-2faf-546e-86ec-399cdacf9ff9","frontmatter":{"slug":"/익스프레스-api-서버-테스트-코드-작성하기/","date":"2015-09-15T11:55:36.000Z","title":"익스프레스 API 서버 테스트 코드 작성하기","series":null}},{"id":"b1f211a2-02c2-5c24-bd31-d5fa38179e8c","frontmatter":{"slug":"/forever-and-docker/","date":"2015-09-19T14:12:03.000Z","title":"Forever와 Docker","series":null}},{"id":"bd9a65ad-2fa2-5b5c-a2b0-95a0876bdd1b","frontmatter":{"slug":"/docker-usage/","date":"2015-09-19T15:16:40.000Z","title":"도커 활용기","series":null}},{"id":"c7ce1014-f33e-5e0d-b3af-bf2b71d49d88","frontmatter":{"slug":"/원격로그인ssh-접속/","date":"2015-09-23T09:27:20.000Z","title":"원격로그인(SSH) 접속","series":null}},{"id":"9b4596ec-1166-5cff-bcd9-07bea91ceab5","frontmatter":{"slug":"/mysql-데이터베이스-삭제-에러/","date":"2015-09-27T12:27:46.000Z","title":"mysql 데이터베이스 삭제 에러","series":null}},{"id":"a10a3c18-cd6a-502e-b57b-0769b0f527e8","frontmatter":{"slug":"/osx-노트-글꼴-변경/","date":"2015-09-28T15:48:23.000Z","title":"osx 노트 글꼴 변경","series":null}},{"id":"98f047e8-3fa5-54dd-ba34-6107609452d2","frontmatter":{"slug":"/git-push-이벤트를-slack-채널로-보내기/","date":"2015-10-01T19:59:03.000Z","title":"git push 이벤트를 slack 채널로 보내기","series":null}},{"id":"86a88d7b-1281-5b6c-a879-488cc30b158b","frontmatter":{"slug":"/simpletest-php-unit-test/","date":"2015-10-13T17:17:22.000Z","title":"SimpleTest & php unit test","series":null}},{"id":"c537b291-8e0b-59fa-93db-906e7b3e60b0","frontmatter":{"slug":"/도커에서-몽고디비-컨테이너-사용하기/","date":"2015-10-16T17:33:59.000Z","title":"도커에서 몽고디비 컨테이너 사용하기","series":null}},{"id":"bf5fadce-b02f-51f8-9e24-1668069bc372","frontmatter":{"slug":"/앵귤러로-만든-spa-프로그램을-아마존웹서비스-s3에서-웹/","date":"2015-10-27T10:08:59.000Z","title":"앵귤러로 만든 spa 프로그램을 아마존웹서비스 s3에서 웹호스팅 하는 방법","series":null}},{"id":"946e3c62-627f-58d6-93d8-2d74820659c8","frontmatter":{"slug":"/서버-구동시-버전-체크/","date":"2015-10-30T09:29:05.000Z","title":"서버 구동시 버전 체크","series":null}},{"id":"dd18db95-afb9-5860-bc3e-03ce1e02078c","frontmatter":{"slug":"/karma와-watch로-유닛테스트-코드-개발하기/","date":"2015-11-04T10:49:41.000Z","title":"karma와 watch로 유닛테스트 코드 개발하기","series":null}},{"id":"38fd376f-7ca0-5f80-b411-b47053150181","frontmatter":{"slug":"/karma에-리포터-추가하기/","date":"2015-11-11T19:44:34.000Z","title":"karma에 리포터 추가하기","series":null}},{"id":"d252bbcc-5724-5b9d-8105-8c91162d5a78","frontmatter":{"slug":"/atom-에디터-플러그인-정리/","date":"2015-11-11T20:34:05.000Z","title":"Atom 에디터 플러그인 정리","series":null}},{"id":"b724ee99-2fc7-5b38-bfcd-9b79fdd2e3bc","frontmatter":{"slug":"/기존-프로젝트와-swagger-ui-연동하기/","date":"2015-11-24T20:33:24.000Z","title":"기존 프로젝트와 Swagger-ui 연동하기","series":null}},{"id":"e33cce0c-0ae2-56ec-b9f2-c22edbaf981a","frontmatter":{"slug":"/atom-플러그인-atom-sync/","date":"2015-11-25T20:48:34.000Z","title":"Atom 플러그인: atom-sync","series":null}},{"id":"d415e10c-7d45-5524-b63d-eed1e217502b","frontmatter":{"slug":"/카카오-인증-테스트/","date":"2015-11-28T18:53:58.000Z","title":"카카오 인증 테스트","series":null}},{"id":"523ed30e-cd8a-5c18-b266-966ff6625887","frontmatter":{"slug":"/ghost-라우팅-로직-분석/","date":"2015-11-30T22:40:51.000Z","title":"Ghost 라우팅 로직 분석","series":null}},{"id":"8c064994-fceb-59ed-a417-3cc0a604abb8","frontmatter":{"slug":"/페이스북-토큰-권한-확인-주소/","date":"2015-12-02T14:46:07.000Z","title":"페이스북 토큰 권한 확인 주소","series":null}},{"id":"a3d3d183-12e1-58d9-92ab-557e329bd432","frontmatter":{"slug":"/기존-mysql에-장고-어드민-붙이기/","date":"2015-12-02T20:19:58.000Z","title":"기존 데이터베이스에 장고 어드민 통합하기","series":null}},{"id":"6122eb1c-0ab8-598a-b64c-5a6b4020bd76","frontmatter":{"slug":"/gunicorn-장고-어드민-프로덕션-서버에-구동하기/","date":"2015-12-03T17:12:21.000Z","title":"gunicorn: 장고 어드민 프로덕션 서버에 구동하기","series":null}},{"id":"f206c557-c2e0-5869-afff-4f55a872e13d","frontmatter":{"slug":"/우분투에-django-admin-mysql-python-설치/","date":"2015-12-03T18:04:28.000Z","title":"우분투에 Django-admin, mysql-python 설치","series":null}},{"id":"f9d8063d-ae49-5efd-978e-d31579d1e7e8","frontmatter":{"slug":"/mongodump-is-not-working-on-cronjob/","date":"2015-12-07T20:55:16.000Z","title":"mongodump 크론잡이 동작하지 않을 때","series":null}},{"id":"feef5452-044e-5e20-b506-1b78c43de4a4","frontmatter":{"slug":"/swagger-node/","date":"2015-12-11T11:40:31.000Z","title":"Swagger-node로 express 시작하기","series":null}},{"id":"a4117f4e-7e13-57a0-92fc-4dafa45db815","frontmatter":{"slug":"/javascript-decorator-pattern/","date":"2015-12-13T08:20:53.000Z","title":"Javascript Decorator Pattern","series":null}},{"id":"a8828a54-af6d-5545-be1b-340e98c76e7d","frontmatter":{"slug":"/ng-plualize-단수-복수형-처리/","date":"2015-12-21T09:56:48.000Z","title":"ng-plualize 단수, 복수형 처리","series":null}},{"id":"f6bf5d9f-2eba-5d11-b123-258b330f48d6","frontmatter":{"slug":"/2015-블로그-결산","date":"2016-01-01T22:42:19.000Z","title":"2015 블로그 결산","series":null}},{"id":"3c1d1515-456f-5ae6-972a-5917a497556a","frontmatter":{"slug":"/boot2docker-업데이트-v1-9/","date":"2016-01-03T18:26:20.000Z","title":"boot2docker 업데이트 (v1.9)","series":null}},{"id":"991e9c82-c9bb-55a5-beec-1fdfaed318c6","frontmatter":{"slug":"/mocha/","date":"2016-01-05T00:02:30.000Z","title":"NodeJS에서 가장 많이 사용하는 테스트 프레임웍, Mocha","series":null}},{"id":"2cd70912-68bb-57fc-8896-35324c622055","frontmatter":{"slug":"/naming-uploaded-file-on-wordpress/","date":"2016-01-11T21:15:30.000Z","title":"워드프레스 파일 업로드 시 파일명 처리","series":null}},{"id":"e63b82af-1313-5aa1-8241-b8e8dd813de9","frontmatter":{"slug":"/add-fk-on-sequelize-migration/","date":"2016-01-12T22:17:40.000Z","title":"Sequelize로 마이그레이션 시 외래키 추가하기","series":null}},{"id":"47531e46-ea9b-594a-8acd-318d7c9d8f73","frontmatter":{"slug":"/sequelize-migration/","date":"2016-01-14T09:21:17.000Z","title":"Sequelize 마이그레이션","series":null}},{"id":"e3b6bbf3-19c9-5d8f-a44c-ebd273231273","frontmatter":{"slug":"/sequelize-model/","date":"2016-01-26T23:27:50.000Z","title":"Sequelize Modeling","series":null}},{"id":"ecbbfd97-dd98-5892-8200-3bcf0a328dff","frontmatter":{"slug":"/aws-서울-리전으로-블로그-이동/","date":"2016-01-30T19:35:32.000Z","title":"AWS 서울 리전으로 블로그 이동","series":null}},{"id":"0ba52cab-07b8-5569-827b-6e055451dac2","frontmatter":{"slug":"/lodash/","date":"2016-01-31T15:14:43.000Z","title":"lodash","series":null}},{"id":"7a488a51-b29d-5d73-9ed2-7edd0d0437b0","frontmatter":{"slug":"/morgan-helper/","date":"2016-02-01T08:29:51.000Z","title":"morgan-helper","series":null}},{"id":"d1535810-24e0-54d1-865e-d2778613ecea","frontmatter":{"slug":"/sequelize-seed-시드-데이터-관리하기/","date":"2016-02-03T12:02:53.000Z","title":"Sequelize Seed - 시드 데이터 관리하기","series":null}},{"id":"9660bbe8-04e6-5003-8324-dfcdc84beb2b","frontmatter":{"slug":"/2016/02/07/from-wordpress-to-jekyll.html","date":"2016-02-07T00:00:00.000Z","title":"워드프레스에서 지킬로 블로그 이동","series":null}},{"id":"32bc9689-af8e-5feb-afc3-80d9fa904a40","frontmatter":{"slug":"/2016/02/07/jekyll-customizing.html","date":"2016-02-07T00:00:00.000Z","title":"Jekyll 커스터마이징 1 - 코멘트와 페이지네이션","series":null}},{"id":"52f71896-67dc-559c-802d-af0fd05ddb7c","frontmatter":{"slug":"/2016/02/20/beanstalk-in-seoul.html","date":"2016-02-20T00:00:00.000Z","title":"서울에서 Elastic Beanstalk 사용하기","series":null}},{"id":"6448f899-1bc6-518d-aebb-42a2d0a283fb","frontmatter":{"slug":"/2016/02/28/http-test-with-nock-mocha.html","date":"2016-02-28T00:00:00.000Z","title":"Nock, Mocha로 HTTP 테스트하기","series":null}},{"id":"c85201a3-a485-5711-bff6-a75f6a7bc075","frontmatter":{"slug":"/2016/02/29/jekyll-tag.html","date":"2016-02-29T00:00:00.000Z","title":"Jekyll 커스터마이징 2 - 태그","series":null}},{"id":"ee93de04-1773-5a57-8163-78c35153c6ff","frontmatter":{"slug":"/2016/03/21/must-use-error-in-reject.html","date":"2016-03-21T00:00:00.000Z","title":"Promise.reject()에 에러 객체를 넘겨줘야하는 이유","series":null}},{"id":"60ddcc36-4ca8-5249-a2c0-80ebf6f6fca7","frontmatter":{"slug":"/2016/03/29/mobile-rest-api.html","date":"2016-03-29T00:00:00.000Z","title":"서버 개발자 입장에서 바라본 모바일 API 디자인","series":null}},{"id":"8b7455bf-af58-5ebd-990c-e66ceaa336ef","frontmatter":{"slug":"/2016/04/28/es6.html","date":"2016-04-28T00:00:00.000Z","title":"ECMAScript2015(ES6)로 Node.JS 코딩하기","series":null}},{"id":"883aa3bc-3003-5055-9dbe-037f09e16f4d","frontmatter":{"slug":"/2016/05/13/image-resizing-with-lambda.html","date":"2016-05-13T00:00:00.000Z","title":"람다를 이용해 이미지 리사이징 서버 만들기","series":null}},{"id":"f7d29c2e-263b-5197-864a-8fc6bbc0df2d","frontmatter":{"slug":"/2016/05/13/swagger-parser.html","date":"2016-05-13T00:00:00.000Z","title":"스웨거 문서 문법 체크하기","series":null}},{"id":"fa99a7f3-3bc6-529d-af22-2abf965dded2","frontmatter":{"slug":"/2016/05/17/aws-submit-2016.html","date":"2016-05-17T00:00:00.000Z","title":"AWS Summit 2016 참관 후기","series":null}},{"id":"2dc9bb12-5758-5288-abe4-ffa3521dfee2","frontmatter":{"slug":"/2016/06/29/querystring-body-in-express.html","date":"2016-06-29T00:00:00.000Z","title":"노드에서는 쿼리스트링 인코딩을 어떻게 처리할까?","series":null}},{"id":"0b577504-89ea-5bb7-924c-0c1af47fdcb0","frontmatter":{"slug":"/2016/07/13/sequelize-transaction.html","date":"2016-07-13T00:00:00.000Z","title":"Sequelize Transaction 사용할때 주의할 점","series":null}},{"id":"5bcf9c1b-2da8-598e-be86-b922450203cd","frontmatter":{"slug":"/2016/07/19/babel.html","date":"2016-07-19T00:00:00.000Z","title":"Babel로 ES6 코드 사용하기","series":null}},{"id":"bb2c21f3-cd75-50bc-8ccf-2b1911f68b2c","frontmatter":{"slug":"/2016/07/28/istanbul.html","date":"2016-07-28T00:00:00.000Z","title":"Istanbul로 코드 커버리지 측정하기","series":null}},{"id":"0b6bdc4f-180e-5c75-9f16-d295e82c875c","frontmatter":{"slug":"/2016/08/03/ionic-hello-world.html","date":"2016-08-03T00:00:00.000Z","title":"Ionic으로 Hello world 시작하기","series":null}},{"id":"c7f8aba9-412b-561a-95ec-194015ebf4d4","frontmatter":{"slug":"/2016/08/10/nvm.html","date":"2016-08-10T00:00:00.000Z","title":"NVM으로 노드 버전 관리하기","series":null}},{"id":"b910f71f-ff72-55f9-8dd4-d609ed9fecbe","frontmatter":{"slug":"/2016/08/11/pyenv.html","date":"2016-08-11T00:00:00.000Z","title":"PYENV로 파이썬 버전 관리하기","series":null}},{"id":"18796840-da3d-5678-88f6-25a94a3a6ac1","frontmatter":{"slug":"/2016/08/16/git-alias.html","date":"2016-08-16T00:00:00.000Z","title":"Git Alias 사용법: 깃 단축키 설정하는 방법 ","series":null}},{"id":"6484663a-d7e2-5b0a-982d-a97e4f9e95f8","frontmatter":{"slug":"/2016/08/20/angular-facts-easy-to-miss.html","date":"2016-08-20T00:00:00.000Z","title":"앵귤러 개발자가 놓치기 쉬운 10가지 사실들","series":null}},{"id":"cd49a7ca-b3ad-5e5c-9988-2a7fa58163a8","frontmatter":{"slug":"/2016/08/23/about-angular2-quickstart-libraries.html","date":"2016-08-23T00:00:00.000Z","title":"Angular2 Quickstart에서 사용하는 라이브러리는 왜 이렇게 많을까?","series":null}},{"id":"ab0c0919-7342-5daa-8424-926a703c759c","frontmatter":{"slug":"/2016/09/03/jscon2016.html","date":"2016-09-03T00:00:00.000Z","title":"JSCON 2016 참관 후기","series":null}},{"id":"88170385-0df7-5297-91f3-4cde13fe2719","frontmatter":{"slug":"/2016/09/27/imac-kernel-panic.html","date":"2016-09-27T00:00:00.000Z","title":"아이맥, 커널 패닉에 빠지다","series":null}},{"id":"56e3410f-b7d8-5b8c-99f8-50f22eeb6f72","frontmatter":{"slug":"/2016/10/13/how-to-make-yeoman-generator.html","date":"2016-10-13T00:00:00.000Z","title":"Yeoman 제너레이터 만들기","series":null}},{"id":"6de22040-7f5f-5743-ab01-3a75d469c656","frontmatter":{"slug":"/2016/11/29/flow.html","date":"2016-11-29T00:00:00.000Z","title":"WebStorm에 Flow 기능 사용 후기","series":null}},{"id":"3b305ad6-7847-53db-8b4e-6c2161cecc9c","frontmatter":{"slug":"/2016/12/15/coroutine.html","date":"2016-12-15T00:00:00.000Z","title":"제너레이터와 프라미스를 이용한 비동기 처리","series":null}},{"id":"9ba2b1a6-7f14-5765-b224-5ff6c7f52e63","frontmatter":{"slug":"/etc/2017/01/02/review-2016.html","date":"2017-01-02T00:00:00.000Z","title":"2016년을 보내며","series":null}},{"id":"643f9cb6-3d42-5c3d-8462-8b46c658c465","frontmatter":{"slug":"/toy_project/2017/01/09/reading-book.html","date":"2017-01-09T00:00:00.000Z","title":"토이프로젝트_독서노트","series":null}},{"id":"1e43c35b-6cde-5a9a-99dc-0fa6b10dc48d","frontmatter":{"slug":"/toy_project/2017/01/16/facebook-analysis.html","date":"2017-01-16T00:00:00.000Z","title":"토이프로젝트_페이스북 분석기","series":null}},{"id":"faad58eb-9224-5a2d-bb8d-5a409673a9ed","frontmatter":{"slug":"/etc/2017/01/16/so-you-want-to-be-a-functional-programmer-part-6.html","date":"2017-01-16T00:00:00.000Z","title":"함수형 프로그래머가 되고 싶다고? 파트6","series":null}},{"id":"46088f7e-68ea-5c56-a50c-50d1dd57739f","frontmatter":{"slug":"/toy_project/2017/01/17/life-tracker.html","date":"2017-01-17T00:00:00.000Z","title":"토이프로젝트_라이프트래커","series":null}},{"id":"910808b3-546d-5f11-8eb7-6c7312b585c9","frontmatter":{"slug":"/node/2017/01/27/node-io-deep.html","date":"2017-01-27T00:00:00.000Z","title":"노드 개발자가 IO 작업을 시작하면 무슨일이 일어날까?","series":null}},{"id":"d12af547-f5a4-5d15-8741-ec6cc21ca8f5","frontmatter":{"slug":"/node/2017/02/06/utf8mb4-in-sequelize.html","date":"2017-02-06T00:00:00.000Z","title":"시퀄라이즈에서 이모티콘 저장하기","series":null}},{"id":"b1f8a4ec-4cab-5887-b6e1-7615765137ab","frontmatter":{"slug":"/js/2017/02/17/dependency-injection.html","date":"2017-02-17T00:00:00.000Z","title":"의존성 주입","series":null}},{"id":"29816992-9732-5b39-8b9e-999e5f67ff8d","frontmatter":{"slug":"/aws/2017/03/06/apex.html","date":"2017-03-06T00:00:00.000Z","title":"Apex로 좀 더 편리한 람다 개발환경 만들기","series":null}},{"id":"43ec2d75-a4cc-51fc-bfed-6730e74ee1b7","frontmatter":{"slug":"/vue/2017/03/27/vue.html","date":"2017-03-27T00:00:00.000Z","title":"Vue.js 살펴보기","series":null}},{"id":"954a8c3a-88ed-519f-a251-920719ecb668","frontmatter":{"slug":"/tool/2017/03/28/jasmine.html","date":"2017-03-28T00:00:00.000Z","title":"자스민으로 프론트엔드 테스트 코드 작성하기","series":null}},{"id":"c4885b85-ef04-5caa-9c81-a5312af9f4c7","frontmatter":{"slug":"/vue/2017/03/29/is-vue-better-than-angular-react.html","date":"2017-03-29T00:00:00.000Z","title":"과연 Vue.js가 앵귤러나 리엑트보다 좋을까?","series":null}},{"id":"d5458720-9bc6-5013-a97f-9e88dd4b2899","frontmatter":{"slug":"/vue/2017/04/19/vue-component-test.html","date":"2017-04-19T00:00:00.000Z","title":"Vue 글로벌 컴포넌트 테스트","series":null}},{"id":"e0daa74b-3f4c-50a4-b4d7-3ced276dfb75","frontmatter":{"slug":"/js/2017/05/15/webpack.html","date":"2017-05-15T00:00:00.000Z","title":"웹팩의 기본 개념","series":null}},{"id":"985df48a-34ac-5275-b83f-6d0b4dd92ccb","frontmatter":{"slug":"/js/2017/05/22/webpack-file-loader.html","date":"2017-05-22T00:00:00.000Z","title":"웹팩의 file-loader와 url-loader","series":null}},{"id":"c098ecb2-6645-559b-98a5-bfb598069c9f","frontmatter":{"slug":"/node/2017/07/03/node-stream-you-need-to-know.html","date":"2017-07-03T00:00:00.000Z","title":"Node.js Stream 당신이 알아야할 모든 것 1편","series":null}},{"id":"62164677-8dde-57e0-a928-724b90ddec93","frontmatter":{"slug":"/node/2017/08/07/node-stream-you-need-to-know-2.html","date":"2017-08-07T00:00:00.000Z","title":"Node.js Stream 당신이 알아야할 모든 것 2편","series":null}},{"id":"2b4c39ab-0b10-5b0c-b699-5e689ac17e30","frontmatter":{"slug":"/node/2017/08/12/node-stream-you-need-to-know-3.html","date":"2017-08-12T00:00:00.000Z","title":"Node.js Stream 당신이 알아야할 모든 것 3편","series":null}},{"id":"d5026f39-5a05-5220-a200-6144cefef6fc","frontmatter":{"slug":"/node/2017/08/17/express-error-handling.html","date":"2017-08-17T00:00:00.000Z","title":"에러 처리를 위한 익스프레스 가이드","series":null}},{"id":"492d01b8-bef6-5623-ac5e-c831843a3815","frontmatter":{"slug":"/tool/2017/09/16/gulp-workflow-for-frentend-development.html","date":"2017-09-16T00:00:00.000Z","title":"프론트엔드 개발을 위한 Gulp","series":null}},{"id":"69f82274-96d6-5297-bd05-df69186c5068","frontmatter":{"slug":"/2017/10/22/js-context-binding.html","date":"2017-10-22T00:00:00.000Z","title":"자바스크립트 this 바인딩 우선순위","series":null}},{"id":"c309166d-ea40-519d-a57a-739510b9bd3b","frontmatter":{"slug":"/2018/01/01/review-2017.html","date":"2018-01-01T00:00:00.000Z","title":"2017년을 보내며","series":null}},{"id":"10f4b029-a71c-5aac-b308-ead8927dfe44","frontmatter":{"slug":"/2018/01/25/before-jquery.html","date":"2018-01-25T00:00:00.000Z","title":"jQuery 보다 먼저 알았으면 좋았을 것들","series":null}},{"id":"7b92ced0-ca84-5b8e-93b6-83834de6b463","frontmatter":{"slug":"/2018/03/26/vue-authentication.html","date":"2018-03-26T00:00:00.000Z","title":"Vuex, Vue-router, Axios를 이용한 SPA 인증 구현","series":null}},{"id":"753602b2-3ee2-5512-b951-50927cb2843b","frontmatter":{"slug":"/2018/04/07/vue-router.html","date":"2018-04-07T00:00:00.000Z","title":"Vue-Router 살펴보기","series":null}},{"id":"9dfc3dad-f1c8-57f1-a5d6-7170a6851f7d","frontmatter":{"slug":"/2018/05/12/extended-component.html","date":"2018-05-12T00:00:00.000Z","title":"UI 컴포넌트 확장","series":null}},{"id":"824201f7-8154-530c-8d85-ef0aa0814627","frontmatter":{"slug":"/2018/05/31/vue-form-validation.html","date":"2018-05-31T00:00:00.000Z","title":"VueJS 폼 검증","series":null}},{"id":"2b45b4ef-e2c3-5ae9-bf8c-b18efb13797b","frontmatter":{"slug":"/2018/07/16/react-app-overview.html","date":"2018-07-16T00:00:00.000Z","title":"React로 만든 프로젝트 톺아보기","series":null}},{"id":"7c90979e-f781-507a-9a2f-56827abea520","frontmatter":{"slug":"/2018/08/19/express-travis-beanstalk.html","date":"2018-08-19T00:00:00.000Z","title":"리액트, 노드 백엔드 통합 후 CI 연동하기","series":null}},{"id":"87270e1c-1a56-5117-b07f-a9aea2b8db6d","frontmatter":{"slug":"/2018/10/13/ant-design-101.html","date":"2018-10-13T00:00:00.000Z","title":"앤트 디자인 - 어드민 개발을 위한 프레임웍","series":null}},{"id":"4dd51108-79f3-5687-9900-ddb1c755b813","frontmatter":{"slug":"/2018/10/21/aws-sns-to-slack.html","date":"2018-10-21T00:00:00.000Z","title":"AWS를 슬랙으로 모니터링","series":null}},{"id":"c40277de-e6b0-5ed0-8da1-0d1d398fb98c","frontmatter":{"slug":"/2018/11/08/remote-work.html","date":"2018-11-08T00:00:00.000Z","title":"비오는 날, 집에서 일하기 좋은 날씨다","series":null}},{"id":"51f0e00e-4eab-583f-a8d1-0c375fa34c7a","frontmatter":{"slug":"/series/2018/12/01/node-web-0_index.html","date":"2018-12-01T00:00:00.000Z","title":"🌳[Node.js 코드랩] 소개 및 목차","series":null}},{"id":"72df18f2-489b-572c-b292-d565bc914d2f","frontmatter":{"slug":"/think/2018/12/22/codelab-review.html","date":"2018-12-22T00:00:00.000Z","title":"코드랩 시리즈를 마치고 느낀점","series":null}},{"id":"5ec2afc0-7942-5e54-9537-1b8beac8e0f6","frontmatter":{"slug":"/think/2019/01/03/record.html","date":"2019-01-03T00:00:00.000Z","title":"기록","series":null}},{"id":"d63ed7fe-a8a2-5183-ad35-9b7fe62917fe","frontmatter":{"slug":"/dev/2019/01/08/go-fmt.html","date":"2019-01-08T00:00:00.000Z","title":"Go fmt 패키지","series":null}},{"id":"17c258c2-e604-5771-a433-9b13421e8e00","frontmatter":{"slug":"/dev/2019/01/14/go-time.html","date":"2019-01-14T00:00:00.000Z","title":"Go time 패키지","series":null}},{"id":"47799a2f-f944-50c7-b06e-8ee9fd332121","frontmatter":{"slug":"/dev/2019/01/18/go-encoding-json.html","date":"2019-01-18T00:00:00.000Z","title":"Go encoding/json 패키지","series":null}},{"id":"bdc91e8a-67da-5e86-94b8-3d193f64ed73","frontmatter":{"slug":"/dev/2019/02/07/go-net-http.html","date":"2019-02-07T00:00:00.000Z","title":"Go net/http 패키지","series":null}},{"id":"dfee3be9-a933-57cf-ba44-3184f69ddcaf","frontmatter":{"slug":"/dev/2019/02/18/go-todo-web-application.html","date":"2019-02-18T00:00:00.000Z","title":"Go로 투두 웹 어플리케이션 만들기","series":null}},{"id":"3f6561ad-8da9-551b-b0ae-8ef3eaa882e1","frontmatter":{"slug":"/think/2019/04/15/change-pain-concentration.html","date":"2019-04-15T00:00:00.000Z","title":"변화와 고통 그리고 집중","series":null}},{"id":"94a7dc92-b48c-556a-87ed-e303ed925144","frontmatter":{"slug":"/think/2019/04/26/running-machine-load.html","date":"2019-04-26T00:00:00.000Z","title":"러닝머신과 도로 위","series":null}},{"id":"21a9db90-8139-5bec-b42b-2b8142ef6ce3","frontmatter":{"slug":"/dev/2019/06/25/react-ts.html","date":"2019-06-25T00:00:00.000Z","title":"리액트, 타입스크립트 시작하기","series":null}},{"id":"4efa8a77-84fa-5b86-b169-67ec27388fa1","frontmatter":{"slug":"/dev/2019/07/08/react-router-ts.html","date":"2019-07-08T00:00:00.000Z","title":"리액트 라우터 사용하기 (타입스크립트 버전)","series":null}},{"id":"5586041f-d182-5d14-8e15-df0c010cfd6f","frontmatter":{"slug":"/dev/2019/07/15/react-redux-ts.html","date":"2019-07-15T00:00:00.000Z","title":"리액트 리덕스 사용하기 (타입스크립트 버전)","series":null}},{"id":"d75a412d-7ee8-5859-8f14-edd66de0a683","frontmatter":{"slug":"/dev/2019/07/22/react-saga-ts-1.html","date":"2019-07-22T00:00:00.000Z","title":"리덕스 사가 사용하기 (타입스크립트 버전) - 1편","series":null}},{"id":"e74d05a8-c41e-5cff-a5ad-f70d6a0c097c","frontmatter":{"slug":"/dev/2019/07/29/react-saga-ts-2.html","date":"2019-07-29T00:00:00.000Z","title":"리덕스 사가 사용하기 (타입스크립트 버전) - 2편","series":null}},{"id":"6bf73c28-27d2-5a5f-a54a-b54b8d6c5803","frontmatter":{"slug":"/dev/2019/08/12/ie-cache.html","date":"2019-08-12T00:00:00.000Z","title":"IE의 ajax 캐시 이슈를 처리하는 방법","series":null}},{"id":"63d6c350-491c-53c1-b411-18ac8bdea3d7","frontmatter":{"slug":"/dev/2020/01/28/component-design.html","date":"2020-01-28T00:00:00.000Z","title":"컴포넌트의 역할 분리","series":null}},{"id":"3a93e17e-b985-552a-99b1-2a5ed8ae6262","frontmatter":{"slug":"/dev/2020/02/10/git-usage.html","date":"2020-02-10T00:00:00.000Z","title":"깃(Git) 개념과 상황별 팁","series":null}},{"id":"5e8639b5-3cc3-527f-8a46-368357f79054","frontmatter":{"slug":"/dev/2020/03/09/flex.html","date":"2020-03-09T00:00:00.000Z","title":"플렉스(flex) 박스, 한 번 정리하고 가자","series":null}},{"id":"55cc3ee1-a6fb-5bd1-aa80-0a45232ec01a","frontmatter":{"slug":"/dev/2020/03/20/role-based-react-router.html","date":"2020-03-20T00:00:00.000Z","title":"리액트 라우터를 활용한 권한별 라우팅 제어","series":null}},{"id":"18131abe-791b-5a49-add7-9f8e077f4587","frontmatter":{"slug":"/dev/2020/03/24/circular-dependancy.html","date":"2020-03-24T00:00:00.000Z","title":"순환 참조","series":null}},{"id":"0b6f0006-a044-5f34-9aef-d742e8ba9985","frontmatter":{"slug":"/think/2020/03/27/imac-ssd-replacement.html","date":"2020-03-27T00:00:00.000Z","title":"오래된 아이맥, SSD 교체하기","series":null}},{"id":"28fa68ab-bfe2-5338-a44f-f3f9fd892749","frontmatter":{"slug":"/think/2020/03/30/remote-work.html","date":"2020-03-30T00:00:00.000Z","title":"슬기로운 재택생활","series":null}},{"id":"449286ea-8a2f-5aba-8e77-06e152b680b7","frontmatter":{"slug":"/dev/2020/04/05/vscode.html","date":"2020-04-05T00:00:00.000Z","title":"알아두면 쓸데있는 VSCode 노하우","series":null}},{"id":"5656f4a3-71be-5295-914e-dd9cb4cc7510","frontmatter":{"slug":"/dev/2020/04/18/interface-to-class.html","date":"2020-04-18T00:00:00.000Z","title":"인터페이스만 사용하다가 클래스를 다시 보았다","series":null}},{"id":"b13e198c-70d9-5ec4-940a-136579aacd55","frontmatter":{"slug":"/dev/2020/04/30/nodemon-EADDRINUSE.html","date":"2020-04-30T00:00:00.000Z","title":"노드몬(nodemon) 사용시 포트 충돌 이슈","series":null}},{"id":"1c4fed55-1c7e-53ce-a484-0288ddbe5253","frontmatter":{"slug":"/think/2020/05/11/test.html","date":"2020-05-11T00:00:00.000Z","title":"테스트 코드는 꼭 필요한가요?","series":null}},{"id":"3959f74c-ef65-572a-a711-619f180f4c93","frontmatter":{"slug":"/dev/2020/05/18/filename.html","date":"2020-05-18T00:00:00.000Z","title":"파일명 컨벤션과 웹팩/노드 오류","series":null}},{"id":"bf2a333e-450f-5d21-ac1d-3bff8f9cdb37","frontmatter":{"slug":"/dev/2020/05/25/supertest.html","date":"2020-05-25T00:00:00.000Z","title":"Node.js로 만든 API 테스트(supertest)","series":null}},{"id":"b3804ca8-ef31-55d4-84af-248905170bb9","frontmatter":{"slug":"/dev/2020/06/08/html5-form-validation.html","date":"2020-06-08T00:00:00.000Z","title":"HTML5 폼 검증에 대해 정리해 보자","series":null}},{"id":"0901cbfd-821c-53dd-9d06-7ef180065552","frontmatter":{"slug":"/dev/2020/06/20/passport.html","date":"2020-06-20T00:00:00.000Z","title":"패스포트 동작 원리와 인증 구현","series":null}},{"id":"2a802b9e-6431-5190-9733-90a1a7fe85d7","frontmatter":{"slug":"/dev/2020/06/27/node-sass.html","date":"2020-06-27T00:00:00.000Z","title":"node-sass가 노드 버전에 의존적이 이유","series":null}},{"id":"6212bf69-1375-5870-a1a9-8c73374a8001","frontmatter":{"slug":"/dev/2020/07/06/sequelize-model.html","date":"2020-07-06T00:00:00.000Z","title":"시퀄라이즈 Model 클래스 활용하기","series":null}},{"id":"ef18b6b4-ff14-551f-bb5b-7cf006a0b835","frontmatter":{"slug":"/dev/2020/07/18/webpack-dev-middleware.html","date":"2020-07-18T00:00:00.000Z","title":"웹팩 개발 서버로 부족하다면 webpack-dev-middleware를 사용해 보자","series":null}},{"id":"a2729497-9441-5e3a-aac2-c22e7d300731","frontmatter":{"slug":"/dev/2020/07/30/gatsby.html","date":"2020-07-30T00:00:00.000Z","title":"Gatsby.js 훑어보기","series":null}},{"id":"54e9a7df-4406-57b9-bfa0-33ad22f9b848","frontmatter":{"slug":"/dev/2020/08/15/react-helmet.html","date":"2020-08-15T00:00:00.000Z","title":"react-helmet의 동작 방식","series":null}},{"id":"a155b6f5-cce9-5fcb-8cd9-f3f520ac6159","frontmatter":{"slug":"/dev/2020/08/19/gatsby-image.html","date":"2020-08-19T00:00:00.000Z","title":"개츠비의 이미지 처리 방식","series":null}},{"id":"5fe81c9e-ac6f-572c-904d-baf6781db8f0","frontmatter":{"slug":"/dev/2020/08/21/gatsby-prefetch.html","date":"2020-08-21T00:00:00.000Z","title":"개츠비 프리로딩과 프리패치","series":null}},{"id":"8e86ce44-0fee-584f-93ba-07983beb69ae","frontmatter":{"slug":"/dev/2020/10/10/mobx.html","date":"2020-10-10T00:00:00.000Z","title":"상태관리 라이브러리 mobx","series":null}},{"id":"579368c9-858f-5a68-af44-0e8b8f16cd41","frontmatter":{"slug":"/dev/2020/10/25/styled-components.html","date":"2020-10-25T00:00:00.000Z","title":"styled-component로 리액트 컴포넌트 만들기","series":null}},{"id":"dd4348c0-8057-5e4e-9cf0-1cb5bf5c4226","frontmatter":{"slug":"/think/2020/11/01/work-density.html","date":"2020-11-01T00:00:00.000Z","title":"업무 밀도","series":null}},{"id":"d57e4e6b-01cc-5225-a84e-b675d428c1fa","frontmatter":{"slug":"/dev/2020/11/08/serverless-1.html","date":"2020-11-08T00:00:00.000Z","title":"서버리스 웹 애플리케이션 만들기","series":null}},{"id":"9443093f-e1b7-50ea-bf6e-5386672a6dd4","frontmatter":{"slug":"/think/2020/11/14/the-reason-i-write.html","date":"2020-11-14T00:00:00.000Z","title":"블로그에 글을 쓰는 이유","series":null}},{"id":"d36b2164-fac6-529a-97d2-82a6f8182fab","frontmatter":{"slug":"/think/2020/12/21/happy-now.html","date":"2020-12-21T00:00:00.000Z","title":"\"당장 야금야금 부지런히 행복해야 돼\"","series":null}},{"id":"7cfaa382-6cf3-5e24-9671-6d9642de869c","frontmatter":{"slug":"/think/2020/12/29/frontend-developer-roles.html","date":"2020-12-29T00:00:00.000Z","title":"프론트엔드 개발자의 역할","series":null}},{"id":"c2940a86-6722-5c9d-84f8-37d0aa16a509","frontmatter":{"slug":"/think/2021/01/07/sense-of-balence.html","date":"2021-01-07T00:00:00.000Z","title":"균형 감각","series":null}},{"id":"a9345331-697f-550e-b411-499b514feef2","frontmatter":{"slug":"/think/2021/01/05/2020.html","date":"2021-01-15T00:00:00.000Z","title":"아, 전설적인 한 해였다","series":null}},{"id":"759d48ef-0628-559a-b2ed-86dcd833305c","frontmatter":{"slug":"/2021-01-scrap","date":"2021-01-31T00:00:00.000Z","title":"2021-01 스크랩","series":null}},{"id":"0c4f2728-6d2d-5d5f-b409-bbf5f4f7ff86","frontmatter":{"slug":"/2021-02-scrap","date":"2021-02-28T00:00:00.000Z","title":"2021-02 스크랩","series":null}},{"id":"bd5bb16f-a7e2-55e0-8f7f-a059507eabd2","frontmatter":{"slug":"/dev/2021/03/08/babel-typescript.html","date":"2021-03-08T00:00:00.000Z","title":"babel-loader와 ts-loader의 빌드 결과가 다른 현상","series":null}},{"id":"440a2b56-4f96-5fb7-89ad-b866d94b7f30","frontmatter":{"slug":"/dev/2021/03/18/type-guard.html","date":"2021-03-18T00:00:00.000Z","title":"유니온 타입과 타입 가드","series":null}},{"id":"b99455fc-1feb-59a1-8fb8-2f3cb19a5e50","frontmatter":{"slug":"/dev/2021/03/22/i18n.html","date":"2021-03-22T00:00:00.000Z","title":"어플리케이션 다국어 기능과 번역가와 협업 방법","series":null}},{"id":"2c0d4416-d9fc-5734-85d1-df970bada932","frontmatter":{"slug":"/dev/2021/03/29/lambda-limits.html","date":"2021-03-29T00:00:00.000Z","title":"AWS 람다 용량 관리","series":null}},{"id":"64064198-369b-5d63-b40a-2b25fdc56b9e","frontmatter":{"slug":"/2021-03-scrap","date":"2021-03-31T00:00:00.000Z","title":"2021-03 스크랩","series":null}},{"id":"48b7a529-6557-56ba-86c5-c917402695c6","frontmatter":{"slug":"/dev/2021/04/01/aws-lambda-cold-start.html","date":"2021-04-01T00:00:00.000Z","title":"AWS 람다 초기 응답 속도 개선하기","series":null}},{"id":"0d3106e9-f2e9-5f96-96ae-1534bdae94bb","frontmatter":{"slug":"/think/2021/04/29/my-first-capacitive-keyboard.html","date":"2021-04-29T00:00:00.000Z","title":"나의 첫 무접점 키보드 ","series":null}},{"id":"5a6e83bf-9234-5d76-bbaf-baa0d9a4dbd9","frontmatter":{"slug":"/2021-04-scrap","date":"2021-04-30T00:00:00.000Z","title":"2021-04 스크랩","series":null}},{"id":"880c391a-653d-548e-ab16-24d676a3e497","frontmatter":{"slug":"/dev/2021/05/05/react-context.html","date":"2021-05-05T00:00:00.000Z","title":"리액트 컨텍스트","series":null}},{"id":"30b5b215-2d89-5f32-830c-7ead6bbc95ce","frontmatter":{"slug":"/dev/2021/05/17/css-variable.html","date":"2021-05-17T00:00:00.000Z","title":"CSS 변수와 웹사이트 테마","series":null}},{"id":"aad758bb-4719-50d4-9e9a-735d261c7ac8","frontmatter":{"slug":"/2021-06-scrap","date":"2021-06-30T00:00:00.000Z","title":"2021-06 스크랩","series":null}},{"id":"8899ded8-feca-5ccb-a23f-9be24ad36930","frontmatter":{"slug":"/think/2021/07/19/design-system-and-streaming.html","date":"2021-07-19T00:00:00.000Z","title":"디자인시스템과 라이브 방송","series":null}},{"id":"5f9ab39b-31f7-593f-94b9-21d798f6951b","frontmatter":{"slug":"/2021-07-scrap","date":"2021-07-31T00:00:00.000Z","title":"2021-07 스크랩","series":null}},{"id":"94859649-1baf-545a-a67a-0e6f6156a4a9","frontmatter":{"slug":"/dev/2021/08/09/testing-frontend.html","date":"2021-08-09T00:00:00.000Z","title":"프론트엔드 테스트할 기회가 생겼다","series":null}},{"id":"84808157-0bb6-5876-b33c-3ea4fa42c45b","frontmatter":{"slug":"/think/2021/08/23/customizing-keyboard.html","date":"2021-08-23T00:00:00.000Z","title":"한성 키보드를 매직 키보드와 유사하게 사용하기","series":null}},{"id":"82692464-0b27-5759-895b-a522c6cb2e0b","frontmatter":{"slug":"/dev/2021/08/26/utterances.html","date":"2021-08-26T00:00:00.000Z","title":"블로그 댓글 서비스 교체: Utterances","series":null}},{"id":"67ab788e-ade8-51e7-a724-9d68abd77d60","frontmatter":{"slug":"/dev/2021/08/31/disqus-to-utterances.html","date":"2021-08-31T00:00:00.000Z","title":"블로그 댓글 서비스 교체: Disqus → Utterances 데이터 이관 ","series":null}},{"id":"db1a1913-21fe-5467-a393-9e96b93335fe","frontmatter":{"slug":"/2021-08-scrap","date":"2021-08-31T00:00:00.000Z","title":"2021-08 스크랩","series":null}},{"id":"ff0eebbc-3544-5679-9cfd-36c38aca05c0","frontmatter":{"slug":"/2021-09-scrap","date":"2021-09-30T00:00:00.000Z","title":"2021-09 스크랩","series":null}},{"id":"300c05c8-4538-5b8c-a9dd-a7e185586e15","frontmatter":{"slug":"/dev/2021/10/29/return-to-intellij.html","date":"2021-10-29T00:00:00.000Z","title":"최근에 발견한 인텔리제이 기능과 플러그인","series":null}},{"id":"2ab16f83-6de8-5c70-87fb-a4c0734556a4","frontmatter":{"slug":"/2021-10-scrap","date":"2021-10-31T00:00:00.000Z","title":"2021-10 스크랩","series":null}},{"id":"495450b6-304d-51fc-bbd1-d9eb4b008ae7","frontmatter":{"slug":"/2021-11-scrap","date":"2021-11-30T00:00:00.000Z","title":"2021-11 스크랩","series":null}},{"id":"3f00d6d8-a100-5427-ac7a-567e6fbf5f79","frontmatter":{"slug":"/2022-01-scrap","date":"2022-01-31T00:00:00.000Z","title":"2022-01 스크랩","series":null}},{"id":"8a1c9363-c93a-50c5-8fea-8ce8ed670601","frontmatter":{"slug":"/2022/02/28/scrap","date":"2022-02-28T00:00:00.000Z","title":"2022-02 스크랩","series":null}},{"id":"3ec2e566-adb0-54e5-9185-f4282f8262d4","frontmatter":{"slug":"/dev/2022/03/29/react-form-and-formik.html","date":"2022-03-29T00:00:00.000Z","title":"리액트로 폼(Form) 다루기","series":null}},{"id":"52e502e4-291f-5b3d-adee-407d0211700d","frontmatter":{"slug":"/2022/03/31/scrap","date":"2022-03-31T00:00:00.000Z","title":"2022-03 스크랩","series":null}},{"id":"2ab1650e-f5ba-5260-b33f-6ef01a9e49c5","frontmatter":{"slug":"/dev/2022/04/11/use-state.html","date":"2022-04-11T00:00:00.000Z","title":"리액트 useState는 어떤 모습일까?","series":null}},{"id":"8b16e0e6-176b-5ee0-81a2-0bba52c22159","frontmatter":{"slug":"/dev/2022/04/24/use-effect.html","date":"2022-04-24T00:00:00.000Z","title":"리액트 useEffect는 어떤 모습일까?","series":null}},{"id":"8e03685f-c63b-534c-8b46-73746169a6f7","frontmatter":{"slug":"/dev/2022/04/28/use-context.html","date":"2022-04-28T00:00:00.000Z","title":"리액트 useContext는 어떤 모습일까?","series":null}},{"id":"d084629c-6652-588e-a8ee-40a2b86ae149","frontmatter":{"slug":"/2022/04/30/scrap","date":"2022-04-30T00:00:00.000Z","title":"2022-04 스크랩","series":null}},{"id":"39e45d99-8f97-5657-881c-3b1f121b12b3","frontmatter":{"slug":"/dev/2022/05/06/react-router.html","date":"2022-05-06T00:00:00.000Z","title":"리액트 라우터 만들기 ","series":null}},{"id":"195a8142-de82-5fe3-980a-43facf613f61","frontmatter":{"slug":"/2022/05/20/react-strict-mode","date":"2022-05-20T00:00:00.000Z","title":"리액트 StrictMode","series":null}},{"id":"f1c71516-b0aa-5291-9ac5-0cbff0f5bbae","frontmatter":{"slug":"/2022/05/28/react-high-order-component","date":"2022-05-28T00:00:00.000Z","title":"리액트 고차 컴포넌트(HOC)","series":null}},{"id":"0a33ac7d-066b-59b4-ba2e-71f33b0411c2","frontmatter":{"slug":"/2022/05/31/react-ref","date":"2022-05-31T00:00:00.000Z","title":"리액트 Ref","series":null}},{"id":"ce96c357-0ca9-53e0-a1f8-d584cc1da2ba","frontmatter":{"slug":"/2022/05/31/scrap","date":"2022-05-31T00:00:00.000Z","title":"2022-05 스크랩","series":null}},{"id":"93b30fd1-a9e6-5f22-84af-f008180a5df5","frontmatter":{"slug":"/2022/06/02/react-portal","date":"2022-06-02T00:00:00.000Z","title":"리액트 Portal","series":null}},{"id":"ba226187-d77a-5279-81ca-c0b7e2df8f69","frontmatter":{"slug":"/2022/06/30/scrap","date":"2022-06-30T00:00:00.000Z","title":"2022-06 스크랩","series":null}},{"id":"0142172b-e141-5db8-b615-1d83b101454d","frontmatter":{"slug":"/2022/07/31/npm-workspace","date":"2022-07-31T00:00:00.000Z","title":"NPM 워크스페이스와 모노레포","series":null}},{"id":"df51a098-cd49-5a7b-97f3-033227eb979e","frontmatter":{"slug":"/2022/08/06/special-parental-leave","date":"2022-08-06T00:00:00.000Z","title":"특별육아휴직","series":null}},{"id":"58e06da6-40dc-501a-8ba9-fa9f9a92b584","frontmatter":{"slug":"/2022/08/21/webpack-output-clean","date":"2022-08-21T00:00:00.000Z","title":"웹팩 빌드시 이전 결과물을 삭제하는 옵션","series":null}},{"id":"bcf951e9-8daa-5db9-b8c8-1d0c5950fb14","frontmatter":{"slug":"/2022/09/19/how-to-send-messages","date":"2022-09-19T00:00:00.000Z","title":"객체 간에 메세지를 전달하는 다양한 방법","series":null}},{"id":"96f0b38b-1040-5d52-822c-e2569d7fb795","frontmatter":{"slug":"/2022/10/12/redux","date":"2022-10-12T00:00:00.000Z","title":"리덕스","series":null}},{"id":"12649a79-de18-52df-869b-3091edd34ab8","frontmatter":{"slug":"/2022/10/31/stomp","date":"2022-10-31T00:00:00.000Z","title":"스톰프(Stomp)","series":null}}]}},"pageContext":{"slug":"/2017/10/22/js-context-binding.html","date":"2017-10-22T00:00:00.000Z","series":null,"videoId":null,"previous":{"frontmatter":{"slug":"/2017/10/21/diy-express-day4.html","date":"2017-10-21T00:00:00.000Z","title":"익스프레스 만들기 Day 4","category":"연재물","series":"Express.js 만들기","videoId":null}},"next":{"frontmatter":{"slug":"/2018/01/01/review-2017.html","date":"2018-01-01T00:00:00.000Z","title":"2017년을 보내며","category":null,"series":null,"videoId":null}}}},"staticQueryHashes":["2263867198"]}