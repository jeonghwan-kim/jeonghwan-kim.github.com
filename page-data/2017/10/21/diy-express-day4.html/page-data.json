{
    "componentChunkName": "component---src-templates-blog-post-index-tsx",
    "path": "/2017/10/21/diy-express-day4.html",
    "result": {"data":{"site":{"siteMetadata":{"title":"김정환 블로그","url":"https://jeonghwan-kim.github.io"}},"markdownRemark":{"id":"6c77651a-80d5-5bb4-ac7a-ec73e9336628","html":"<p>이제 인증 기능을 만들어 보자. 쿠키, 세션, 로그인 순서로 진행하면 되겠다.</p>\n<h2 id=\"쿠키\" style=\"position:relative;\"><a href=\"#%EC%BF%A0%ED%82%A4\" aria-label=\"쿠키 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쿠키</h2>\n<p>먼저 쿠키부터 시작하자.\n<a href=\"https://nodejs.org/dist/latest-v8.x/docs/api/http.html#http_response_setheader_name_value\">문서에 노드의 쿠키설정</a> 방법을 찾았다. <code>Set-Cookie</code> 헤더를 설정해 주면 되는군.</p>\n<p>익스프레스에서는 헤더에 쿠키를 설정하기 위해 응답객체 메소드로 형태로 <a href=\"http://expressjs.com/en/4x/api.html#res.cookie\">req.cookie()</a> 함수를 제공한다. 그럼 내가 만든 response.js에도 <code>cookie()</code>란 이름으로 함수를 추가하면 비슷하게 구현될 것 같다.</p>\n<p>response.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">res<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">cookie</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Set-Cookie\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>쿠키 이름인 name과 값 value를 받아서 HTTP 응답 헤더에 담아 전송하도록 했다.\n미들웨어 함수에서는 응답객체를 이용해 <code>res.cookie('viewCount', 3)</code>처럼 코딩할 수 있다.</p>\n<p>간단하게 뷰 카운터 엔드포인터를 만들어 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/viewCount\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"viewCount\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code>GET /viewCount</code> 요청이 들어오면 쿠키에 <code>\"viewCount=3\"</code>이란 문자열을 담아서 응답하는 기능이다.</p>\n<p>curl로 요청하면 쿠키 정보가 헤더로 응답되는 것을 확인할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -vs localhost:3000/viewCount\n<span class=\"token operator\">&lt;</span> HTTP/1.1 <span class=\"token number\">200</span> OK\n<span class=\"token operator\">&lt;</span> Set-Cookie: <span class=\"token assign-left variable\">viewCount</span><span class=\"token operator\">=</span><span class=\"token number\">3</span></code></pre></div>\n<p>크롬 브라우져의 개발자 도구로 보면 쉽게 확인할 수 있다.\nApplication 탭의 Storage > Cookie 메뉴다.</p>\n<p><img src=\"/assets/imgs/2017/10/cookie-result.png\" alt=\"cookie result\">\nㅓ\ncookie-parser.js:</p>\n<h2 id=\"cookie-parser-미들웨어-만들기\" style=\"position:relative;\"><a href=\"#cookie-parser-%EB%AF%B8%EB%93%A4%EC%9B%A8%EC%96%B4-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"cookie parser 미들웨어 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>cookie-parser 미들웨어 만들기</h2>\n<p><code>res.cookie()</code> 함수로 설정한 쿠키값을 브라우져에 보내면, 브라우져가 다음 요청시에는 이 쿠키 정보를 헤더에 담아서 보낼 것이다. 이 값은 노드 서버에 어떤 형태로 들어올까?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">cookieParser</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"viewCount=3\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>요청 객체의 <code>req.headers.cookie</code> 객체에 쿠키 값이 들어오는데 <code>\"name=value\"</code> 형태의 문자열이다.\n보통 서비스에서 쿠키는 여러 개를 사용하는데 이럴 땐 어떤 형태로 들어올까?\n크롬 개발자도구에서 <code>foo</code>라는 이름에 <code>\"bar\"</code>라는 값을 가진 쿠키를 추가하고 요청해 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">cookieParser</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"viewCount=3; foo=bar\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>쿠키 헤더의 마지막에 <code>\"foo=bar\"</code> 형태로 들어왔다.\n쿠키가 2개 이상일 경우에는 세미콜론(<code>\";\"</code>) 구분자를 사용하는 것을 확인할 수 있다.</p>\n<p>서버 어플리케이션에서 이 쿠키값을 쉽게 사용하려면 어떻게 할 수 있을까?\n쿠키에 접근할 때마다 문자열을 규칙에 맞게 파싱해서 사용할 수도 있겠지만 이 역할을 수행하는 전용 미들웨어를 만들자.</p>\n<p>어플리케이션이 수행되면 이 미들웨어는 서버에 세팅될 것이다.\n모든 요청마다 쿠키 헤더에 접근해서 미리 파싱해 주면, 이후 수행되는 미들웨어는 이미 파싱된 쿠키 정보에 손쉽게 접근할 수 있지 않을까?</p>\n<p>쿠키 문자열을 key/value 형식의 자바스크립트 객체로 파싱하여 <code>req.cookies</code>에 할당하는 것이 바로 cookie-parser 미들웨어의 역할이다.\n익스프레스의 <a href=\"https://github.com/expressjs/cookie-parser\">cookie-parser</a>도 그런 역할을 한다.</p>\n<p>그럼 cookie-parser 미들웨어를 구현해 보자.</p>\n<p>cookie-parser.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">parseCookie</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">req</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>req<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> req<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">';'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> pair</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    pair <span class=\"token operator\">=</span> pair<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> k <span class=\"token operator\">=</span> pair<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> v <span class=\"token operator\">=</span> pair<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    obj<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v\n    <span class=\"token keyword\">return</span> obj\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">cookieParser</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>req<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>req<span class=\"token punctuation\">.</span>cookies <span class=\"token operator\">=</span> <span class=\"token function\">parseCookie</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> cookieParser</code></pre></div>\n<p>이 미들웨어를 어플리케이션(app.js)에 설정하고:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">cookieParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>요청객체를 살펴보면:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">)</span> <span class=\"token comment\">// { viewCount: '3', foo: 'bar' }</span></code></pre></div>\n<p>헤더에 문자열로 전달된 쿠키 정보가 자바스크립트 객체로 변환된 것을 확인할 수 있다.</p>\n<h2 id=\"쿠키-응용-pageview-counter\" style=\"position:relative;\"><a href=\"#%EC%BF%A0%ED%82%A4-%EC%9D%91%EC%9A%A9-pageview-counter\" aria-label=\"쿠키 응용 pageview counter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쿠키 응용: pageview-counter</h2>\n<p>쿠키 기능을 이용해 pageview-counter 미들웨어를 만들어 보자.\npageview-counter는 클라이언트가 서버에 접속할 때마다 브라우져가 보내는 헤더의 쿠키에 저장된 카운터 값을 읽어 증가 시킨다.\n그리고 이 증가한 값을 헤더에 담아 요청한 클라이언트로 응답하는 구조다.</p>\n<p>pageview-counter.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">pageviewCounter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> views <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span>views <span class=\"token operator\">?</span> req<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span>views <span class=\"token operator\">*</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n    req<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span>views <span class=\"token operator\">=</span> views\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"views\"</span><span class=\"token punctuation\">,</span> views<span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> pageviewCounter</code></pre></div>\n<p>페이지 뷰 카운터 미들웨어를 어플리케이션에 추가하면 매 요청시마다 카운터가 증가하는 것을 확인할 수 있다.</p>\n<ul>\n<li>첫번째 페이지 접속: <img src=\"/assets/imgs/2017/10/pageview-counter-1.png\" alt=\"pageview counter 1\"></li>\n<li>세번째 페이지 접속: <img src=\"/assets/imgs/2017/10/pageview-counter-3.png\" alt=\"pageview counter 3\"></li>\n<li>일곱번째 페이지 접속: <img src=\"/assets/imgs/2017/10/pageview-counter-7.png\" alt=\"pageview counter 7\"></li>\n</ul>\n<h2 id=\"세션\" style=\"position:relative;\"><a href=\"#%EC%84%B8%EC%85%98\" aria-label=\"세션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>세션</h2>\n<p>쿠키에 저장된 데이터는 노출해도 무방한 정보여야 한다. 방금 만든 페이뷰 카운터처럼 말이다.</p>\n<p>하지만 서버에서만 관리해야하고 브라우져에 남아서는 안되는 데이터는 어떻게 해야할까?\n접속한 유저의 개인정보 같은 것들 말이다.</p>\n<p>이러한 문제를 해결하는게 <strong>세션 저장소</strong>다. 클라이언트의 민감한 정보를 저장해야하는 용도로 사용하는 것이다.</p>\n<p>자바스크립트 Map 객체를 만들어 타임스탬프를 아이디로 하는 세션 저장소를 만들겠다.\n이것도 미들웨어로 구현하자.</p>\n<p>session.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">session</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> storage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">generateSession</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> sid <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">s</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n    storage<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>sid<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> sid <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> sid\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> sid <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span>sid\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>storage<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>sid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      sid <span class=\"token operator\">=</span> <span class=\"token function\">generateSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sid\"</span><span class=\"token punctuation\">,</span> sid<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    req<span class=\"token punctuation\">.</span>session <span class=\"token operator\">=</span> storage<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>sid<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> session</code></pre></div>\n<p>세션 데이터 중 세션 아이디(<code>sid</code>)만 쿠키에 저장했다.\n매 요청이 들어오면 쿠키에서 <code>sid</code>를 읽는다. 세션 저장소인 Map 객체에서 <code>sid</code>로 세션 객체를 찾을 경우 <code>req.session</code>에 객체를 할당한다. 찾지 못할 경우에는 새로운 <code>sid</code>를 생성하고 쿠키에 <code>sid</code>와 세션 객체를 저장한다.</p>\n<h2 id=\"세션-응용-pageview-counter-개선\" style=\"position:relative;\"><a href=\"#%EC%84%B8%EC%85%98-%EC%9D%91%EC%9A%A9-pageview-counter-%EA%B0%9C%EC%84%A0\" aria-label=\"세션 응용 pageview counter 개선 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>세션 응용: pageview-counter 개선</h2>\n<p>pageview-counter는 카운터 정보를 쿠키에 직접 저장했다.\n이번에는 이 카운터를 세션에 저장해 보겠다(민감한 정보가 아니긴하지만).\n다만 세션 아이디만 쿠키에 저장해서 클라이언트를 식별하도록 하겠다.</p>\n<p>pageview-counter.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">pageviewCounter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    req<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>views <span class=\"token operator\">?</span> req<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>views<span class=\"token operator\">++</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>views <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>요청시 브라우져에는 세션 아이디만 남는다.\n<img src=\"/assets/imgs/2017/10/session-result-1.png\" alt=\"session result in browser\"></p>\n</li>\n<li>\n<p>서버의 세션 저장소에는 카운터 데이터가 증가되었다.\n<img src=\"/assets/imgs/2017/10/session-result-2.png\" alt=\"session result in server\"></p>\n</li>\n</ul>\n<h2 id=\"인증-만들기\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%A6%9D-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"인증 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인증 만들기</h2>\n<p>예제라서 그렇지, 사실 페이지뷰 카운터는 쿠키에 저장해도 무방하다.\n그럼 실제 사례가 될만한 인증 기능을 세션과 쿠키를 이용해 구현해 보자.</p>\n<h2 id=\"로그인폼\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EA%B7%B8%EC%9D%B8%ED%8F%BC\" aria-label=\"로그인폼 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로그인폼</h2>\n<p>템플릿 엔진이 파싱해줄 header.view를 먼저 만든다.</p>\n<p>login.view:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">include 'header.view'\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>login-form<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">autofocus</span> <span class=\"token punctuation\">/></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Password<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Login<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\ninclude 'footer.view'</code></pre></div>\n<p>이메일과 비밀번호 입력 필드를 추가했다.\n브라우져에서 동작할 자바스크립트에서는 로그인 버튼을 클릭하여 발생할 submit 이벤트에 로그인 api를 요청하도록 구현했다.</p>\n<p>login.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">loginForm<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'submit'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> email <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">.</span>value <span class=\"token operator\">||</span> <span class=\"token string\">''</span>\n    <span class=\"token keyword\">const</span> password <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">.</span>value <span class=\"token operator\">||</span> <span class=\"token string\">''</span>\n\n    auth<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n      <span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'success login'</span><span class=\"token punctuation\">)</span>\n        window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">'/'</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n      <span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Login failed. Try again'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"로그인-api\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EA%B7%B8%EC%9D%B8-api\" aria-label=\"로그인 api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로그인 API</h2>\n<p>브라우져의 로그인 폼에서 요청한 로그인 api는 <code>POST /api/auth/login</code>으로 정했다.\n그럼 서버에 이 엔드포인트를 구현해 보겠다.</p>\n<p>먼저는 어플리케이션에 라우팅 로직을 추가해야겠다. app.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/auth/login\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./routes/api/auth\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">)</span></code></pre></div>\n<p>그리고 auth.js 미들웨어를 구현한다. auth.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">email</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ej88ej@gmail.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span> <span class=\"token string\">\"123\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">login</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> email<span class=\"token punctuation\">,</span> password <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body\n\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> users<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">.</span>email <span class=\"token operator\">===</span> email <span class=\"token operator\">&amp;&amp;</span> user<span class=\"token punctuation\">.</span>password <span class=\"token operator\">===</span> password\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> req<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> user\n\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">?</span> <span class=\"token number\">200</span> <span class=\"token operator\">:</span> <span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>아직은 데이터베이스가 없으니깐 목업 디비인 <code>users</code> 배열을 임시로 만들었다.</p>\n<p>로그인 미들웨어 함수에서는 요청 바디에서 이메일과 비밀번호를 알아내고, 이 정보를 <code>users</code> 디비에서 찾는다한다.\n유저를 찾은 경우는 세션의 <code>req.session.user</code> 객체에 디비의 유저 정보를 저장한다.\n그리고 이 정보를 200 상태코드와 함께 응답한다.</p>\n<p>결과적으로 session 미들웨어에 의해 세션 아이디만 쿠키에 저장되고 브라우져에 노출될 것이다.</p>\n<p>다음 요청부터는 <code>req.session.user</code> 객체를 통해 어떤 유저가 접속한 브라우져인지 식별할 수 있게 된 것이다.</p>\n<p><img src=\"/assets/imgs/2017/10/session-user.png\" alt=\"session user\"></p>\n<h2 id=\"로그아웃-api\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EA%B7%B8%EC%95%84%EC%9B%83-api\" aria-label=\"로그아웃 api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로그아웃 API</h2>\n<p>로그아웃 기능은 간단하다. 세션의 유저 정보를 삭제하기만 하면된다.\n<code>DELETE /api/auth/logout</code> 엔드포인트로 만들어보자.</p>\n<p>auth.js</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">logout</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">delete</span> req<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>user\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"접근제어\" style=\"position:relative;\"><a href=\"#%EC%A0%91%EA%B7%BC%EC%A0%9C%EC%96%B4\" aria-label=\"접근제어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>접근제어</h2>\n<p>아직 로그인, 로그아웃 구현으로는 인증 기능을 실감하지 못하겠다.</p>\n<p>실제 이 클라이언트가 인증되었다면 인가된 페이지에 접속할수 있도록 해야 한다.\n만약 그렇지 않다면 페이지 접속을 차단해야한다.</p>\n<p>이것을 <strong>접근 제어</strong>라고 하는데 간단한 접근 제어 기능을 구현해 보자.\n핵심은 <code>req.session.user</code> 객체를 사용하는 것이다.</p>\n<p>로그인한 유저만 <code>/new.html</code>에 접속할수 있도록 구현해 보겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">newPost</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>req<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login.html\"</span><span class=\"token punctuation\">)</span>\n\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"new\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"New Post\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">scriptPath</span><span class=\"token operator\">:</span> <span class=\"token string\">\"js/new.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>newPost 미들웨어 함수가 new.html를 렌더링하는 역할을 한다.\n<code>res.render()</code> 함수가 그 역할을 하는데, 그 전에 로그인 여부를 확인할 수 있다.</p>\n<p><code>req.session.user</code> 객체가 설정되어 있지 않으면 로그인 되지 않았다고 판단할 수 있다.\n그러한 요청은 로그인 페이지로 리다이렉트 시켜버린다.</p>\n<p>리다이렉트 함수는 아직 미구현이고 익스프레스 프레임웍크처럼 함수 호출 코드만 작성했다.</p>\n<h2 id=\"리다이렉트\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EB%8B%A4%EC%9D%B4%EB%A0%89%ED%8A%B8\" aria-label=\"리다이렉트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리다이렉트</h2>\n<p>응답 관련된 기능이니깐 response.js에 추가하는게 적절해 보인다. <code>res.redirect(path)</code> 형태로 사용할 함수를 만들자.</p>\n<p>HTTP 리다이렉트 관련해서는 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Redirections\">MDM Redirect 문서</a>를 확인하면 되고, 노드에서는 <a href=\"https://stackoverflow.com/questions/4062260/nodejs-redirect-url?answertab=active#tab-top\">이런식</a>으로 구현한다.</p>\n<p>우리 response.js에서는 이렇게 구현할 수 있다. response.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">res<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">redirect</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">path</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">302</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Location\"</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기까지 익스프레스 프레임웍의 주요 기능을 직접 구현해 봤다. 사실 추석기간에 마치려고 했는데 좀 늦어졌다.</p>\n<p>다음 포스팅이 마지막이 될 것 같다. 익스프레스와는 별개로 <a href=\"http://docs.sequelizejs.com/\">시퀄라이즈 ORM</a>를 간단히 구현해서 실제 디비까지 붙여 보겠다.</p>","frontmatter":{"slug":"/2017/10/21/diy-express-day4.html","date":"2017-10-21T00:00:00.000Z","title":"익스프레스 만들기 Day 4","tags":["expressjs","인증"],"series":"Express.js 만들기","videoId":null,"featuredImage":null},"tableOfContents":"<ul>\n<li><a href=\"#%EC%BF%A0%ED%82%A4\">쿠키</a></li>\n<li><a href=\"#cookie-parser-%EB%AF%B8%EB%93%A4%EC%9B%A8%EC%96%B4-%EB%A7%8C%EB%93%A4%EA%B8%B0\">cookie-parser 미들웨어 만들기</a></li>\n<li><a href=\"#%EC%BF%A0%ED%82%A4-%EC%9D%91%EC%9A%A9-pageview-counter\">쿠키 응용: pageview-counter</a></li>\n<li><a href=\"#%EC%84%B8%EC%85%98\">세션</a></li>\n<li><a href=\"#%EC%84%B8%EC%85%98-%EC%9D%91%EC%9A%A9-pageview-counter-%EA%B0%9C%EC%84%A0\">세션 응용: pageview-counter 개선</a></li>\n<li><a href=\"#%EC%9D%B8%EC%A6%9D-%EB%A7%8C%EB%93%A4%EA%B8%B0\">인증 만들기</a></li>\n<li><a href=\"#%EB%A1%9C%EA%B7%B8%EC%9D%B8%ED%8F%BC\">로그인폼</a></li>\n<li><a href=\"#%EB%A1%9C%EA%B7%B8%EC%9D%B8-api\">로그인 API</a></li>\n<li><a href=\"#%EB%A1%9C%EA%B7%B8%EC%95%84%EC%9B%83-api\">로그아웃 API</a></li>\n<li><a href=\"#%EC%A0%91%EA%B7%BC%EC%A0%9C%EC%96%B4\">접근제어</a></li>\n<li><a href=\"#%EB%A6%AC%EB%8B%A4%EC%9D%B4%EB%A0%89%ED%8A%B8\">리다이렉트</a></li>\n</ul>","excerpt":"이제 인증 기능을 만들어 보자. 쿠키, 세션, 로그인 순서로 진행하면 되겠다. 쿠키 먼저 쿠키부터 시작하자.\n문서에 노드의 쿠키설정 방법을 찾았다. Set-Cookie 헤더를 설정해 주면 되는군. 익스프레스에서는 헤더에 쿠키를 설정하기 위해 응답객체 메소드로 형태로 req.cookie() 함수를 제공한다. 그럼 내가 만든 response.js…"},"video":null,"allMarkdownRemark":{"nodes":[{"id":"c851f5ac-71d2-5f87-a445-97115296ee4b","frontmatter":{"slug":"/2017/10/03/diy-express-day1.html","date":"2017-10-03T00:00:00.000Z","title":"익스프레스 만들기 Day 1","series":"Express.js 만들기"}},{"id":"06940246-99d1-5a6f-b51a-6ea9825e503c","frontmatter":{"slug":"/2017/10/05/diy-express-day2.html","date":"2017-10-05T00:00:00.000Z","title":"익스프레스 만들기 Day 2","series":"Express.js 만들기"}},{"id":"94cf8981-5aca-5efc-97e9-b496ece6473c","frontmatter":{"slug":"/2017/10/06/diy-express-day3.html","date":"2017-10-06T00:00:00.000Z","title":"익스프레스 만들기 Day 3","series":"Express.js 만들기"}},{"id":"6c77651a-80d5-5bb4-ac7a-ec73e9336628","frontmatter":{"slug":"/2017/10/21/diy-express-day4.html","date":"2017-10-21T00:00:00.000Z","title":"익스프레스 만들기 Day 4","series":"Express.js 만들기"}}]}},"pageContext":{"slug":"/2017/10/21/diy-express-day4.html","date":"2017-10-21T00:00:00.000Z","series":"Express.js 만들기","videoId":null,"previous":{"frontmatter":{"slug":"/2017/10/06/diy-express-day3.html","date":"2017-10-06T00:00:00.000Z","title":"익스프레스 만들기 Day 3","category":"연재물","series":"Express.js 만들기","videoId":null}},"next":{"frontmatter":{"slug":"/2017/10/22/js-context-binding.html","date":"2017-10-22T00:00:00.000Z","title":"자바스크립트 this 바인딩 우선순위","category":"개발","series":null,"videoId":null}}}},
    "staticQueryHashes": ["2263867198"]}