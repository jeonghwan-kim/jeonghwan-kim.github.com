{
    "componentChunkName": "component---src-templates-blog-post-index-tsx",
    "path": "/lectures/todomvc-angular/10/",
    "result": {"data":{"site":{"siteMetadata":{"title":"김정환 블로그","url":"https://jeonghwan-kim.github.io"}},"markdownRemark":{"id":"faa767c3-125e-5124-81fa-6483f6486d27","html":"<p>이제부터 서버를 만들어 보자.\n서버 기능은 두 가지라고 앞서 얘기했다. (참고: <a href=\"/lectures/todomvc-angular/1/\">앵귤러로 Todo앱 만들기 1 - 노드 설치노드 설치</a>)</p>\n<ol>\n<li>정적파일 호스팅</li>\n<li>API 기능</li>\n</ol>\n<p>이것을 쉽게 구현할수 있는 것이 <a href=\"http://expressjs.com\">Express.js</a>라고 하는 웹프레임워크다.\nnpm으로 익스프레스 엔진을 프로젝트에 추가해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> express --save</code></pre></div>\n<p>package.json에 express 모듈이 추가 되었을 것이다.\n현재 버전으로는 v4.13.4 버전이 설치 되었다.</p>\n<p>앞으로 server 폴더 서버 코드를 작성해 하겠다.\nexpress.js 공식 사이트에 있는 <a href=\"http://expressjs.com/en/starter/hello-world.html\">hello world 샘플 코드</a>를 사용해보자.</p>\n<p>server/app.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// part 1</span>\n<span class=\"token keyword\">var</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// part 2</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// part 3</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Example app listening on port 3000!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>설명을 위해 코드을 세 부분으로 나눠서 주석을 달았다.</p>\n<p>part 1에서 express 모듈을 로딩한다.\n그리고 인스턴스를 하나 생성해서 <code>app</code> 변수에 저장한다.\n뒤에 <code>app</code> 변수를 가지고 서버를 세팅하고 구동시킬 것이다.</p>\n<p>part 2에서는 기본 라우팅 설정을 했다.\n도메인에 접속하면 \"Hello World!\" 문자열을 출력하도록 했다</p>\n<p>part3에서는 <code>listen()</code> 함수로 서버를 구동한다.\n3000번 포트를 사용할 것이며 서버가 구동되는 동시에 \"Express app listeing ...\" 문구가 서버측 콘솔에 찍힐 것이다.</p>\n<p>명령어로 노드 어플리케이션을 실행 시켜보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">node</span> server/app\nExample app listening on port <span class=\"token number\">3000</span><span class=\"token operator\">!</span></code></pre></div>\n<p>웹브라우져를 열고 localhost:3000 주소로 접속해 보자.</p>\n<p><img src=\"/assets/imgs/2016/lecture-todomvc-angular-13-result1.png\" alt=\"\"></p>\n<h2 id=\"npm으로-간단히-서버-구동하기\" style=\"position:relative;\"><a href=\"#npm%EC%9C%BC%EB%A1%9C-%EA%B0%84%EB%8B%A8%ED%9E%88-%EC%84%9C%EB%B2%84-%EA%B5%AC%EB%8F%99%ED%95%98%EA%B8%B0\" aria-label=\"npm으로 간단히 서버 구동하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NPM으로 간단히 서버 구동하기</h2>\n<p>이전에 npm의 기능중 서버 구동기능을 언급했다.\npackage.json에 npm 명령어를 설정할 수 있다.\n아래처럼 start 스크립트를 추가해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node server/app\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그리고 터미널에 <code>npm start</code>를 실행하면 동일하게 노드 서버가 구동된다.\n앞으로는 npm start으로 서버를 구동시키자.</p>","frontmatter":{"slug":"/lectures/todomvc-angular/10/","date":"2016-06-14T09:00:10.000Z","title":"앵귤러로 Todo앱 만들기 10 - Express.js로 웹서버 만들기","tags":["angularjs","lecture"],"seriesId":"series-2016-06-11-angularjs","videoId":null,"featuredImage":null},"tableOfContents":"<ul>\n<li><a href=\"#npm%EC%9C%BC%EB%A1%9C-%EA%B0%84%EB%8B%A8%ED%9E%88-%EC%84%9C%EB%B2%84-%EA%B5%AC%EB%8F%99%ED%95%98%EA%B8%B0\">NPM으로 간단히 서버 구동하기</a></li>\n</ul>","excerpt":"이제부터 서버를 만들어 보자.\n서버 기능은 두 가지라고 앞서 얘기했다. (참고: 앵귤러로 Todo앱 만들기 1 - 노드 설치노드 설치) 정적파일 호스팅 API 기능 이것을 쉽게 구현할수 있는 것이 Express.js라고 하는 웹프레임워크다.\nnpm으로 익스프레스 엔진을 프로젝트에 추가해보자. package.json에 express 모듈이 추가 되었을 것이다.\n현재 버전으로는 v4.13.4 버전이 설치 되었다. 앞으로 server 폴더 서버 코드를 작성해 하겠다.\nexpress.js 공식 사이트에 있는 hello world 샘플 코드를 사용해보자. server/app.js: 설명을 위해 코드을 세 부분으로 나눠서 주석을 달았다. part 1에서 express 모듈을 로딩한다.\n그리고 인스턴스를 하나 생성해서 app 변수에 저장한다.\n뒤에 app 변수를 가지고 서버를 세팅하고 구동시킬 것이다. part 2에서는 기본 라우팅 설정을 했다.\n도메인에 접속하면 \"Hello World…"},"series":{"id":"series-2016-06-11-angularjs","title":"앵귤러로 Todo앱 만들기"},"video":null,"allMarkdownRemark":{"nodes":[{"id":"422b62fe-3496-5787-a006-65941af39942","frontmatter":{"slug":"/lectures/todomvc-angular/1/","date":"2016-06-12T09:00:01.000Z","title":"앵귤러로 Todo앱 만들기 1 - 노드설치","seriesId":"series-2016-06-11-angularjs"}},{"id":"59ca121f-20d7-556e-aa0d-4c26861310dc","frontmatter":{"slug":"/lectures/todomvc-angular/2/","date":"2016-06-12T09:00:02.000Z","title":"앵귤러로 Todo앱 만들기 2 - 앵귤러 로딩","seriesId":"series-2016-06-11-angularjs"}},{"id":"fdff9d7c-98e4-573c-915d-bea8cbd6a632","frontmatter":{"slug":"/lectures/todomvc-angular/3/","date":"2016-06-12T09:00:03.000Z","title":"앵귤러로 Todo앱 만들기 3 - 컨트롤러","seriesId":"series-2016-06-11-angularjs"}},{"id":"b6a06b85-2425-5a8f-b389-3eecb96ea717","frontmatter":{"slug":"/lectures/todomvc-angular/4/","date":"2016-06-12T09:00:04.000Z","title":"앵귤러로 Todo앱 만들기 4 - 투두 목록 출력하기","seriesId":"series-2016-06-11-angularjs"}},{"id":"e405bd22-8ed7-5631-b7de-7780ea11b1a0","frontmatter":{"slug":"/lectures/todomvc-angular/5/","date":"2016-06-12T09:00:05.000Z","title":"앵귤러로 Todo앱 만들기 5 - 새로운 투두 추가하기","seriesId":"series-2016-06-11-angularjs"}},{"id":"9e8e5df2-4e23-5971-9f4c-f45bb672852a","frontmatter":{"slug":"/lectures/todomvc-angular/6/","date":"2016-06-13T09:00:06.000Z","title":"앵귤러로 Todo앱 만들기 6 - Bootstrap으로 꾸미기","seriesId":"series-2016-06-11-angularjs"}},{"id":"8e117c92-1ae2-521f-8a0d-bd1dcb1737ae","frontmatter":{"slug":"/lectures/todomvc-angular/7/","date":"2016-06-13T09:00:07.000Z","title":"앵귤러로 Todo앱 만들기 7 - 투두 목록 필터링","seriesId":"series-2016-06-11-angularjs"}},{"id":"a103addf-58ed-588a-9368-b9b1399b87e2","frontmatter":{"slug":"/lectures/todomvc-angular/8/","date":"2016-06-14T09:00:08.000Z","title":"앵귤러로 Todo앱 만들기 8 - Directive","seriesId":"series-2016-06-11-angularjs"}},{"id":"ed03d961-15ac-555e-bdd8-8b13dec0c59a","frontmatter":{"slug":"/lectures/todomvc-angular/9/","date":"2016-06-14T09:00:09.000Z","title":"앵귤러로 Todo앱 만들기 9 - Service","seriesId":"series-2016-06-11-angularjs"}},{"id":"faa767c3-125e-5124-81fa-6483f6486d27","frontmatter":{"slug":"/lectures/todomvc-angular/10/","date":"2016-06-14T09:00:10.000Z","title":"앵귤러로 Todo앱 만들기 10 - Express.js로 웹서버 만들기","seriesId":"series-2016-06-11-angularjs"}},{"id":"435df555-6df9-5870-943f-74e8d6dee256","frontmatter":{"slug":"/lectures/todomvc-angular/11/","date":"2016-06-14T09:00:11.000Z","title":"앵귤러로 Todo앱 만들기 11 - Static Files","seriesId":"series-2016-06-11-angularjs"}},{"id":"0d733f9b-3d52-54aa-845a-9cb80ca24454","frontmatter":{"slug":"/lectures/todomvc-angular/12/","date":"2016-06-14T09:00:12.000Z","title":"앵귤러로 Todo앱 만들기 12 - APIs","seriesId":"series-2016-06-11-angularjs"}},{"id":"e1f392a8-86ef-519a-8cf9-d4caa652b5f8","frontmatter":{"slug":"/lectures/todomvc-angular/13/","date":"2016-06-16T09:00:13.000Z","title":"앵귤러로 Todo앱 만들기 13 - $http로 앵귤러 서비스 개선하기","seriesId":"series-2016-06-11-angularjs"}}]}},"pageContext":{"slug":"/lectures/todomvc-angular/10/","date":"2016-06-14T09:00:10.000Z","seriesId":"series-2016-06-11-angularjs","videoId":null,"previous":{"frontmatter":{"slug":"/lectures/todomvc-angular/9/","date":"2016-06-14T09:00:09.000Z","title":"앵귤러로 Todo앱 만들기 9 - Service","category":"연재물","seriesId":"series-2016-06-11-angularjs","videoId":null}},"next":{"frontmatter":{"slug":"/lectures/todomvc-angular/11/","date":"2016-06-14T09:00:11.000Z","title":"앵귤러로 Todo앱 만들기 11 - Static Files","category":"연재물","seriesId":"series-2016-06-11-angularjs","videoId":null}}}},
    "staticQueryHashes": ["3044774879"]}