{
    "componentChunkName": "component---src-templates-blog-post-index-tsx",
    "path": "/lectures/todomvc-angular/11/",
    "result": {"data":{"site":{"siteMetadata":{"title":"김정환 블로그","url":"https://jeonghwan-kim.github.io"}},"markdownRemark":{"id":"91023013-3318-5a52-808d-bc5981fa3063","html":"<p>사실 우리 싸이트의 홈페이지로 접속하면 angular로 만들었던 index.html 페이지가 로딩되는 것이 자연스럽니다.\n결국은 서버에 있는 프론트엔드 코드들이 브라우져로 다운로드 되어야 하는데\n이러한 파일들을 우리는 정적파일(Static Files) 이라고 부르고 express.js는 그러한 기능을 제공한다.</p>\n<h2 id=\"static-file-설정하기\" style=\"position:relative;\"><a href=\"#static-file-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"static file 설정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>static file 설정하기</h2>\n<p>express 사이트에 <a href=\"http://expressjs.com/en/starter/static-files.html\">static file 설정하는 방법</a>이 잘 나와있으니 이것을 참고하자.</p>\n<p><code>app.use(express.static('폴더명'));</code> 코드를 작성하면 된다.\n우리는 이럴줄 알고 정적파일을 모두 client 폴더로 이동해 놨다.\n서버 코드에 <code>app.use(express.static('../client'));</code>를 추가하면 된다.</p>\n<p>그러나 경로를 계산하는데 조금 까다로울 수 있다.\n서버의 절대 경로를 계산해서 설정하는 것이 확실하다.\n그래서 path 모듈과 <code>__dirname</code> 글로벌 변수를 사용하여 절대 경로를 계산한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">static</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"../client\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>그리고 \"hello world!\"\" 문자열을 보내줬던 라우팅 설정도 변경한다.\n<code>sendfile()</code> 함수롤 index.html 파일을 보내도록 설정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">sendfile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index.html\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이 코드를 추가하고 서버를 재구동한 뒤 브라우져로 접속해 보자.\nindex.html은 보이는것 같지만 뭔가 깨져 보인다.\n왜일까?</p>\n<p>증상을 보면 스타일시트가 재대로 안먹었고 앵귤러 라이브러리도 다운로드 되지 않은 것같다.\n브라우져 개발자 툴로 확인해봐라.\n다운로드 되지 않은 파일들은 node_modules 폴더에 있는 것들이다.\n브라우져에서 서버의 node_modules 폴더에 접근할수 없기 때문인것 같다.\n따라서 node_moudles 폴더도 정적파일로 설정해 주어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"/node_modules\"</span><span class=\"token punctuation\">,</span>\n  express<span class=\"token punctuation\">.</span><span class=\"token function\">static</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"../node_modules\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>서버를 재구동하고 다시 접속해서 확인해보자.\n우리가 만들었던 앵귤러 페이지가 제대로 보일 것이다.</p>\n<p><img src=\"/assets/imgs/2016/lecture-todomvc-angular-14-result1.png\" alt=\"\"></p>","frontmatter":{"slug":"/lectures/todomvc-angular/11/","date":"2016-06-14T09:00:11.000Z","title":"앵귤러로 Todo앱 만들기 11 - Static Files","tags":["expressjs","lecture"],"series":"앵귤러로 Todo앱 만들기","videoId":null,"featuredImage":null},"tableOfContents":"<ul>\n<li><a href=\"#static-file-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\">static file 설정하기</a></li>\n</ul>","excerpt":"사실 우리 싸이트의 홈페이지로 접속하면 angular로 만들었던 index.html 페이지가 로딩되는 것이 자연스럽니다.\n결국은 서버에 있는 프론트엔드 코드들이 브라우져로 다운로드 되어야 하는데\n이러한 파일들을 우리는 정적파일(Static Files) 이라고 부르고 express.js는 그러한 기능을 제공한다. static file 설정하기 express 사이트에 static file 설정하는 방법이 잘 나와있으니 이것을 참고하자. app.use(express.static('폴더명')); 코드를 작성하면 된다.\n우리는 이럴줄 알고 정적파일을 모두 client 폴더로 이동해 놨다.\n서버 코드에 app.use(express.static('../client'));를 추가하면 된다. 그러나 경로를 계산하는데 조금 까다로울 수 있다.\n서버의 절대 경로를 계산해서 설정하는 것이 확실하다.\n그래서 path 모듈과 __dirname 글로벌 변수를 사용하여 절대 경로를 계산한다. 그리고 \"hello…"},"video":null,"allMarkdownRemark":{"nodes":[{"id":"2e94c765-2c0b-5ba9-87b5-63a1f12eac23","frontmatter":{"slug":"/lectures/todomvc-angular/1/","date":"2016-06-12T09:00:01.000Z","title":"앵귤러로 Todo앱 만들기 1 - 노드설치","series":"앵귤러로 Todo앱 만들기"}},{"id":"4d6947a3-62a3-5075-85c4-496bde227879","frontmatter":{"slug":"/lectures/todomvc-angular/2/","date":"2016-06-12T09:00:02.000Z","title":"앵귤러로 Todo앱 만들기 2 - 앵귤러 로딩","series":"앵귤러로 Todo앱 만들기"}},{"id":"a7409d13-ad1e-5005-87c1-be4ae5f77dcf","frontmatter":{"slug":"/lectures/todomvc-angular/3/","date":"2016-06-12T09:00:03.000Z","title":"앵귤러로 Todo앱 만들기 3 - 컨트롤러","series":"앵귤러로 Todo앱 만들기"}},{"id":"092c9d4b-1d95-55d0-9bd3-bad5d548893b","frontmatter":{"slug":"/lectures/todomvc-angular/4/","date":"2016-06-12T09:00:04.000Z","title":"앵귤러로 Todo앱 만들기 4 - 투두 목록 출력하기","series":"앵귤러로 Todo앱 만들기"}},{"id":"ab832974-daba-5662-a494-2d2cee5ed763","frontmatter":{"slug":"/lectures/todomvc-angular/5/","date":"2016-06-12T09:00:05.000Z","title":"앵귤러로 Todo앱 만들기 5 - 새로운 투두 추가하기","series":"앵귤러로 Todo앱 만들기"}},{"id":"bd6b2bc5-b249-5abc-a636-2cf8012b25a6","frontmatter":{"slug":"/lectures/todomvc-angular/6/","date":"2016-06-13T09:00:06.000Z","title":"앵귤러로 Todo앱 만들기 6 - Bootstrap으로 꾸미기","series":"앵귤러로 Todo앱 만들기"}},{"id":"18eafc33-30a3-58e5-9f97-a4a93bcd175c","frontmatter":{"slug":"/lectures/todomvc-angular/7/","date":"2016-06-13T09:00:07.000Z","title":"앵귤러로 Todo앱 만들기 7 - 투두 목록 필터링","series":"앵귤러로 Todo앱 만들기"}},{"id":"981aa553-69a4-5810-a149-2ffe13bbef98","frontmatter":{"slug":"/lectures/todomvc-angular/8/","date":"2016-06-14T09:00:08.000Z","title":"앵귤러로 Todo앱 만들기 8 - Directive","series":"앵귤러로 Todo앱 만들기"}},{"id":"8ca78d7a-7498-5145-96c8-2ab3bad07f55","frontmatter":{"slug":"/lectures/todomvc-angular/9/","date":"2016-06-14T09:00:09.000Z","title":"앵귤러로 Todo앱 만들기 9 - Service","series":"앵귤러로 Todo앱 만들기"}},{"id":"c692f04e-51db-52f2-aa55-a770249f3549","frontmatter":{"slug":"/lectures/todomvc-angular/10/","date":"2016-06-14T09:00:10.000Z","title":"앵귤러로 Todo앱 만들기 10 - Express.js로 웹서버 만들기","series":"앵귤러로 Todo앱 만들기"}},{"id":"91023013-3318-5a52-808d-bc5981fa3063","frontmatter":{"slug":"/lectures/todomvc-angular/11/","date":"2016-06-14T09:00:11.000Z","title":"앵귤러로 Todo앱 만들기 11 - Static Files","series":"앵귤러로 Todo앱 만들기"}},{"id":"0e4be43c-d245-5f34-a434-5b7f3919f6cb","frontmatter":{"slug":"/lectures/todomvc-angular/12/","date":"2016-06-14T09:00:12.000Z","title":"앵귤러로 Todo앱 만들기 12 - APIs","series":"앵귤러로 Todo앱 만들기"}},{"id":"e52f285b-7144-59b3-849b-4112c4f141b3","frontmatter":{"slug":"/lectures/todomvc-angular/13/","date":"2016-06-16T09:00:13.000Z","title":"앵귤러로 Todo앱 만들기 13 - $http로 앵귤러 서비스 개선하기","series":"앵귤러로 Todo앱 만들기"}}]}},"pageContext":{"slug":"/lectures/todomvc-angular/11/","date":"2016-06-14T09:00:11.000Z","series":"앵귤러로 Todo앱 만들기","videoId":null,"previous":{"frontmatter":{"slug":"/lectures/todomvc-angular/10/","date":"2016-06-14T09:00:10.000Z","title":"앵귤러로 Todo앱 만들기 10 - Express.js로 웹서버 만들기","category":"연재물","series":"앵귤러로 Todo앱 만들기","videoId":null}},"next":{"frontmatter":{"slug":"/lectures/todomvc-angular/12/","date":"2016-06-14T09:00:12.000Z","title":"앵귤러로 Todo앱 만들기 12 - APIs","category":"연재물","series":"앵귤러로 Todo앱 만들기","videoId":null}}}},
    "staticQueryHashes": ["3044774879"]}