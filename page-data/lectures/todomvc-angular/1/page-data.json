{
    "componentChunkName": "component---src-templates-blog-post-index-tsx",
    "path": "/lectures/todomvc-angular/1/",
    "result": {"data":{"site":{"siteMetadata":{"title":"김정환 블로그","url":"https://jeonghwan-kim.github.io"}},"markdownRemark":{"id":"422b62fe-3496-5787-a006-65941af39942","html":"<p>지금부터 Angular.js, Node.js를 이용해서 Todo앱을 만들어 보자.\n본 시리즈는 총 20개의 포스트로 구성되어 있고 앵귤러와 노드 초심자를 위한 내용이다.\n하나씩 따라해 보면 어느덧 백엔드 기능을 갖춘 풀스텍 웹 서비스 코드를 작성하는 본인을 발견하게 될 것이다.</p>\n<h2 id=\"노드-설치\" style=\"position:relative;\"><a href=\"#%EB%85%B8%EB%93%9C-%EC%84%A4%EC%B9%98\" aria-label=\"노드 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>노드 설치</h2>\n<p>잠시만!\n왜 노드를 설치해야할까?\n웹서비스를 만들어야 하기 때문이다.\n우문우답 같지 들릴지 모르겠다.\n그러면 간단히 웹서비스의 구조에 대해 알아본뒤 다시 돌아오자.</p>\n<h2 id=\"웹서버의-기능\" style=\"position:relative;\"><a href=\"#%EC%9B%B9%EC%84%9C%EB%B2%84%EC%9D%98-%EA%B8%B0%EB%8A%A5\" aria-label=\"웹서버의 기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹서버의 기능</h2>\n<p>웹서비스는 어딘가에 서버가 있어야 한다.\n브라우져는 웹서비스에 접근하기 위해 url이라고 불리는 주소를 통해 서버에 접속하는 것이다.\n브라우져가 서버에 접속하는 순간 서버는 html, css, javascript 파일 등을 웹 브라우져로 내려주는데\n이것을 보통 정적파일(Static files)이라고 부른다.\n<strong>웹서버의 기능 중 첫번째는 바로 이 정적파일을 내려주는 것이다.</strong></p>\n<p>브라우져는 이런 정적파일들을 파싱하여 웹페이지를 구성한다.\nhtml파일을 읽어 돔(DOM)을 구성한뒤 우리가 눈으로 볼수 있는 문서를 만든다.\n그리고 css 파일을 읽어 웹페이지에 색상을 입히고 크기를 조절한다.\n사용자는 웹페이지의 버튼을 클릭할 수 있는데 이때 정적파일 중 하나인 자바스크립트 파일에서 이벤트 핸들링에 대한 로직을 수행한다.</p>\n<p>웹페이지는 중간중간 서버와 통신한다.\n어떤 경우가 있을까? 만약 로그인 페이지라고 가정해보자.\n로그인 아이디와 비밀번호를 입력하고 \"로그인\" 버튼을 클릭하면 무슨일이 일어날까?</p>\n<p>입력한 정보가 맞는지 확인하는 것이 상식이다.\n그럼 비교할 이 데이터는 어디에 있을까? 바로 서버 어딘가에 데이터베이스 형태로 저장되어 있다.\n서버는 디비의 데이터를 그냥 보여주지 않는다.\n클라이언트와 특정한 형태를 약속하여 보여주는데 보통 json이나 xml 형태로 보내준다.</p>\n<p>보내준다?\njson을 어떻게 보내줄까?\n우리가 흔히 부르는 api 형태로 보내주는데 http 프로토콜을 사용한다.\n십여년 전부터 브라우저에서는 ajax 기술이 보편적으로 사용되었는데 간단히 설명하자면 자바스크립트로 서버에 http 요청 하는 것을 말한다.\n<strong>웹서버의 두번째 기능은 ajax 호출을 위한 api을 제공하는 것이다.</strong></p>\n<p>그럼 다시 노드로 돌아와 보자.</p>\n<blockquote>\n<p>우리는 앵귤러로 개발 하는데 왜 노드를 사용해야 할까?</p>\n</blockquote>\n<p>앵귤러는 자바스크립트로 만들어졌고 우리 컴퓨터에 다운로드 되어 브라우저가 파싱할 대상이다.\n웹서버는 앵귤러 파일을 비롯한 정적파일들을 웹프라우저로 보내줄 것인데 이것이 노드서버의 기능 중 하나이다.\n그리고 다운로드한 앵귤러 파일은 서버로 추가적인 api 요청을 할 것인데 노드는 이 api 기능을 제공할 것이다.\n그래서 우리는 노드드부터 시작하는 것이다.</p>\n<h2 id=\"진짜-노드-설치\" style=\"position:relative;\"><a href=\"#%EC%A7%84%EC%A7%9C-%EB%85%B8%EB%93%9C-%EC%84%A4%EC%B9%98\" aria-label=\"진짜 노드 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>진짜 노드 설치</h2>\n<p>이제 진짜로 노드를 설치해 보자.\n<a href=\"https://nodejs.org\">nodejs.org</a>에 들어가 v4.x.x를 다운받자.\n앞자리 수가 홀수면 개발버전 짝수면 LTS 장기간 지원해주는 버전이다.\n2016년 6월 13일 기준으로 v6.2.1도 나왔다. 조만간 사용해 봐야겠다.\n우리는 v4.4.5를 다운받으면 된다.</p>\n<p>다운받은 파일을 실행하면 설치를 진행한다. 몇번 클릭하면 설치가 완료된다.</p>\n<p>자 이제 터미널을 열어서 노드가 제대로 설치되었는지 확인해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">which</span> <span class=\"token function\">node</span>\n/usr/local/bin/node\n\n$ <span class=\"token function\">which</span> <span class=\"token function\">node</span> --version\nv.4.4.5\n\n$ <span class=\"token function\">node</span>\n<span class=\"token operator\">></span></code></pre></div>\n<p>노드가 설치된 경로와 버전을 확인할 수 있다. 마지막에는 노드 쉘을 실행시킨 결과다.\n노드쉡에서는 자바스크립트 코드를 해석하는 인터프리터로서 코드 결과를 바로바로 확인할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> console.log<span class=\"token punctuation\">(</span><span class=\"token string\">'hello world!'</span><span class=\"token punctuation\">)</span>\nhello world<span class=\"token operator\">!</span>\n\n<span class=\"token operator\">></span> var name <span class=\"token operator\">=</span> <span class=\"token string\">'Chris'</span>\n<span class=\"token operator\">></span> name\n<span class=\"token string\">'Chris'</span>\n<span class=\"token operator\">></span></code></pre></div>\n<p>노드 v4에서 부터는 ES6 문법을 지원한다.\n상수를 정의하는 <code>const</code> 키워드를 테스트 해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> const name <span class=\"token operator\">=</span> <span class=\"token string\">'Chris'</span>\n<span class=\"token operator\">></span> name\n<span class=\"token string\">'Chris'</span>\n<span class=\"token operator\">></span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Mars'</span>\n<span class=\"token string\">'Mars'</span>\n<span class=\"token operator\">></span> name\n<span class=\"token string\">'Chris'</span></code></pre></div>\n<p>name이 상수로 선언되었기 때문에 처음 할당한 값 \"Chris\"가 \"Mars\"로 변경되지 않는다.\n노드는 제대로 설치 된것 같다.</p>\n<h2 id=\"npm\" style=\"position:relative;\"><a href=\"#npm\" aria-label=\"npm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NPM</h2>\n<p>노드를 설치하면 <code>node</code>, <code>npm</code> 두개의 프로그램이 설치된다.\nnode는 자바스크립트 인터프리터로 위에서 설명했다.\nnpm은 Node Package Manager 인데... <a href=\"https://www.npmjs.com\">npmjs.com</a>에서 확인하니 재밌는걸 발견했다.\n홈페이지 좌측상단에 보면 NPM 약자가 랜덤하게 설명되어 있다.</p>\n<p>어쨌든 npm은 노드로 만든 패키지를 관리하는 툴이다.\n노드로 패키지를 만든 패키지를 프로젝트에 추가, 삭제하고 자신이 직접 만들어 배포할 수도 있다.</p>\n<p>우리 프로젝트에서는 1) 패키지를 추가하고 2) 노드 서버를 구동하는 툴로 사용할 것이다.</p>","frontmatter":{"slug":"/lectures/todomvc-angular/1/","date":"2016-06-12T09:00:01.000Z","title":"앵귤러로 Todo앱 만들기 1 - 노드설치","tags":["angularjs","nodejs","lecture"],"seriesId":"series-2016-06-11-angularjs","videoId":null,"featuredImage":null},"tableOfContents":"<ul>\n<li><a href=\"#%EB%85%B8%EB%93%9C-%EC%84%A4%EC%B9%98\">노드 설치</a></li>\n<li><a href=\"#%EC%9B%B9%EC%84%9C%EB%B2%84%EC%9D%98-%EA%B8%B0%EB%8A%A5\">웹서버의 기능</a></li>\n<li><a href=\"#%EC%A7%84%EC%A7%9C-%EB%85%B8%EB%93%9C-%EC%84%A4%EC%B9%98\">진짜 노드 설치</a></li>\n<li><a href=\"#npm\">NPM</a></li>\n</ul>"},"series":{"id":"series-2016-06-11-angularjs","title":"앵귤러로 Todo앱 만들기"},"video":null,"allMarkdownRemark":{"nodes":[{"id":"422b62fe-3496-5787-a006-65941af39942","frontmatter":{"slug":"/lectures/todomvc-angular/1/","date":"2016-06-12T09:00:01.000Z","title":"앵귤러로 Todo앱 만들기 1 - 노드설치","seriesId":"series-2016-06-11-angularjs"}},{"id":"59ca121f-20d7-556e-aa0d-4c26861310dc","frontmatter":{"slug":"/lectures/todomvc-angular/2/","date":"2016-06-12T09:00:02.000Z","title":"앵귤러로 Todo앱 만들기 2 - 앵귤러 로딩","seriesId":"series-2016-06-11-angularjs"}},{"id":"fdff9d7c-98e4-573c-915d-bea8cbd6a632","frontmatter":{"slug":"/lectures/todomvc-angular/3/","date":"2016-06-12T09:00:03.000Z","title":"앵귤러로 Todo앱 만들기 3 - 컨트롤러","seriesId":"series-2016-06-11-angularjs"}},{"id":"b6a06b85-2425-5a8f-b389-3eecb96ea717","frontmatter":{"slug":"/lectures/todomvc-angular/4/","date":"2016-06-12T09:00:04.000Z","title":"앵귤러로 Todo앱 만들기 4 - 투두 목록 출력하기","seriesId":"series-2016-06-11-angularjs"}},{"id":"e405bd22-8ed7-5631-b7de-7780ea11b1a0","frontmatter":{"slug":"/lectures/todomvc-angular/5/","date":"2016-06-12T09:00:05.000Z","title":"앵귤러로 Todo앱 만들기 5 - 새로운 투두 추가하기","seriesId":"series-2016-06-11-angularjs"}},{"id":"9e8e5df2-4e23-5971-9f4c-f45bb672852a","frontmatter":{"slug":"/lectures/todomvc-angular/6/","date":"2016-06-13T09:00:06.000Z","title":"앵귤러로 Todo앱 만들기 6 - Bootstrap으로 꾸미기","seriesId":"series-2016-06-11-angularjs"}},{"id":"8e117c92-1ae2-521f-8a0d-bd1dcb1737ae","frontmatter":{"slug":"/lectures/todomvc-angular/7/","date":"2016-06-13T09:00:07.000Z","title":"앵귤러로 Todo앱 만들기 7 - 투두 목록 필터링","seriesId":"series-2016-06-11-angularjs"}},{"id":"a103addf-58ed-588a-9368-b9b1399b87e2","frontmatter":{"slug":"/lectures/todomvc-angular/8/","date":"2016-06-14T09:00:08.000Z","title":"앵귤러로 Todo앱 만들기 8 - Directive","seriesId":"series-2016-06-11-angularjs"}},{"id":"ed03d961-15ac-555e-bdd8-8b13dec0c59a","frontmatter":{"slug":"/lectures/todomvc-angular/9/","date":"2016-06-14T09:00:09.000Z","title":"앵귤러로 Todo앱 만들기 9 - Service","seriesId":"series-2016-06-11-angularjs"}},{"id":"faa767c3-125e-5124-81fa-6483f6486d27","frontmatter":{"slug":"/lectures/todomvc-angular/10/","date":"2016-06-14T09:00:10.000Z","title":"앵귤러로 Todo앱 만들기 10 - Express.js로 웹서버 만들기","seriesId":"series-2016-06-11-angularjs"}},{"id":"435df555-6df9-5870-943f-74e8d6dee256","frontmatter":{"slug":"/lectures/todomvc-angular/11/","date":"2016-06-14T09:00:11.000Z","title":"앵귤러로 Todo앱 만들기 11 - Static Files","seriesId":"series-2016-06-11-angularjs"}},{"id":"0d733f9b-3d52-54aa-845a-9cb80ca24454","frontmatter":{"slug":"/lectures/todomvc-angular/12/","date":"2016-06-14T09:00:12.000Z","title":"앵귤러로 Todo앱 만들기 12 - APIs","seriesId":"series-2016-06-11-angularjs"}},{"id":"e1f392a8-86ef-519a-8cf9-d4caa652b5f8","frontmatter":{"slug":"/lectures/todomvc-angular/13/","date":"2016-06-16T09:00:13.000Z","title":"앵귤러로 Todo앱 만들기 13 - $http로 앵귤러 서비스 개선하기","seriesId":"series-2016-06-11-angularjs"}}]}},"pageContext":{"slug":"/lectures/todomvc-angular/1/","date":"2016-06-12T09:00:01.000Z","seriesId":"series-2016-06-11-angularjs","videoId":null,"previous":{"frontmatter":{"slug":"/2016/05/17/aws-submit-2016.html","date":"2016-05-17T00:00:00.000Z","title":"AWS Summit 2016 참관 후기","category":"개발","seriesId":null,"videoId":null}},"next":{"frontmatter":{"slug":"/lectures/todomvc-angular/2/","date":"2016-06-12T09:00:02.000Z","title":"앵귤러로 Todo앱 만들기 2 - 앵귤러 로딩","category":"연재물","seriesId":"series-2016-06-11-angularjs","videoId":null}}}},
    "staticQueryHashes": ["3044774879"]}