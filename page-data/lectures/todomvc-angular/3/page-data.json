{
    "componentChunkName": "component---src-templates-blog-post-index-tsx",
    "path": "/lectures/todomvc-angular/3/",
    "result": {"data":{"site":{"siteMetadata":{"title":"김정환 블로그","url":"https://jeonghwan-kim.github.io"}},"markdownRemark":{"id":"a7409d13-ad1e-5005-87c1-be4ae5f77dcf","html":"<p>사실 앵귤러 로딩을 했다고 해서 우리의 코드가 그리고 웹문서에서 달라진 점은 거의 없다.\n자바스크립트 파일 두 개가 더 다운로드 될 뿐이다.\n앵귤러를 사용하려면 <code>ngController</code>라고 하는 앵귤러 디렉티브를 사용해야 한다.</p>\n<p>참, 한가지 알아둘 것.\n앵귤러에서 <code>ngController</code>는 <code>ng-controller</code>와 동일하다.\n<code>ngModel</code>이 <code>ng-model</code>과 같은 것도 동일한 규칙이다.</p>\n<h2 id=\"컨트롤러-정의\" style=\"position:relative;\"><a href=\"#%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC-%EC%A0%95%EC%9D%98\" aria-label=\"컨트롤러 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컨트롤러 정의</h2>\n<p>그럼 컨트롤러 함수를 만들어보자.\njs/controllers/TodomvcController.js 파일을 만들자.</p>\n<p>js/controllers/TodomvcController:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">angular<span class=\"token punctuation\">.</span><span class=\"token function\">module</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"todomvc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">controller</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TodomvcCtrl\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">$scope</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  $scope<span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello world!\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>컨트롤러는 앵귤러에서 제공하는 <code>controller()</code> 함수로 정의한다.\n위 코드는 <code>TodomvcCtrl</code> 컨트롤러를 생성한 것이다.</p>\n<p>그런데 코드 앞부분에 <code>angular.module('todomvc')</code> 을 추가한 것이 눈에 뜨인다.\n이것도 설명하자면 앵귤러는 <code>angular.module()</code> 함수로 앵귤러 모듈을 관리한다.\n<strong>모듈</strong> 이라고 하는 것은 앵귤러에서 제공하는 컨트롤러, 서비스, 디렉티브 등의 개념을 묶은 하나의 패키지라고 생각하면 된다.\n우리는 <code>todomvc</code> 하나의 모듈만 정의하고 사용할 것이다.</p>\n<p>한번 정의한 모듈은 <code>angular.module('todomvc)</code>로 호출할 수 있는데 이 함수의 반환값은 컨트롤러를 정의할 수 있는 <code>controller()</code> 함수를 제공해 준다.\n즉 <code>todomvc</code> 모듈안에 <code>TodomvcCtrl</code> 컨트롤러를 정의하는 것이다.\n이렇게 사용하는 이유는 자바스크립트 전역 공간을 사용하지 않기 위해서다.</p>\n<p>자 그럼 <code>TodomvcCtrl</code> 컨트롤러는 무엇에 쓰는 것인가?\n컨트롤러에서 하나 더 살펴 볼 것이 <code>$scope</code> 변수다.\n컨트롤러를 하나 생성하면 그 안에 <code>$scope</code> 변수가 자동으로 생성된다.\n이것도 앵귤러에서 제공하는 함수이다.\n<strong>컨트롤러</strong> 는 자신의 <code>$scope</code> 변수를 템플릿(여기서는 index.html)과 데이터를 교환할 수 있다.</p>\n<h2 id=\"컨트롤러어-템플릿-연결\" style=\"position:relative;\"><a href=\"#%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC%EC%96%B4-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%97%B0%EA%B2%B0\" aria-label=\"컨트롤러어 템플릿 연결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컨트롤러어 템플릿 연결</h2>\n<p>index.html에 컨트롤러를 주입해 보자.</p>\n<p>index.html:</p>\n<p>{% raw %}</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span> <span class=\"token attr-name\">ng-app</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>todomvc<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">ng-controller</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>TodomvcCtrl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>{{ message }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- \"Hello world!\" --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>{% endraw %}</p>\n<p><img src=\"/assets/imgs/2016/lecture-todomvc-angular-2-result3.png\" alt=\"\"></p>\n<p>컨트롤러의 <code>$scope.message</code> 변수를 우리는 템플릿에서 바로 가져다 사용할 수 있다.\n{% raw %}<code>{{ message }}</code>{% endraw %}는 루비에서도 사용되는 문법인데 인터폴레이션(interpolation) 이라고 부른다.\n템플릿 코드에서 스코프변수를 인터폴레이션 함으로서 컨트롤러 데이터를 출력할 수 있다.\n반대로 템플릿에 연결된 스코프변수는 사용자 입력에 따라 컨트롤러로 데이터를 보내줄 수도 있다.\n나중에 설명할테지만 <code>ngModel</code>을 이용해 그러한 기능을 구현할 것이다.</p>\n<p>우리는 여기까지 해서 템플릿과 컨트롤러에 대해 알아봤다.\n앵귤러에서 제공하는 다양한 기능중 템플릿, 컨트롤러만으로도 기본적인 동작을 하는 todo 앱을 만들수 있다.\n다음 포스트부터는 컨트롤러의 <code>$scope</code> 변수를 이용해 기본적인 todo 앱을 만들어 보자.</p>","frontmatter":{"slug":"/lectures/todomvc-angular/3/","date":"2016-06-12T09:00:03.000Z","title":"앵귤러로 Todo앱 만들기 3 - 컨트롤러","tags":["angularjs","lecture"],"series":"앵귤러로 Todo앱 만들기","videoId":null,"featuredImage":null},"tableOfContents":"<ul>\n<li><a href=\"#%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC-%EC%A0%95%EC%9D%98\">컨트롤러 정의</a></li>\n<li><a href=\"#%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC%EC%96%B4-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%97%B0%EA%B2%B0\">컨트롤러어 템플릿 연결</a></li>\n</ul>","excerpt":"사실 앵귤러 로딩을 했다고 해서 우리의 코드가 그리고 웹문서에서 달라진 점은 거의 없다.\n자바스크립트 파일 두 개가 더 다운로드 될 뿐이다.\n앵귤러를 사용하려면 ngController라고 하는 앵귤러 디렉티브를 사용해야 한다. 참, 한가지 알아둘 것.\n앵귤러에서 ngController는 ng-controller와 동일하다.\nngModel이 ng-model…"},"video":null,"allMarkdownRemark":{"nodes":[{"id":"2e94c765-2c0b-5ba9-87b5-63a1f12eac23","frontmatter":{"slug":"/lectures/todomvc-angular/1/","date":"2016-06-12T09:00:01.000Z","title":"앵귤러로 Todo앱 만들기 1 - 노드설치","series":"앵귤러로 Todo앱 만들기"}},{"id":"4d6947a3-62a3-5075-85c4-496bde227879","frontmatter":{"slug":"/lectures/todomvc-angular/2/","date":"2016-06-12T09:00:02.000Z","title":"앵귤러로 Todo앱 만들기 2 - 앵귤러 로딩","series":"앵귤러로 Todo앱 만들기"}},{"id":"a7409d13-ad1e-5005-87c1-be4ae5f77dcf","frontmatter":{"slug":"/lectures/todomvc-angular/3/","date":"2016-06-12T09:00:03.000Z","title":"앵귤러로 Todo앱 만들기 3 - 컨트롤러","series":"앵귤러로 Todo앱 만들기"}},{"id":"092c9d4b-1d95-55d0-9bd3-bad5d548893b","frontmatter":{"slug":"/lectures/todomvc-angular/4/","date":"2016-06-12T09:00:04.000Z","title":"앵귤러로 Todo앱 만들기 4 - 투두 목록 출력하기","series":"앵귤러로 Todo앱 만들기"}},{"id":"ab832974-daba-5662-a494-2d2cee5ed763","frontmatter":{"slug":"/lectures/todomvc-angular/5/","date":"2016-06-12T09:00:05.000Z","title":"앵귤러로 Todo앱 만들기 5 - 새로운 투두 추가하기","series":"앵귤러로 Todo앱 만들기"}},{"id":"bd6b2bc5-b249-5abc-a636-2cf8012b25a6","frontmatter":{"slug":"/lectures/todomvc-angular/6/","date":"2016-06-13T09:00:06.000Z","title":"앵귤러로 Todo앱 만들기 6 - Bootstrap으로 꾸미기","series":"앵귤러로 Todo앱 만들기"}},{"id":"18eafc33-30a3-58e5-9f97-a4a93bcd175c","frontmatter":{"slug":"/lectures/todomvc-angular/7/","date":"2016-06-13T09:00:07.000Z","title":"앵귤러로 Todo앱 만들기 7 - 투두 목록 필터링","series":"앵귤러로 Todo앱 만들기"}},{"id":"981aa553-69a4-5810-a149-2ffe13bbef98","frontmatter":{"slug":"/lectures/todomvc-angular/8/","date":"2016-06-14T09:00:08.000Z","title":"앵귤러로 Todo앱 만들기 8 - Directive","series":"앵귤러로 Todo앱 만들기"}},{"id":"8ca78d7a-7498-5145-96c8-2ab3bad07f55","frontmatter":{"slug":"/lectures/todomvc-angular/9/","date":"2016-06-14T09:00:09.000Z","title":"앵귤러로 Todo앱 만들기 9 - Service","series":"앵귤러로 Todo앱 만들기"}},{"id":"c692f04e-51db-52f2-aa55-a770249f3549","frontmatter":{"slug":"/lectures/todomvc-angular/10/","date":"2016-06-14T09:00:10.000Z","title":"앵귤러로 Todo앱 만들기 10 - Express.js로 웹서버 만들기","series":"앵귤러로 Todo앱 만들기"}},{"id":"91023013-3318-5a52-808d-bc5981fa3063","frontmatter":{"slug":"/lectures/todomvc-angular/11/","date":"2016-06-14T09:00:11.000Z","title":"앵귤러로 Todo앱 만들기 11 - Static Files","series":"앵귤러로 Todo앱 만들기"}},{"id":"0e4be43c-d245-5f34-a434-5b7f3919f6cb","frontmatter":{"slug":"/lectures/todomvc-angular/12/","date":"2016-06-14T09:00:12.000Z","title":"앵귤러로 Todo앱 만들기 12 - APIs","series":"앵귤러로 Todo앱 만들기"}},{"id":"e52f285b-7144-59b3-849b-4112c4f141b3","frontmatter":{"slug":"/lectures/todomvc-angular/13/","date":"2016-06-16T09:00:13.000Z","title":"앵귤러로 Todo앱 만들기 13 - $http로 앵귤러 서비스 개선하기","series":"앵귤러로 Todo앱 만들기"}}]}},"pageContext":{"slug":"/lectures/todomvc-angular/3/","date":"2016-06-12T09:00:03.000Z","series":"앵귤러로 Todo앱 만들기","videoId":null,"previous":{"frontmatter":{"slug":"/lectures/todomvc-angular/2/","date":"2016-06-12T09:00:02.000Z","title":"앵귤러로 Todo앱 만들기 2 - 앵귤러 로딩","category":"연재물","series":"앵귤러로 Todo앱 만들기","videoId":null}},"next":{"frontmatter":{"slug":"/lectures/todomvc-angular/4/","date":"2016-06-12T09:00:04.000Z","title":"앵귤러로 Todo앱 만들기 4 - 투두 목록 출력하기","category":"연재물","series":"앵귤러로 Todo앱 만들기","videoId":null}}}},
    "staticQueryHashes": ["3044774879"]}