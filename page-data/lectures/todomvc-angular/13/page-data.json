{
    "componentChunkName": "component---src-templates-blog-post-index-tsx",
    "path": "/lectures/todomvc-angular/13/",
    "result": {"data":{"site":{"siteMetadata":{"title":"김정환 블로그","url":"https://jeonghwan-kim.github.io"}},"markdownRemark":{"id":"e52f285b-7144-59b3-849b-4112c4f141b3","excerpt":"이번엔는 서버와 통신하는 앵귤러 서비스 todoStorage를 수정할 차례다.\n지난 포스트에서 언급했듯이 앵귤러 서비스는 백엔드 api와 http 통신하면서 데이터를 주고 받는 역할을 한다.\n그리고 컨트롤러에서는 이 서비스를 이용해 데이터를 가져와 템플릿에 뿌려주는 역할이다. 데이터베…","html":"<p>이번엔는 서버와 통신하는 앵귤러 서비스 <code>todoStorage</code>를 수정할 차례다.\n지난 포스트에서 언급했듯이 앵귤러 서비스는 백엔드 api와 http 통신하면서 데이터를 주고 받는 역할을 한다.\n그리고 컨트롤러에서는 이 서비스를 이용해 데이터를 가져와 템플릿에 뿌려주는 역할이다.</p>\n<p>데이터베이스 -> 벡엔드 api -> 앵귤러 서비스 -> 앵귤러 컨트롤러 -> 앵귤러 템플릿</p>\n<p>각각의 인터페이스를 모두 작성했고 api와 서비스 간의 연결만 구현하면 된다.</p>\n<h2 id=\"http\" style=\"position:relative;\"><a href=\"#http\" aria-label=\"http permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>$http</h2>\n<p>자바스크립트에서는 XMLHttpRequest 객체를 이용해 http 요청을 한다.\n제이쿼리는 $ajax 함수를 이용한다.\n마찬가지로 앵귤러도 ajax를 위한 서비스를 제공하는데 $http와 $resource가 있다.\n이 포스트에서는 기본적인 $http를 이용해 백엔드 api와 통신하는 서비스를 만들어 볼 참이다.\n이후에 $resource를 이용해 좀 더 추상화된 api 통신을 사용하는 것도 도전적인 일이 될 것이다.</p>\n<p>$http의 사용법은 제이쿼리와 유사하다.</p>\n<p>js/services/todomvcStorage.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">angular<span class=\"token punctuation\">.</span><span class=\"token function\">module</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"todomvc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"todomvcStorage\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">$http</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> storage <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    todos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      $http\n        <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/todos\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// GET /api/todos 요청</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n          <span class=\"token keyword\">function</span> <span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 성공</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> angular<span class=\"token punctuation\">.</span><span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> storage<span class=\"token punctuation\">.</span>todos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token keyword\">function</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 실패</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>$http 는 메쏘드에 따라 <code>get()</code>, <code>post()</code>, <code>put()</code>, <code>delete()</code> 함수를 제공한다.\n첫번째 파라메터는 요청 url을 입력한다.\npost와 put함수는 두번째 파라메터로 요청 바디를 추가할 수 있는데 다음과 같은 형시으로 객체를 넘겨준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">$http<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/todos\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> title<span class=\"token operator\">:</span> <span class=\"token string\">\"new todo\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>$http는 기본적으로 프라미스를 지원한다.\n따라서 각 함수를 실행하면 프라미스를 리턴하기 때문에 then 함수를 이용해 결과 처리를 할수 있다.\n<code>then</code>의 첫번째 파라매터는 성공시 함수이고 둘째 파라매터는 실패시 파라메터다.\n우리는 성공시 응답 데이터를 서비스의 <code>todos</code> 변수에 복사했다.\n그리고 서비스의 <code>get()</code> 함수의 파라메터로 넘어온 <code>callback</code> 함수를 실행했다.\nhttp 요청은 비동기 요청이기 때문에 이러한 콜백 구조가 필요하다.</p>\n<p>그럼 이 서비스를 이용하는 컨트롤러를 살짝 변경해 보자.</p>\n<p>js/controllers/TodomvcCtrl.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">angular\n  <span class=\"token punctuation\">.</span><span class=\"token function\">module</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"todomvc\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">controller</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TodomvcCtrl\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">$scope<span class=\"token punctuation\">,</span> todomvcStorage</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 비동기 함수이미로 콜백 함수를 파라매터로 넘겼다.</span>\n    todomvcStorage<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> todos</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n      $scope<span class=\"token punctuation\">.</span>todos <span class=\"token operator\">=</span> todos\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>기존에는 서비스에 있는 데이터를 바로 받았다.\n동기식 코드이기 때문이다.\n그러나 ajax 요청을 하는 서비스는 비동기 로직이므로 콜백함수를 파라매터로 넘겼다.</p>\n<p>보통 콜백함수는 두 개의 파라매터를 사용하도록 구현한다. 첫번째는 에러, 둘째는 성공시 응답이다.\n그래서 콜백 함수 결과를 확인할때 에러를 체크한 뒤 성공 응답을 확인하는 것이 일반적이다.</p>\n<h2 id=\"나머지는-직접-구현해보자\" style=\"position:relative;\"><a href=\"#%EB%82%98%EB%A8%B8%EC%A7%80%EB%8A%94-%EC%A7%81%EC%A0%91-%EA%B5%AC%ED%98%84%ED%95%B4%EB%B3%B4%EC%9E%90\" aria-label=\"나머지는 직접 구현해보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>나머지는 직접 구현해보자</h2>\n<p>전체 코드는 <a href=\"https://github.com/jeonghwan-kim/todomvc-angular\">todomvc-angular</a>를 참고하길 바란다.</p>","fields":{"dateStr":"2016년 06월 16일","date":"2016-06-16T09:00:13.000Z","slug":"/lectures/todomvc-angular/13/"},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 13 - $http로 앵귤러 서비스 개선하기","tags":["angularjs","lecture"],"seriesId":"377d51fb-3cab-5e79-a4e0-8e08a79bbe02","videoId":null,"featured_image":"/assets/imgs/2016/todomvc-logo.png","featuredImage":null},"tableOfContents":"<ul>\n<li><a href=\"#http\">$http</a></li>\n<li><a href=\"#%EB%82%98%EB%A8%B8%EC%A7%80%EB%8A%94-%EC%A7%81%EC%A0%91-%EA%B5%AC%ED%98%84%ED%95%B4%EB%B3%B4%EC%9E%90\">나머지는 직접 구현해보자</a></li>\n</ul>"},"series":{"id":"377d51fb-3cab-5e79-a4e0-8e08a79bbe02","title":"앵귤러로 Todo앱 만들기"},"video":null,"allMarkdownRemark":{"nodes":[{"id":"2e94c765-2c0b-5ba9-87b5-63a1f12eac23","fields":{"slug":"/lectures/todomvc-angular/1/","date":"2016-06-12T09:00:01.000Z"},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 1 - 노드설치","seriesId":"377d51fb-3cab-5e79-a4e0-8e08a79bbe02"}},{"id":"4d6947a3-62a3-5075-85c4-496bde227879","fields":{"slug":"/lectures/todomvc-angular/2/","date":"2016-06-12T09:00:02.000Z"},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 2 - 앵귤러 로딩","seriesId":"377d51fb-3cab-5e79-a4e0-8e08a79bbe02"}},{"id":"a7409d13-ad1e-5005-87c1-be4ae5f77dcf","fields":{"slug":"/lectures/todomvc-angular/3/","date":"2016-06-12T09:00:03.000Z"},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 3 - 컨트롤러","seriesId":"377d51fb-3cab-5e79-a4e0-8e08a79bbe02"}},{"id":"092c9d4b-1d95-55d0-9bd3-bad5d548893b","fields":{"slug":"/lectures/todomvc-angular/4/","date":"2016-06-12T09:00:04.000Z"},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 4 - 투두 목록 출력하기","seriesId":"377d51fb-3cab-5e79-a4e0-8e08a79bbe02"}},{"id":"ab832974-daba-5662-a494-2d2cee5ed763","fields":{"slug":"/lectures/todomvc-angular/5/","date":"2016-06-12T09:00:05.000Z"},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 5 - 새로운 투두 추가하기","seriesId":"377d51fb-3cab-5e79-a4e0-8e08a79bbe02"}},{"id":"bd6b2bc5-b249-5abc-a636-2cf8012b25a6","fields":{"slug":"/lectures/todomvc-angular/6/","date":"2016-06-13T09:00:06.000Z"},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 6 - Bootstrap으로 꾸미기","seriesId":"377d51fb-3cab-5e79-a4e0-8e08a79bbe02"}},{"id":"18eafc33-30a3-58e5-9f97-a4a93bcd175c","fields":{"slug":"/lectures/todomvc-angular/7/","date":"2016-06-13T09:00:07.000Z"},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 7 - 투두 목록 필터링","seriesId":"377d51fb-3cab-5e79-a4e0-8e08a79bbe02"}},{"id":"981aa553-69a4-5810-a149-2ffe13bbef98","fields":{"slug":"/lectures/todomvc-angular/8/","date":"2016-06-14T09:00:08.000Z"},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 8 - Directive","seriesId":"377d51fb-3cab-5e79-a4e0-8e08a79bbe02"}},{"id":"8ca78d7a-7498-5145-96c8-2ab3bad07f55","fields":{"slug":"/lectures/todomvc-angular/9/","date":"2016-06-14T09:00:09.000Z"},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 9 - Service","seriesId":"377d51fb-3cab-5e79-a4e0-8e08a79bbe02"}},{"id":"c692f04e-51db-52f2-aa55-a770249f3549","fields":{"slug":"/lectures/todomvc-angular/10/","date":"2016-06-14T09:00:10.000Z"},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 10 - Express.js로 웹서버 만들기","seriesId":"377d51fb-3cab-5e79-a4e0-8e08a79bbe02"}},{"id":"91023013-3318-5a52-808d-bc5981fa3063","fields":{"slug":"/lectures/todomvc-angular/11/","date":"2016-06-14T09:00:11.000Z"},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 11 - Static Files","seriesId":"377d51fb-3cab-5e79-a4e0-8e08a79bbe02"}},{"id":"0e4be43c-d245-5f34-a434-5b7f3919f6cb","fields":{"slug":"/lectures/todomvc-angular/12/","date":"2016-06-14T09:00:12.000Z"},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 12 - APIs","seriesId":"377d51fb-3cab-5e79-a4e0-8e08a79bbe02"}},{"id":"e52f285b-7144-59b3-849b-4112c4f141b3","fields":{"slug":"/lectures/todomvc-angular/13/","date":"2016-06-16T09:00:13.000Z"},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 13 - $http로 앵귤러 서비스 개선하기","seriesId":"377d51fb-3cab-5e79-a4e0-8e08a79bbe02"}}]}},"pageContext":{"slug":"/lectures/todomvc-angular/13/","date":"2016-06-16T09:00:13.000Z","seriesId":"377d51fb-3cab-5e79-a4e0-8e08a79bbe02","videoId":null,"previous":{"fields":{"slug":"/lectures/todomvc-angular/12/","date":"2016-06-14T09:00:12.000Z","beforeGatsby":true},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 12 - APIs","category":"series","permalink":"/lectures/todomvc-angular/12/","seriesId":"377d51fb-3cab-5e79-a4e0-8e08a79bbe02","videoId":null}},"next":{"fields":{"slug":"/dev/2021/11/17/update-gatsby-from-v2-to-v3.html","date":"2021-11-17T00:00:00.000Z","beforeGatsby":false},"frontmatter":{"title":"블로그의 Gatsby를 v2에서 v3로 업그레이드","category":"dev","permalink":null,"seriesId":null,"videoId":null}}}},
    "staticQueryHashes": ["3044774879"]}