{"componentChunkName":"component---src-pages-category-series-tsx","path":"/category/series/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"excerpt":"이전글 웹팩(기본편)에서는 웹팩의 개념과 간단한 사용법에 대해 살펴보았다.\n웹팩은 프론트엔드 개발 서버를 제공하고, 몇 가지 방법으로 빌드 결과를 최적화 할 수 있는데 이번 글에서 자세히 살펴 보겠다. 1. 웹팩 개발 서버 1.1 배경 지금까지는 브라우져에 파일을 직접 로딩해서 결과물을 확인했다.\n인터넷에 웹사이트를 게시하려면 서버 프로그램으로 이 파일을…","fields":{"slug":"/series/2020/01/02/frontend-dev-env-webpack-intermediate.html","dateStr":"2020년 01월 02일","date":"2020-01-02T00:00:00.000Z"},"frontmatter":{"title":"프론트엔드 개발환경의 이해: 웹팩(심화)"}}},{"node":{"excerpt":"1. 배경 오래된 스웨터의 보푸라기 같은 것을 린트(Lint)라고 부른다.\n보푸라기가 많으면 옷이 보기 좋지 않은데 코드에서도 이런 보프라기가 있다.\n들여쓰기를 맞추지 않은 경우, 선언한 변수를 사용하지 않은 경우...... 보프라기 있는 옷을 입을 수는 있듯이 이러한 코드로 만든 어플리케이션도 동작은 한다.\n그러나 코드의 가독성이 떨어지고 점점 유지보수…","fields":{"slug":"/series/2019/12/30/frontend-dev-env-lint.html","dateStr":"2019년 12월 30일","date":"2019-12-30T00:00:00.000Z"},"frontmatter":{"title":"프론트엔드 개발환경의 이해: 린트"}}},{"node":{"excerpt":"1. 배경 1.1 크로스 브라우징 사용하는 말이 달라서 바벨탑이 실패했듯이, 브라우져마다 사용하는 언어가 달라서 프론트엔트 코드는 일관적이지 못할 때가 많다.\n스팩과 브라우져가 개선되고 있지만, 여전히 인터넷 익스플로러는 프라미스를 이해하지 못한다.\n작년까지만 해도 사파리 최신 브라우져는 Promise.prototype.finally 메소드를 사용할 수 …","fields":{"slug":"/series/2019/12/22/frontend-dev-env-babel.html","dateStr":"2019년 12월 22일","date":"2019-12-22T00:00:00.000Z"},"frontmatter":{"title":"프론트엔드 개발환경의 이해: Babel"}}},{"node":{"excerpt":"1. 배경 먼저 모듈에 대해 이야기 해보자.\n문법 수준에서 모듈을 지원하기 시작한 것은 ES2015부터다.\nimport/export 구문이 없었던 모듈 이전 상황을 살펴보는 것이 웹팩 등장 배경을 설명하는데 수월할 것 같다. 아래 덧셈 함수를 보자. math.js: app.js: 위 코드는 모두 하나의 HTML 파일 안에서 로딩해야만 실행된다.\nmath.…","fields":{"slug":"/series/2019/12/10/frontend-dev-env-webpack-basic.html","dateStr":"2019년 12월 10일","date":"2019-12-10T00:00:00.000Z"},"frontmatter":{"title":"프론트엔드 개발환경의 이해: 웹팩(기본)"}}},{"node":{"excerpt":"몇 년 전부터 프론트엔드 개발자 채용 공고에 Node.js 기술이 우대 사항 항목으로로 추가 되었다.\nNode.js는 백엔드를 구현하는 기술이라고 생각했다면 이 채용 항목이 의문이었을지 모르겠다.\n웹 어플리케이션 개발에 직접적으로 사용하는 것은 아니지만 개발 환경을 이해하고 구성하는데 Node.js를 모르면 언젠가는 한계에 부딪히게 될 것이다. 1. 프론…","fields":{"slug":"/series/2019/12/09/frontend-dev-env-npm.html","dateStr":"2019년 12월 09일","date":"2019-12-09T00:00:00.000Z"},"frontmatter":{"title":"프론트엔드 개발환경의 이해: NPM"}}},{"node":{"excerpt":"구성도 다시보기 지금까지 작성했던 모듈을 그림으로 다시 살펴 보겠습니다.\n 모듈의 성격에 따라 총 4가지 섹션으로 구분합니다. Boostrap 이 섹션은 서버 어플리케이션을 구동하는 bin.js와 어플리케이션인 app.js로 구성됩니다. bin.js은 도메인 주소와 포트 번호를 정해서 어플리케이션에게 전달하는 역할을 합니다.\n이 정보를 이용해 app.js…","fields":{"slug":"/series/2018/12/17/node-web-18_summary.html","dateStr":"2018년 12월 17일","date":"2018-12-17T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 18. 마무리"}}},{"node":{"excerpt":"🌳목표 지금까지 만들었던 웹 어플리케이션을 웹 프레임웍을 이용해서 다시 만들어 봅니다. Express.js로 다시 만들기 먼저 지난 시간까지 작성한 코드로 이동 하겠습니다. 우리가 가장 먼저 만들었던 debug 모듈을 기억하시나요?\n이제는 NPM에서 다운받아 우리가 만든 것과 교체하겠습니다. 그리고 웹 프레임웍인 Express.js도 NPM에서 다운받습니…","fields":{"slug":"/series/2018/12/17/node-web-17_expressjs.html","dateStr":"2018년 12월 17일","date":"2018-12-17T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 17. Express.js"}}},{"node":{"excerpt":"🌳목표 요청 바디 데이터를 처리하는 body-parser를 만듭니다.\n그리고 이것을 이용해 포스트 생성 API 개발을 완료합니다. 스트림 데이터 지난 시간에 POST 메소드를 갖는 엔드포인트를 라우터에 추가했습니다.\n다만 컨트롤러 함수는 비어 있는 채로 남겨 두었는데요.\nreq.body 값을 로그로 출력하는것 까지만 코딩했습니다. 이 데이터는 어떻게 접근…","fields":{"slug":"/series/2018/12/16/node-web-16_body-parser.html","dateStr":"2018년 12월 16일","date":"2018-12-16T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 16. body-parser"}}},{"node":{"excerpt":"🌳목표 메소드 이름으로 라우팅하는 기능을 구현합니다. POST 메소드 요청 화면을 조금 변경했는데요, 브랜치를 이동하고 확인해 볼까요? 서버를 실행하고 브라우져로 접속합니다.  화면 상단에 입력 폼을 만들었습니다. 여기에 포스트 제목과 내용을 입력하고 submit 버튼을 눌러 볼까요?  \"POST /api/posts\" 엔드포인트를 요청하고 있네요.\n지금까…","fields":{"slug":"/series/2018/12/15/node-web-15_get_post.html","dateStr":"2018년 12월 15일","date":"2018-12-15T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 15.라우터 Get, Post"}}},{"node":{"excerpt":"🌳목표 Response 모듈을 만든 것처럼 익스프레스와 유사한 요청 객체인 Request 모듈을 만듭니다. 쿼리스트링 요청 먼저 브랜치를 이동해 볼까요? 서버를 재 구동하고 브라우져로 접속해 보세요.  크롬 개발자 도구로 보니 에러가 나오는데요.\n이전과 다르게 /api/posts 요청에 쿼리문자열이 추가 되었습니다. 그런데 이게 404로 응답되는군요. 분…","fields":{"slug":"/series/2018/12/14/node-web-14_req.html","dateStr":"2018년 12월 14일","date":"2018-12-14T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 14. 요청 객체"}}},{"node":{"excerpt":"🌳목표 익스프레스와 유사한 응답 객체인 Response 모듈을 만듭니다. Response 모듈 앞으로 웹 개발을 할 때 API는 자주 사용 될 것입니다.\n단일 페이지 어플리케이션에서는 거의 모든 데이터를 API 형태로 다루기 때문이죠. 이 때 서버는 JSON 형식으로 데이터를 응답해야 하는데 꽤 자주 사용되는 코드가 될 듯 싶습니다. 뿐만아니라 상태 코드…","fields":{"slug":"/series/2018/12/13/node-web-13_res.html","dateStr":"2018년 12월 13일","date":"2018-12-13T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 13. 응답 객체"}}},{"node":{"excerpt":"🌳목표 이전 시간에 구현한 라우터 기능을 이용해서 API를 하나 만들어 보겠습니다. 어떤 API죠? 먼저 실습을 위한 브랜치로 이동해 볼까요? 서버를 구동하고 브라우져로 접속해보세요.  \"Loading...\" 메세지가 사라지지 않네요.\n뭔가를 로딩하고 있는데 잘 안되는가 봅니다.  크롬 개발자 도구를 확인하면 \"GET /api/posts\" 요청을 보냈는데…","fields":{"slug":"/series/2018/12/12/node-web-12_get-posts-api.html","dateStr":"2018년 12월 12일","date":"2018-12-12T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 12.포스트 조회 API"}}},{"node":{"excerpt":"🌳목표 라우터 기능을 만들어 다양한 경로를 처리할 수 있습니다. 기존 라운팅의 한계 지금까지 우리가 만든 어플리케이션은 정적파일을 제외한 모든 요청을 index 미들웨어가 처리합니다. \"GET /foo\" 로 요청하더라도 index 미들웨어가 동작해서 index.html 파일을 제공하는 것이죠. 아, 물론 에러가 발생하면 다르지만요. 만약 아래와 같이 코딩…","fields":{"slug":"/series/2018/12/11/node-web-11_router-use.html","dateStr":"2018년 12월 11일","date":"2018-12-11T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 11.라우터 use"}}},{"node":{"excerpt":"🌳목표 요청이 오더라도 서버의 터미널에는 아무런 정보도 남아 있지 않습니다.\n이번 시간에는 서버 로그를 기록하는 미들웨어인 logger를 만들어 보겠습니다.\n익스프레스JS 진영의 morgan과 유사한 모듈입니다. 🐤실습 - Logger 미들웨어를 구현해 보세요 매 요청마다 메소드명과 URL을 터미널에 찍어 보세요. 먼저 지난 시간까지 작성한 코드로 이동합…","fields":{"slug":"/series/2018/12/10/node-web-10_logger.html","dateStr":"2018년 12월 10일","date":"2018-12-10T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 10.커스텀 모듈 logger"}}},{"node":{"excerpt":"🌳목표 Middleware 모듈을 활용하여 serve-static의 문제를 해결합니다.\n기존 코드도 미들웨어 형태로 개선합니다. Middleware로 Application.use() 메소드 구현 이전 시간까지 작성한 코드로 체크아웃 하겠습니다. 어플리케이션에서 미들웨어 함수를 등록해야 하는데요 Application.use() 메소드가 그 역할을 하도록 하…","fields":{"slug":"/series/2018/12/09/node-web-9_middleware2.html","dateStr":"2018년 12월 09일","date":"2018-12-09T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 9.미들웨어 활용"}}},{"node":{"excerpt":"🌳목표 미들웨어 패턴을 구현하여 serve-static 모듈의 문제를 해결합니다. 미들웨어 패턴 서버는 요청에서부터 응답까지 하나의 흐름을 가지고 있습니다. 이 요청과 응답 사이에 실행되는 함수 목록을 우리는 \"미들웨어 함수\"라고 하겠습니다. 미들웨어 함수는 본연의 역할을 한 뒤 두 가지 일을 할 수 있습니다. ▲ 요청한 클라이언트에게 응답 하거나 ▲ 다…","fields":{"slug":"/series/2018/12/08/node-web-8_middleware.html","dateStr":"2018년 12월 08일","date":"2018-12-08T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 8.미들웨어"}}},{"node":{"excerpt":"🌳목표 이전 코드를 리팩토링하여 serve-static 모듈을 만듭니다 🐤실습 - serve-static 모듈 구현 이전 시간까지 했던 코드로 브랜치 이동하겠습니다. src/Application.js에 있는 정적파일 다루는 로직을 src/serve-static.js 파일로 분리하세요. 🐤풀이 그럼 같이 풀어 볼까요? src/serve-static.js 파…","fields":{"slug":"/series/2018/12/07/node-web-7_serve-static.html","dateStr":"2018년 12월 07일","date":"2018-12-07T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 7.커스텀 모듈 serve-static"}}},{"node":{"excerpt":"🌳목표 서버에 자원 중에서 브라우져에 다운로드하여 화면을 그리는 파일을 정적파일이라고 합니다.\n이번에 이 기능을 만들어 봅니다. 정적 파일이란? 미리 만들어둔 브랜치로 이동하겠습니다. public 폴더가 보이죠? 이곳에 모든 정적파일을 모아두었습니다. 이 파일을 브라우저에서 요청을 하면 서버에서는 다운로드 할수 있도록 처리해 주어야 합니다. 🐤실습 - 정…","fields":{"slug":"/series/2018/12/06/node-web-6_static-files.html","dateStr":"2018년 12월 06일","date":"2018-12-06T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 6.정적 파일"}}},{"node":{"excerpt":"🌳목표 노드에서 꽤 많이 사용되는 debug 모듈을 직접 만들어 봅니다. Debug를 사용하는 이유 Debug 모듈은 노드에서 가장 많이 사용하는 디버깅 모듈입니다.\n로그를 구조적으로 기록할 수 있다는 점에서 console.log 보다 뛰어납니다.\nDebug가 갖고 있는 장점은 아래 두 가지입니다. 태그를 지정한 로그 함수를 만들 수 있다 태그별로 색상을…","fields":{"slug":"/series/2018/12/05/node-web-5_debug.html","dateStr":"2018년 12월 05일","date":"2018-12-05T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 5.커스텀 모듈 Debug"}}},{"node":{"excerpt":"🌳목표 우리가 만들었던 server.js는 http 모듈을 직접 가져다 사용한 것입니다.\n모듈의 createServer() 함수와 listen() 함수를 직접 사용했죠. 외부 모듈 혹은 라이브러리 따위를 사용할 때는 한 번 래핑해서 사용하는 것이 좋습니다.\n우리 코드가 라이브러리와 강하게 커플링 되지 않도록 하는것이죠.\n한 단계 버퍼를 둬서 외부 코드의 …","fields":{"slug":"/series/2018/12/04/node-web-4_application.html","dateStr":"2018년 12월 04일","date":"2018-12-04T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 4.어플리케이션"}}},{"node":{"excerpt":"🌳목표 코드를 유연하고 읽기 쉽게 개선하는 것을 \"리팩토링 한다\"라고 말하는데요,\n이번 글에서는 이전에 작성한 헬로월드 코드를 리팩토링 해 보겠습니다. server.js 파일에 작성한 코드는 두 가지 일을 하고 있습니다. 서버 생성 -  서버 구동 -  🐤실습 - 역할에 따라 파일을 분리해 보세요 위에서 나눈 두 가지 역할에 따라 파일을 분리해 보세요. …","fields":{"slug":"/series/2018/12/03/node-web-3_refactoring.html","dateStr":"2018년 12월 03일","date":"2018-12-03T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 3.리팩토링"}}},{"node":{"excerpt":"🌳목표 노드의 기본 모듈 중 네트웍 기능을 제공하는 http 모듈을 알아 봅니다.\n헬로월드 코드로 http모듈을 이용한 서버 어플레케이션을 만드는 것이 목표입니다. 왜 http 모듈부터 시작하나요? 우리는 웹 어플리케이션을 만들어 볼겁니다. 웹 서버를 만들기 위해서는 꽤 많은 네트웍 지식을 알고 있어야 합니다. 가령 tcp, listen, 3way han…","fields":{"slug":"/series/2018/12/02/node-web-2_http.html","dateStr":"2018년 12월 02일","date":"2018-12-02T00:00:00.000Z"},"frontmatter":{"title":"[Node.js코드랩] 2.기본 모듈 http"}}},{"node":{"excerpt":"🌳목표 이론적인 내용보다는 코드를 직접 따라하는 내용이 많습니다.\n중간에 실습 문제가 있어서 여러분이 직접 코딩하는 순서도 있구요.\n이런 환경을 갖추기 위한 실습 세팅 작업부터 시작하겠습니다. 프로젝트 생성 모든 코드는 깃헙 저장소에 올려 두었습니다.\n이 코드를 여러분 컴퓨터에 복사해서 가져 옵니다. 진행 순서에 따라 브랜치를 여러개 만들어 두었는데요, …","fields":{"slug":"/series/2018/12/01/node-web-1_orientation.html","dateStr":"2018년 12월 01일","date":"2018-12-01T00:00:00.000Z"},"frontmatter":{"title":"[Node.js 코드랩] 1.오리엔테이션"}}},{"node":{"excerpt":"소개 익스프레스JS(Express.js)는 노드에서 가장 많이 사용하는 웹 프레임웍 입니다. 이것을 이용해서 API 서버나 웹 서비스를 만드는 강의는 몇 번 진행했는데요.\n라이브러리나 프레임웍 도움 없이 직접 웹 서버를 만들어 본다면 웹 기술을 더 본질적으로 이해할 수 있지 않을까 생각합니다. 며칠 전 진행한 코드랩 \"노드JS를 이용한 웹 어플리케이션 이…","fields":{"slug":"/series/2018/12/01/node-web-0_index.html","dateStr":"2018년 12월 01일","date":"2018-12-01T00:00:00.000Z"},"frontmatter":{"title":"🌳[Node.js 코드랩] 소개 및 목차"}}},{"node":{"excerpt":"이제 인증 기능을 만들어 보자. 쿠키, 세션, 로그인 순서로 진행하면 되겠다. 쿠키 먼저 쿠키부터 시작하자.\n문서에 노드의 쿠키설정 방법을 찾았다.  헤더를 설정해 주면 되는군. 익스프레스에서는 헤더에 쿠키를 설정하기 위해 응답객체 메소드로 형태로 req.cookie() 함수를 제공한다. 그럼 내가 만든 response.js에도 란 이름으로 함수를 추가하…","fields":{"slug":"/2017/10/21/diy-express-day4.html","dateStr":"2017년 10월 21일","date":"2017-10-21T00:00:00.000Z"},"frontmatter":{"title":"익스프레스 만들기 Day 4"}}},{"node":{"excerpt":"지금까지 만든 페이지가 포스트 조회, 생성임. 편집까지 만들어보자.\n아니, 귀찮으니깐 삭제 기능부터 만들자. 삭제 기능 구현 조회 페이지의 각 포스트 하단에 삭제 버튼을 만들고 버튼을 클릭할때 호출할\n API를 만들면 되겠다.\napplication에 delete 메쏘드 기능도 추가하자. (현제는 post, get까지 구현된 상황임) 자바스크립트에서 는 예…","fields":{"slug":"/2017/10/06/diy-express-day3.html","dateStr":"2017년 10월 06일","date":"2017-10-06T00:00:00.000Z"},"frontmatter":{"title":"익스프레스 만들기 Day 3"}}},{"node":{"excerpt":"미들웨어 구조를 만들고 났으니 기능을 추가하는 것 좀더 쉬울것 같다.\n우선은 테스트 코드부터 정리하자. 기능만 우선 만들어 본다고 제대로 못했다. ... 오케이 supertest 위주로 완료. 로거 요청 정보를 터미널에 찍어보자. 메소드, 주소 정도만 찍어도 좋겠다.\n익스프레스의 morgan 이랑 비슷한 녀석이다.\n미들웨어 형식에 맞게 작성하면 되겠다. …","fields":{"slug":"/2017/10/05/diy-express-day2.html","dateStr":"2017년 10월 05일","date":"2017-10-05T00:00:00.000Z"},"frontmatter":{"title":"익스프레스 만들기 Day 2"}}},{"node":{"excerpt":"이번 추석만 기다리고 있었다. 어느때 보다 긴 연휴라서 그리고 혼자있는 시간이 생겨서 집중해서 해보고 싶은\n일이 있었다. 프레임웍을 사용하지 않고 웹 어플리케이션을 개발하는 것.\n만들게 되면 아마도 노드 익스프레스와 비슷한 구조일 것 같다. 헬로 월드부터 시작하자 서버 어플리케이션이니깐 app.js에다 헬로 월드 코드부터 만들자. app.js: 음... …","fields":{"slug":"/2017/10/03/diy-express-day1.html","dateStr":"2017년 10월 03일","date":"2017-10-03T00:00:00.000Z"},"frontmatter":{"title":"익스프레스 만들기 Day 1"}}},{"node":{"excerpt":"이전글: (함수형JS) 순수성, 불변성, 변경정책 앞서 설명한 순수성, 불변성, 변화 제어가 함수 조립에서 어떤 역할을 하는지 알아봤다. 이러한 특징을 이용해 함수를 더 자유롭게 조립하는 방법을 이번 글에서 살펴보겠다. curry-banner 체이닝 아래와 같은 함수 체이닝 기법은 코드를 매우 간결하고 읽기 쉽게 만든다. 사람 객체를 만들어 이름과 나이를…","fields":{"slug":"/js/2017/05/11/pipeline.html","dateStr":"2017년 05월 11일","date":"2017-05-11T00:00:00.000Z"},"frontmatter":{"title":"흐름 기반 프로그래밍"}}},{"node":{"excerpt":"이전글: (함수형JS) 함수로 함수 만들기3 부분적용 앞서 함수로 함수를 조립할 수 있는 방법을 살펴보았다. 함수 조합 기법 뿐만 아니라 프로그램 개발의 복잡성을 줄이는 것이 함수형 프로그래밍이 추구하는 바다. 이번 글에서는 상태변화를 최소화할 수 있는 기법에 대해 알아보겠다. Purity-Immutability-and-Policies-for-Change…","fields":{"slug":"/js/2017/04/23/Purity-Immutability-and-Policies-for-Change.html","dateStr":"2017년 04월 23일","date":"2017-04-23T00:00:00.000Z"},"frontmatter":{"title":"순수성, 불변성, 변경정책"}}},{"node":{"excerpt":"이전글: (함수형JS) 함수로 함수 만들기2 커링 partial-application-banner 커링을 충분히 이해했다면( (함수형JS) 함수로 함수 만들기2 커링 ) 부분적용은 쉽게 접근할 수 있다. 커링이 하나의 인자만 받는 함수열을 만드는 것이었다면, 부분적용은 여러개 인자를 미리 고정하고 나머지 인자만 받는 함수 하나를 반환한다. 여러번 함수를 …","fields":{"slug":"/js/2017/04/21/partial-application.html","dateStr":"2017년 04월 21일","date":"2017-04-21T00:00:00.000Z"},"frontmatter":{"title":"함수로 함수 만들기3 부분적용"}}},{"node":{"excerpt":"이전글: (함수형JS) 함수로 함수 만들기1 다형성 curry-banner 왜 커링을 사용하는가? 이 글에서는 함수로 함수 만들기 두 번째 시간으로 커링(currying) 에 대해 알아보겠다. 커링이란 다중인자를 받는 함수를 단일 인자 함수열로 만드는 것을 말한다( 커링 - 위키백과, 우리 모두의 백과사전). 커링의 정의에 대해서는 잠시 잊어 버려도 좋다…","fields":{"slug":"/js/2017/04/17/curry.html","dateStr":"2017년 04월 17일","date":"2017-04-17T00:00:00.000Z"},"frontmatter":{"title":"함수로 함수 만들기2 커링"}}},{"node":{"excerpt":"이전글: (함수형JS) 고차 함수 ploymophism 지난 글에서 고차함수를 다뤘다. 함수를 받고 다른 함수를 반환하는 고차함수를 이용하면 자바스크립트에서 다형성(polymorphism)을 구현할 수 있다. 다형성이란 타입이 다른 자료형이 하나의 상위 자료형으로 속하게 되는 개념인데 OOP를 지원하는 언어에서 많이 사용한다. 이번 글은 고차함수를 이용해…","fields":{"slug":"/js/2017/04/10/function-by-function.html","dateStr":"2017년 04월 10일","date":"2017-04-10T00:00:00.000Z"},"frontmatter":{"title":"함수로 함수 만들기1 다형성"}}},{"node":{"excerpt":"high-order-function 함수형 프로그래밍을 설명하기에 앞서 프로그래밍에서는 일급 객체(First-class citizens)라는 개념이 있다. 일급 객체는 다음 아래와 같은 특성을 가지고 있다. (참고: 일급 객체 - 위키백과, 우리 모두의 백과사전) 변수 혹은 데이터 구조에 담을 수 있다 파라매터로 전달할 수 있다. 반환값으로 사용할 수 있…","fields":{"slug":"/js/2017/04/03/high-order-function-in-javascript.html","dateStr":"2017년 04월 03일","date":"2017-04-03T00:00:00.000Z"},"frontmatter":{"title":"고차 함수"}}},{"node":{"excerpt":"이번엔는 서버와 통신하는 앵귤러 서비스 를 수정할 차례다.\n지난 포스트에서 언급했듯이 앵귤러 서비스는 백엔드 api와 http 통신하면서 데이터를 주고 받는 역할을 한다.\n그리고 컨트롤러에서는 이 서비스를 이용해 데이터를 가져와 템플릿에 뿌려주는 역할이다. 데이터베이스 -> 벡엔드 api -> 앵귤러 서비스 -> 앵귤러 컨트롤러 -> 앵귤러 템플릿 각각의…","fields":{"slug":"/lectures/todomvc-angular/13/","dateStr":"2016년 06월 16일","date":"2016-06-16T09:00:13.000Z"},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 13 - $http로 앵귤러 서비스 개선하기"}}},{"node":{"excerpt":"이번엔 서버의 두 번째 기능 API를 만들어 보자. API는 왜 만들어야할까?\n클라이언트와 통신하기 위해서다.\n그럼 무슨 목적으로 클라이언트와 서버는 통신을 하는가?\n데이터다.\n일반적으로 데이터는 서버에서 관리한다.\n서버에 데이터베이스를 운영한다던지 써드파티 API를 이용해 데이터를 서버로 가져온다던지...\n결국은 클라이언트 입장에서 데이터 관리는 서버에…","fields":{"slug":"/lectures/todomvc-angular/12/","dateStr":"2016년 06월 14일","date":"2016-06-14T09:00:12.000Z"},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 12 - APIs"}}},{"node":{"excerpt":"사실 우리 싸이트의 홈페이지로 접속하면 angular로 만들었던 index.html 페이지가 로딩되는 것이 자연스럽니다.\n결국은 서버에 있는 프론트엔드 코드들이 브라우져로 다운로드 되어야 하는데\n이러한 파일들을 우리는 정적파일(Static Files) 이라고 부르고 express.js는 그러한 기능을 제공한다. static file 설정하기 express…","fields":{"slug":"/lectures/todomvc-angular/11/","dateStr":"2016년 06월 14일","date":"2016-06-14T09:00:11.000Z"},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 11 - Static Files"}}},{"node":{"excerpt":"이제부터 서버를 만들어 보자.\n서버 기능은 두 가지라고 앞서 얘기했다. (참고: 앵귤러로 Todo앱 만들기 1 - 노드 설치노드 설치) 정적파일 호스팅 API 기능 이것을 쉽게 구현할수 있는 것이 Express.js라고 하는 웹프레임워크다.\nnpm으로 익스프레스 엔진을 프로젝트에 추가해보자. package.json에 express 모듈이 추가 되었을 것이…","fields":{"slug":"/lectures/todomvc-angular/10/","dateStr":"2016년 06월 14일","date":"2016-06-14T09:00:10.000Z"},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 10 - Express.js로 웹서버 만들기"}}},{"node":{"excerpt":"다른 것도 디렉티브로 만들어 봤는지 모르겠다.\n웬만하면 직접 해보는 것이 유익하다. 이번에는 컨트롤러를 쪼개 보자.\n컨트롤러 스코프 변수에는  변수가 있는데 이것은 투두 목록을 담고 있는 것이다.\n그리고 ,  같은 것들은 투두 목록을 삭제하거나 사용자가 입력한 데이터를 투두 목록에 추가할수 있다.\n자세히 보면 컨트롤러에는 두 종류의 기능이 섞여있다. 사용…","fields":{"slug":"/lectures/todomvc-angular/9/","dateStr":"2016년 06월 14일","date":"2016-06-14T09:00:09.000Z"},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 9 - Service"}}},{"node":{"excerpt":"이전 포스트까지 해서 프론트에서 사용할 기능은 대부분 완성했다.\n그러고 보니 파일이 좀 길어진것 같다.\n앵귤러의 많은 기능 중 템플릿과 컨트롤러만 사용했기 때문에 그렇다.\n앵귤러의 장점 중 하나는 모듈화다.\n모놀리틱한 구조를 더 작은 단위로 모듈화시켜서 설계할 수 있는데 앵귤러는 그러한 구조를 만들 수 있는 기능을 제공한다.\n우리가 사용할 기능은 디렉티브…","fields":{"slug":"/lectures/todomvc-angular/8/","dateStr":"2016년 06월 14일","date":"2016-06-14T09:00:08.000Z"},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 8 - Directive"}}},{"node":{"excerpt":"우리가 ngRepeat 디렉티브를 이용해 todos 배열 데이터를 출력해 봤다.\n이번에는 출력된 리스트를 필터링해 보겠다. 필터링할 수 있는 기준은 아래와 같다. completed: 완료된 투두 리스트 active: 미완료된 투두 리스트 all: 모든 투두 리스트 ngRepeat는 기본적으로 필터기능을 지원한다.\n완료된 투두 리스트만 필터링 한다고 하면 …","fields":{"slug":"/lectures/todomvc-angular/7/","dateStr":"2016년 06월 13일","date":"2016-06-13T09:00:07.000Z"},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 7 - 투두 목록 필터링"}}},{"node":{"excerpt":"여기서 잠깐.\n이왕이면 좀더 이쁘게 만들어 보자.\n가장 많이 사용하는 스타일시트 중 트위터 부트스트랩을 이용할 작성이다.\n이전 포스트에서 앵귤러 라이브러리를 추가했던 과정이 기억나는가?\n그렇다. NPM을 이용해서 라이브러리를 추가 했다. 부스스트랩을 우리가 만든 index.html에 추가한다. index.html: 추가만 했어도 기존 화면에 변화가 있을 …","fields":{"slug":"/lectures/todomvc-angular/6/","dateStr":"2016년 06월 13일","date":"2016-06-13T09:00:06.000Z"},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 6 - Bootstrap으로 꾸미기"}}},{"node":{"excerpt":"이번에는  디렉티브를 이용해 투두를 추가하는 방법에 대해 알아보자. 템플릿 작성 입력을 위해 텍스트 입력 필드와 추가 버튼을 만들자.\n입력필드는 마찬가지로  디렉티브로 양방향 데이터 바인딩을 설정했다.\n\n컨트롤러에서는 를 통해 데이터를 확인할수 있다. 버튼이 좀 눈여겨 볼만한다.\n\n이전에 사용했던 을 이용해 이벤트 핸들러를 걸어야 할것 같지만 그러지 않았…","fields":{"slug":"/lectures/todomvc-angular/5/","dateStr":"2016년 06월 12일","date":"2016-06-12T09:00:05.000Z"},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 5 - 새로운 투두 추가하기"}}},{"node":{"excerpt":"컨트롤러에 배열 데이터 만들기 우선 데이터가 있다고 가정하자.\n우리 프로젝트에서 데이터는 투두 목록이다.\n하나의 두투는 아이디(id), 타이틀(title), 그리고 완료여부(completed)를 데이터로 가질 수 있고\n컨트롤러에서 아래와 같이 표현할 수 있다. js/controllers/TodomvcCtrl.js: 스코프변수에 할당된 todos 배열을 템…","fields":{"slug":"/lectures/todomvc-angular/4/","dateStr":"2016년 06월 12일","date":"2016-06-12T09:00:04.000Z"},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 4 - 투두 목록 출력하기"}}},{"node":{"excerpt":"사실 앵귤러 로딩을 했다고 해서 우리의 코드가 그리고 웹문서에서 달라진 점은 거의 없다.\n자바스크립트 파일 두 개가 더 다운로드 될 뿐이다.\n앵귤러를 사용하려면 라고 하는 앵귤러 디렉티브를 사용해야 한다. 참, 한가지 알아둘 것.\n앵귤러에서 는 와 동일하다.\n이 과 같은 것도 동일한 규칙이다. 컨트롤러 정의 그럼 컨트롤러 함수를 만들어보자.\njs/cont…","fields":{"slug":"/lectures/todomvc-angular/3/","dateStr":"2016년 06월 12일","date":"2016-06-12T09:00:03.000Z"},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 3 - 컨트롤러"}}},{"node":{"excerpt":"index.html 기본 html 파일부터 작성해 보자. index.html: 모바일에서 잘보이도록 하기위해 뷰포트를 설정하고 타이틀만 있는 간단한 문서다.\n브라우져로 열어보면 브라우저 탭에 타이트만 출력된다.  우리는 이 파일에 앵귤러 라이브러리를 로딩할 것이다.\n그런데 앵귤러를 로딩한다는 것은 뭘까?\n제이쿼리 스크립트를 html 페이지에서  태그로 삽…","fields":{"slug":"/lectures/todomvc-angular/2/","dateStr":"2016년 06월 12일","date":"2016-06-12T09:00:02.000Z"},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 2 - 앵귤러 로딩"}}},{"node":{"excerpt":"지금부터 Angular.js, Node.js를 이용해서 Todo앱을 만들어 보자.\n본 시리즈는 총 20개의 포스트로 구성되어 있고 앵귤러와 노드 초심자를 위한 내용이다.\n하나씩 따라해 보면 어느덧 백엔드 기능을 갖춘 풀스텍 웹 서비스 코드를 작성하는 본인을 발견하게 될 것이다. 노드 설치 잠시만!\n왜 노드를 설치해야할까?\n웹서비스를 만들어야 하기 때문이다…","fields":{"slug":"/lectures/todomvc-angular/1/","dateStr":"2016년 06월 12일","date":"2016-06-12T09:00:01.000Z"},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 1 - 노드설치"}}},{"node":{"excerpt":"Hapi 프레임웍을 이용해 Api 서버를 구현할 때 필요한 최소한의 기능은 이렇다. 예를들어 /users 라우팅시 아래와 같은 폴더 구조로 만들 수 있다. 이외에 데이터베이스 연결 모듈, 로깅 모듈 등 라우팅 이외의 모듈을 components 폴더에 위치한다. 지금까지 작성한 모듈을 정리하면 아래와 같다. DAO 본 글에서 새로 추가할 부분이 DAO 폴더…","fields":{"slug":"/hapi-api-server-scaffold/","dateStr":"2015년 02월 22일","date":"2015-02-22T12:00:26.000Z"},"frontmatter":{"title":"Hapi Api 서버 스캐폴드"}}},{"node":{"excerpt":"프론트도 마찬가지지만 백엔드 서버를 개발할수록 테스트가 중요성을 실감한다.\n서비스는 서버 혼자서 동작하는 것이 아니라 모바일, 웹 브라우져 등의 클라이언트와 함께 동작해야 하기 때문에 다양한 시나리오에 대응할 수 있어야 한다.\n또한 한 번 발생한 버그는 재발하지 않는다는 것을 보장해야 마음 놓고 코드를 수정할 수 있다.\n때문에 테스트 뿐만 아니라 테스트 …","fields":{"slug":"/hapi-test/","dateStr":"2015년 02월 19일","date":"2015-02-19T18:50:23.000Z"},"frontmatter":{"title":"Hapi 테스트 코드"}}},{"node":{"excerpt":"이번에는 Hapi Api 서버의 인증 기능을 구현해 보자. hapi-auth-cookie 모듈을 이용하여 세션 쿠키를 이용하여 인증을 구현할 것이다. 인증 정보를 세션에 저장하고 클라이언트와는 쿠키를 통해 인증상태를 통신하도록 구현한다. 세션 인증 활성화 Hapi에는 서버객체의 register() 함수를 통해 플러그인을 등록할 수 있다. Hapi에서의 플…","fields":{"slug":"/hapi-auth/","dateStr":"2015년 02월 18일","date":"2015-02-18T20:41:16.000Z"},"frontmatter":{"title":"Hapi 인증"}}},{"node":{"excerpt":"익스프레스에 winton 로깅 모듈이 있듯이 Hapi에서는 Good이라는 좋은 로깅 모듈이 있다. 이번 글에서는 Hapi 프레임웍에서의 로깅 방법에 대해 알아보자. Good 모듈로 로깅시 리포터 모듈을 함께 추가해야한다. Good 모듈은 hapi 프레임웍에서 내뿜는 이벤트를 감지하는 역할을 하는 것 같다. 실제 출력(콘솔이나 파일 등)은 리포터 모듈을 통…","fields":{"slug":"/hapi-logging-good/","dateStr":"2015년 02월 16일","date":"2015-02-16T10:23:33.000Z"},"frontmatter":{"title":"Hapi 로깅, Good"}}},{"node":{"excerpt":"지난 포스트에서 Hapi 프레임웍을 이용한 라우팅을 구현하였고 파라메터를 얻는 방법을 잠깐 언급하였다. REST Api에서 파라메터를 입력받는 것은 비지니스 로직을 처리하기 위한 첫 단계다. 파라메터를 제대로 검증하는 것이 로직 구현에 있어 안정적이다. 익스프레스 모듈을 사용할 때는 별도로 파라메터 검증 모듈을 만들어서 사용했다. 실제 익스프레스용 검증 …","fields":{"slug":"/hapijs-joi/","dateStr":"2015년 02월 14일","date":"2015-02-14T17:43:54.000Z"},"frontmatter":{"title":"Hapi 파라매터 검증, Joi"}}},{"node":{"excerpt":"Node.js에서 서버 구현은 대부분 Express.js 프레임웍으로 개발했다. Express.js 3.x에서 4.x대로 업그레이드 되면서 개선된 성능과 사용 편의성에서 만족하고 있었다. 이제 막 익스프레스 프레임웍이 손에 익을 무렵 Hapi라는 신규 노드 페레임웍에 대한 글을 접한게 되었다. (Hapi.js로 Node.js를 시작하세요. - 1부 Why…","fields":{"slug":"/start-with-hapi/","dateStr":"2015년 02월 14일","date":"2015-02-14T16:15:06.000Z"},"frontmatter":{"title":"Hapi 시작하기"}}}]}},"pageContext":{}},"staticQueryHashes":["1591182808"]}