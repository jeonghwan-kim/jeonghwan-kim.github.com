{"componentChunkName":"component---src-pages-category-series-tsx","path":"/category/series/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"excerpt":"이전글 웹팩(기본편)에서는 웹팩의 개념과 간단한 사용법에 대해 살펴보았다.\n웹팩은 프론트엔드 개발 서버를 제공하고, 몇 가지 방법으로 빌드 결과를 최적화 할 수 있는데 이번 글에서 자세히 살펴 보겠다. 1. 웹팩 개발 서버 1.…","fields":{"slug":"/series/2020/01/02/frontend-dev-env-webpack-intermediate.html","date":"2020년 01월 02일"},"frontmatter":{"title":"프론트엔드 개발환경의 이해: 웹팩(심화)"}}},{"node":{"excerpt":"1. 배경 오래된 스웨터의 보푸라기 같은 것을 린트(Lint…","fields":{"slug":"/series/2019/12/30/frontend-dev-env-lint.html","date":"2019년 12월 30일"},"frontmatter":{"title":"프론트엔드 개발환경의 이해: 린트"}}},{"node":{"excerpt":"1. 배경 1.…","fields":{"slug":"/series/2019/12/22/frontend-dev-env-babel.html","date":"2019년 12월 22일"},"frontmatter":{"title":"프론트엔드 개발환경의 이해: Babel"}}},{"node":{"excerpt":"1. 배경 먼저 모듈에 대해 이야기 해보자.\n문법 수준에서 모듈을 지원하기 시작한 것은 ES2015부터다.\nimport/export…","fields":{"slug":"/series/2019/12/10/frontend-dev-env-webpack-basic.html","date":"2019년 12월 10일"},"frontmatter":{"title":"프론트엔드 개발환경의 이해: 웹팩(기본)"}}},{"node":{"excerpt":"몇 년 전부터 프론트엔드 개발자 채용 공고에 Node.js 기술이 우대 사항 항목으로로 추가 되었다.\nNode.js…","fields":{"slug":"/series/2019/12/09/frontend-dev-env-npm.html","date":"2019년 12월 09일"},"frontmatter":{"title":"프론트엔드 개발환경의 이해: NPM"}}},{"node":{"excerpt":"🌳목표 지금까지 만들었던 웹 어플리케이션을 웹 프레임웍을 이용해서 다시 만들어 봅니다. Express.js로 다시 만들기 먼저 지난 시간까지 작성한 코드로 이동 하겠습니다. 우리가 가장 먼저 만들었던 debug 모듈을 기억하시나요?\n이제는 NPM…","fields":{"slug":"/series/2018/12/17/node-web-17_expressjs.html","date":"2018년 12월 17일"},"frontmatter":{"title":"[Node.js코드랩] 17. Express.js"}}},{"node":{"excerpt":"구성도 다시보기 지금까지 작성했던 모듈을 그림으로 다시 살펴 보겠습니다.\n 모듈의 성격에 따라 총 4가지 섹션으로 구분합니다. Boostrap 이 섹션은 서버 어플리케이션을 구동하는 bin.js와 어플리케이션인 app.js로 구성됩니다. bin.js…","fields":{"slug":"/series/2018/12/17/node-web-18_summary.html","date":"2018년 12월 17일"},"frontmatter":{"title":"[Node.js코드랩] 18. 마무리"}}},{"node":{"excerpt":"🌳목표 요청 바디 데이터를 처리하는 body-parser를 만듭니다.\n그리고 이것을 이용해 포스트 생성 API 개발을 완료합니다. 스트림 데이터 지난 시간에 POST…","fields":{"slug":"/series/2018/12/16/node-web-16_body-parser.html","date":"2018년 12월 16일"},"frontmatter":{"title":"[Node.js코드랩] 16. body-parser"}}},{"node":{"excerpt":"🌳목표 메소드 이름으로 라우팅하는 기능을 구현합니다. POST…","fields":{"slug":"/series/2018/12/15/node-web-15_get_post.html","date":"2018년 12월 15일"},"frontmatter":{"title":"[Node.js코드랩] 15.라우터 Get, Post"}}},{"node":{"excerpt":"🌳목표 Response 모듈을 만든 것처럼 익스프레스와 유사한 요청 객체인 Request…","fields":{"slug":"/series/2018/12/14/node-web-14_req.html","date":"2018년 12월 14일"},"frontmatter":{"title":"[Node.js코드랩] 14. 요청 객체"}}},{"node":{"excerpt":"🌳목표 익스프레스와 유사한 응답 객체인 Response 모듈을 만듭니다. Response 모듈 앞으로 웹 개발을 할 때 API는 자주 사용 될 것입니다.\n단일 페이지 어플리케이션에서는 거의 모든 데이터를 API…","fields":{"slug":"/series/2018/12/13/node-web-13_res.html","date":"2018년 12월 13일"},"frontmatter":{"title":"[Node.js코드랩] 13. 응답 객체"}}},{"node":{"excerpt":"🌳목표 이전 시간에 구현한 라우터 기능을 이용해서 API를 하나 만들어 보겠습니다. 어떤 API죠? 먼저 실습을 위한 브랜치로 이동해 볼까요? 서버를 구동하고 브라우져로 접속해보세요.  \"Loading…","fields":{"slug":"/series/2018/12/12/node-web-12_get-posts-api.html","date":"2018년 12월 12일"},"frontmatter":{"title":"[Node.js코드랩] 12.포스트 조회 API"}}},{"node":{"excerpt":"🌳목표 라우터 기능을 만들어 다양한 경로를 처리할 수 있습니다. 기존 라운팅의 한계 지금까지 우리가 만든 어플리케이션은 정적파일을 제외한 모든 요청을 index 미들웨어가 처리합니다. \"GET /foo\" 로 요청하더라도 index…","fields":{"slug":"/series/2018/12/11/node-web-11_router-use.html","date":"2018년 12월 11일"},"frontmatter":{"title":"[Node.js코드랩] 11.라우터 use"}}},{"node":{"excerpt":"🌳목표 요청이 오더라도 서버의 터미널에는 아무런 정보도 남아 있지 않습니다.\n이번 시간에는 서버 로그를 기록하는 미들웨어인 logger를 만들어 보겠습니다.\n익스프레스JS 진영의 morgan과 유사한 모듈입니다. 🐤실습 - Logger…","fields":{"slug":"/series/2018/12/10/node-web-10_logger.html","date":"2018년 12월 10일"},"frontmatter":{"title":"[Node.js코드랩] 10.커스텀 모듈 logger"}}},{"node":{"excerpt":"🌳목표 Middleware 모듈을 활용하여 serve-static의 문제를 해결합니다.\n기존 코드도 미들웨어 형태로 개선합니다. Middleware로 Application.use…","fields":{"slug":"/series/2018/12/09/node-web-9_middleware2.html","date":"2018년 12월 09일"},"frontmatter":{"title":"[Node.js코드랩] 9.미들웨어 활용"}}},{"node":{"excerpt":"🌳목표 미들웨어 패턴을 구현하여 serve-static…","fields":{"slug":"/series/2018/12/08/node-web-8_middleware.html","date":"2018년 12월 08일"},"frontmatter":{"title":"[Node.js코드랩] 8.미들웨어"}}},{"node":{"excerpt":"🌳목표 이전 코드를 리팩토링하여 serve-static 모듈을 만듭니다 🐤실습 - serve-static 모듈 구현 이전 시간까지 했던 코드로 브랜치 이동하겠습니다. src/Application.js에 있는 정적파일 다루는 로직을 src/serve…","fields":{"slug":"/series/2018/12/07/node-web-7_serve-static.html","date":"2018년 12월 07일"},"frontmatter":{"title":"[Node.js코드랩] 7.커스텀 모듈 serve-static"}}},{"node":{"excerpt":"🌳목표 서버에 자원 중에서 브라우져에 다운로드하여 화면을 그리는 파일을 정적파일이라고 합니다.\n이번에 이 기능을 만들어 봅니다. 정적 파일이란? 미리 만들어둔 브랜치로 이동하겠습니다. public…","fields":{"slug":"/series/2018/12/06/node-web-6_static-files.html","date":"2018년 12월 06일"},"frontmatter":{"title":"[Node.js코드랩] 6.정적 파일"}}},{"node":{"excerpt":"🌳목표 노드에서 꽤 많이 사용되는 debug 모듈을 직접 만들어 봅니다. Debug를 사용하는 이유 Debug 모듈은 노드에서 가장 많이 사용하는 디버깅 모듈입니다.\n로그를 구조적으로 기록할 수 있다는 점에서 console.log…","fields":{"slug":"/series/2018/12/05/node-web-5_debug.html","date":"2018년 12월 05일"},"frontmatter":{"title":"[Node.js코드랩] 5.커스텀 모듈 Debug"}}},{"node":{"excerpt":"🌳목표 우리가 만들었던 server.js는 http 모듈을 직접 가져다 사용한 것입니다.\n모듈의 createServer() 함수와 listen…","fields":{"slug":"/series/2018/12/04/node-web-4_application.html","date":"2018년 12월 04일"},"frontmatter":{"title":"[Node.js코드랩] 4.어플리케이션"}}},{"node":{"excerpt":"🌳목표 코드를 유연하고 읽기 쉽게 개선하는 것을 \"리팩토링 한다\"라고 말하는데요,\n이번 글에서는 이전에 작성한 헬로월드 코드를 리팩토링 해 보겠습니다. server.js…","fields":{"slug":"/series/2018/12/03/node-web-3_refactoring.html","date":"2018년 12월 03일"},"frontmatter":{"title":"[Node.js코드랩] 3.리팩토링"}}},{"node":{"excerpt":"🌳목표 노드의 기본 모듈 중 네트웍 기능을 제공하는 http 모듈을 알아 봅니다.\n헬로월드 코드로 http모듈을 이용한 서버 어플레케이션을 만드는 것이 목표입니다. 왜 http…","fields":{"slug":"/series/2018/12/02/node-web-2_http.html","date":"2018년 12월 02일"},"frontmatter":{"title":"[Node.js코드랩] 2.기본 모듈 http"}}},{"node":{"excerpt":"소개 익스프레스JS(Express.js)는 노드에서 가장 많이 사용하는 웹 프레임웍 입니다. 이것을 이용해서 API…","fields":{"slug":"/series/2018/12/01/node-web-0_index.html","date":"2018년 12월 01일"},"frontmatter":{"title":"🌳[Node.js 코드랩] 소개 및 목차"}}},{"node":{"excerpt":"…","fields":{"slug":"/series/2018/12/01/node-web-1_orientation.html","date":"2018년 12월 01일"},"frontmatter":{"title":"[Node.js 코드랩] 1.오리엔테이션"}}},{"node":{"excerpt":"…","fields":{"slug":"/2017/10/21/diy-express-day4.html","date":"2017년 10월 21일"},"frontmatter":{"title":"익스프레스 만들기 Day 4"}}},{"node":{"excerpt":"지금까지 만든 페이지가 포스트 조회, 생성임. 편집까지 만들어보자.\n아니, 귀찮으니깐 삭제 기능부터 만들자. 삭제 기능 구현 조회 페이지의 각 포스트 하단에 삭제 버튼을 만들고 버튼을 클릭할때 호출할\n API를 만들면 되겠다.\napplication…","fields":{"slug":"/2017/10/06/diy-express-day3.html","date":"2017년 10월 06일"},"frontmatter":{"title":"익스프레스 만들기 Day 3"}}},{"node":{"excerpt":"미들웨어 구조를 만들고 났으니 기능을 추가하는 것 좀더 쉬울것 같다.\n우선은 테스트 코드부터 정리하자. 기능만 우선 만들어 본다고 제대로 못했다. ... 오케이 supertest…","fields":{"slug":"/2017/10/05/diy-express-day2.html","date":"2017년 10월 05일"},"frontmatter":{"title":"익스프레스 만들기 Day 2"}}},{"node":{"excerpt":"…","fields":{"slug":"/2017/10/03/diy-express-day1.html","date":"2017년 10월 03일"},"frontmatter":{"title":"익스프레스 만들기 Day 1"}}},{"node":{"excerpt":"이전글: (함수형JS) 순수성, 불변성, 변경정책 앞서 설명한 순수성, 불변성, 변화 제어가 함수 조립에서 어떤 역할을 하는지 알아봤다. 이러한 특징을 이용해 함수를 더 자유롭게 조립하는 방법을 이번 글에서 살펴보겠다. curry-banner…","fields":{"slug":"/js/2017/05/11/pipeline.html","date":"2017년 05월 11일"},"frontmatter":{"title":"흐름 기반 프로그래밍"}}},{"node":{"excerpt":"이전글: (함수형JS) 함수로 함수 만들기…","fields":{"slug":"/js/2017/04/23/Purity-Immutability-and-Policies-for-Change.html","date":"2017년 04월 23일"},"frontmatter":{"title":"순수성, 불변성, 변경정책"}}},{"node":{"excerpt":"이전글: (함수형JS) 함수로 함수 만들기2 커링 partial-application-banner 커링을 충분히 이해했다면( (함수형JS) 함수로 함수 만들기…","fields":{"slug":"/js/2017/04/21/partial-application.html","date":"2017년 04월 21일"},"frontmatter":{"title":"함수로 함수 만들기3 부분적용"}}},{"node":{"excerpt":"이전글: (함수형JS) 함수로 함수 만들기1 다형성 curry-banner 왜 커링을 사용하는가? 이 글에서는 함수로 함수 만들기 두 번째 시간으로 커링(currying…","fields":{"slug":"/js/2017/04/17/curry.html","date":"2017년 04월 17일"},"frontmatter":{"title":"함수로 함수 만들기2 커링"}}},{"node":{"excerpt":"이전글: (함수형JS) 고차 함수 ploymophism 지난 글에서 고차함수를 다뤘다. 함수를 받고 다른 함수를 반환하는 고차함수를 이용하면 자바스크립트에서 다형성(polymorphism…","fields":{"slug":"/js/2017/04/10/function-by-function.html","date":"2017년 04월 10일"},"frontmatter":{"title":"함수로 함수 만들기1 다형성"}}},{"node":{"excerpt":"high-order-function 함수형 프로그래밍을 설명하기에 앞서 프로그래밍에서는 일급 객체(First-class citizens…","fields":{"slug":"/js/2017/04/03/high-order-function-in-javascript.html","date":"2017년 04월 03일"},"frontmatter":{"title":"고차 함수"}}},{"node":{"excerpt":"이번엔는 서버와 통신하는 앵귤러 서비스 를 수정할 차례다.\n지난 포스트에서 언급했듯이 앵귤러 서비스는 백엔드 api와 http…","fields":{"slug":"/lectures/todomvc-angular/13/","date":"2016년 06월 16일"},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 13 - $http로 앵귤러 서비스 개선하기"}}},{"node":{"excerpt":"이번엔 서버의 두 번째 기능 API를 만들어 보자. API…","fields":{"slug":"/lectures/todomvc-angular/12/","date":"2016년 06월 14일"},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 12 - APIs"}}},{"node":{"excerpt":"사실 우리 싸이트의 홈페이지로 접속하면 angular로 만들었던 index.html 페이지가 로딩되는 것이 자연스럽니다.\n결국은 서버에 있는 프론트엔드 코드들이 브라우져로 다운로드 되어야 하는데\n이러한 파일들을 우리는 정적파일(Static Files…","fields":{"slug":"/lectures/todomvc-angular/11/","date":"2016년 06월 14일"},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 11 - Static Files"}}},{"node":{"excerpt":"이제부터 서버를 만들어 보자.\n서버 기능은 두 가지라고 앞서 얘기했다. (참고: 앵귤러로 Todo앱 만들기 1 - 노드 설치노드 설치) 정적파일 호스팅 API 기능 이것을 쉽게 구현할수 있는 것이 Express.js라고 하는 웹프레임워크다.\nnpm…","fields":{"slug":"/lectures/todomvc-angular/10/","date":"2016년 06월 14일"},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 10 - Express.js로 웹서버 만들기"}}},{"node":{"excerpt":"…","fields":{"slug":"/lectures/todomvc-angular/9/","date":"2016년 06월 14일"},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 9 - Service"}}},{"node":{"excerpt":"…","fields":{"slug":"/lectures/todomvc-angular/8/","date":"2016년 06월 14일"},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 8 - Directive"}}},{"node":{"excerpt":"우리가 ngRepeat 디렉티브를 이용해 todos 배열 데이터를 출력해 봤다.\n이번에는 출력된 리스트를 필터링해 보겠다. 필터링할 수 있는 기준은 아래와 같다. completed: 완료된 투두 리스트 active: 미완료된 투두 리스트 all…","fields":{"slug":"/lectures/todomvc-angular/7/","date":"2016년 06월 13일"},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 7 - 투두 목록 필터링"}}},{"node":{"excerpt":"여기서 잠깐.\n이왕이면 좀더 이쁘게 만들어 보자.\n가장 많이 사용하는 스타일시트 중 트위터 부트스트랩을 이용할 작성이다.\n이전 포스트에서 앵귤러 라이브러리를 추가했던 과정이 기억나는가?\n그렇다. NPM…","fields":{"slug":"/lectures/todomvc-angular/6/","date":"2016년 06월 13일"},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 6 - Bootstrap으로 꾸미기"}}},{"node":{"excerpt":"…","fields":{"slug":"/lectures/todomvc-angular/5/","date":"2016년 06월 12일"},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 5 - 새로운 투두 추가하기"}}},{"node":{"excerpt":"컨트롤러에 배열 데이터 만들기 우선 데이터가 있다고 가정하자.\n우리 프로젝트에서 데이터는 투두 목록이다.\n하나의 두투는 아이디(id), 타이틀(title), 그리고 완료여부(completed…","fields":{"slug":"/lectures/todomvc-angular/4/","date":"2016년 06월 12일"},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 4 - 투두 목록 출력하기"}}},{"node":{"excerpt":"…","fields":{"slug":"/lectures/todomvc-angular/3/","date":"2016년 06월 12일"},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 3 - 컨트롤러"}}},{"node":{"excerpt":"index.html 기본 html 파일부터 작성해 보자. index.html…","fields":{"slug":"/lectures/todomvc-angular/2/","date":"2016년 06월 12일"},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 2 - 앵귤러 로딩"}}},{"node":{"excerpt":"지금부터 Angular.js, Node.js를 이용해서 Todo앱을 만들어 보자.\n본 시리즈는 총 2…","fields":{"slug":"/lectures/todomvc-angular/1/","date":"2016년 06월 12일"},"frontmatter":{"title":"앵귤러로 Todo앱 만들기 1 - 노드설치"}}},{"node":{"excerpt":"Hapi 프레임웍을 이용해 Api 서버를 구현할 때 필요한 최소한의 기능은 이렇다. 예를들어 /users 라우팅시 아래와 같은 폴더 구조로 만들 수 있다. 이외에 데이터베이스 연결 모듈, 로깅 모듈 등 라우팅 이외의 모듈을 components…","fields":{"slug":"/hapi-api-server-scaffold/","date":"2015년 02월 22일"},"frontmatter":{"title":"Hapi Api 서버 스캐폴드"}}},{"node":{"excerpt":"…","fields":{"slug":"/hapi-test/","date":"2015년 02월 19일"},"frontmatter":{"title":"Hapi 테스트 코드"}}},{"node":{"excerpt":"이번에는 Hapi Api 서버의 인증 기능을 구현해 보자. hapi-auth-cookie…","fields":{"slug":"/hapi-auth/","date":"2015년 02월 18일"},"frontmatter":{"title":"Hapi 인증"}}},{"node":{"excerpt":"익스프레스에 winton 로깅 모듈이 있듯이 Hapi에서는 Good이라는 좋은 로깅 모듈이 있다. 이번 글에서는 Hapi 프레임웍에서의 로깅 방법에 대해 알아보자. Good 모듈로 로깅시 리포터 모듈을 함께 추가해야한다. Good 모듈은 hapi…","fields":{"slug":"/hapi-logging-good/","date":"2015년 02월 16일"},"frontmatter":{"title":"Hapi 로깅, Good"}}},{"node":{"excerpt":"지난 포스트에서 Hapi 프레임웍을 이용한 라우팅을 구현하였고 파라메터를 얻는 방법을 잠깐 언급하였다. REST Api…","fields":{"slug":"/hapijs-joi/","date":"2015년 02월 14일"},"frontmatter":{"title":"Hapi 파라매터 검증, Joi"}}},{"node":{"excerpt":"Node.js에서 서버 구현은 대부분 Express.js 프레임웍으로 개발했다. Express.js 3.x에서 4.x대로 업그레이드 되면서 개선된 성능과 사용 편의성에서 만족하고 있었다. 이제 막 익스프레스 프레임웍이 손에 익을 무렵 Hapi…","fields":{"slug":"/start-with-hapi/","date":"2015년 02월 14일"},"frontmatter":{"title":"Hapi 시작하기"}}}]}},"pageContext":{}}}