{"componentChunkName":"component---src-templates-blog-post-blog-post-tsx","path":"/hapi-test/","result":{"data":{"site":{"siteMetadata":{"title":"김정환 블로그","url":"https://jeonghwan-kim.github.io"}},"markdownRemark":{"id":"c7003df2-680e-53bd-921e-321ef3d4b7e7","excerpt":"…","html":"<p>프론트도 마찬가지지만 백엔드 서버를 개발할수록 테스트가 중요성을 실감한다.\n서비스는 서버 혼자서 동작하는 것이 아니라 모바일, 웹 브라우져 등의 클라이언트와 함께 동작해야 하기 때문에 다양한 시나리오에 대응할 수 있어야 한다.\n또한 한 번 발생한 버그는 재발하지 않는다는 것을 보장해야 마음 놓고 코드를 수정할 수 있다.\n때문에 테스트 뿐만 아니라 테스트 규모가 커짐에 따라 이에 대한 테스트 자동화에 대해서도 고민하지 않을 수 없다.</p>\n<p>이번 글은 Hapi를 이용한 Api 서버 개발시 테스트 자동화가 그 주제다.</p>\n<ul>\n<li>Hapi에서 제공하는 유닛테스트 모듈인 <a href=\"https://github.com/hapijs/lab\">Lab</a>과</li>\n<li>검증모듈 <a href=\"https://github.com/hapijs/code#array\">Code</a>, </li>\n<li>이를 활용한 REST Api 단에서의 테스트 코드 작성법,</li>\n<li>그리고 테스트 결과의 문서화까지의 테스트 과정에 대해 보자.</li>\n</ul>\n<h1 id=\"라우팅-테스트\" style=\"position:relative;\"><a href=\"#%EB%9D%BC%EC%9A%B0%ED%8C%85-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"라우팅 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>라우팅 테스트</h1>\n<p>유닛 테스트라고 하면 클래스, 함수 단위 등 하나의 코드 덩어리를 테스트하는 것을 말한다.\nApi 서버에서도 클래스와 함수가 있기 때문에 그러한 모듈단위의 유닛테스트가 가능하다.\n그러나 본 글에서는 유닛테스트가 아닌 프로토콜 단위의 테스트 코드를 다룬다. API 서버의 궁극적인 목적은 프로토콜을 호출했을 때 예상되는 결과로 응답하는 것이기 때문에 이러한 프로토콜 단위의 테스트가 중요하다고 생각한다.</p>\n<p>지금까지 작성한 코드의 폴더구조를 살펴보자.\n라우팅 단위로 폴더를 작성하고, 각 폴더에는 <code class=\"language-text\">index.js</code> <code class=\"language-text\">*.ctrl.js</code>, <code class=\"language-text\">*.valid.js</code>가 각각 존재한다.\n테스트를 위해 <code class=\"language-text\">*.spec.js</code> 파일을 추가하자.\n다시 한 번 각 파일의 역할을 설명하면 아래와 같다.</p>\n<ul>\n<li><code class=\"language-text\">index.js</code>: 라우팅 설정</li>\n<li><code class=\"language-text\">*.ctrl.js</code>: 로직 구현</li>\n<li><code class=\"language-text\">*.valid.js</code>: 파라매터 검증</li>\n<li><code class=\"language-text\">*.spec.js</code>: 테스트 코드</li>\n</ul>\n<p>이전 포스트에서 구현한 <code class=\"language-text\">/user</code> 프로토콜에 대한 테스트 코드를 구현해 보자.</p>\n<p>Hapi 유닛테스트 모듈인 <strong>Lab</strong> 과 검증 모듈 <strong>Code</strong> 를 사용해서 구현한다.\nHapi에서는 유닛 테스트에 언급하는 Test Suite를 \"experiment\", Test Case는 \"test\"라고 부른다.\n중첩 experiment를 가질 수 있고 테스트 전략에 따라서 테스트 케이스를 구조화 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> Code <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 검증 모듈</span>\n<span class=\"token keyword\">var</span> Lab <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lab'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 유닛 테스트 모듈</span>\n<span class=\"token keyword\">var</span> lab <span class=\"token operator\">=</span> exports<span class=\"token punctuation\">.</span>lab <span class=\"token operator\">=</span> Lab<span class=\"token punctuation\">.</span><span class=\"token function\">script</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 서버 모듈</span>\n<span class=\"token comment\">// 서버 객체를 할당한 부분에서 module.exports = server 코드를 추가하여</span>\n<span class=\"token comment\">// 서버 객체를 노출시켜서 사용해야 한다.</span>\n<span class=\"token keyword\">var</span> app <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../../index.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 테스트 suite</span>\nlab<span class=\"token punctuation\">.</span><span class=\"token function\">experiment</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/users'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// 테스트 케이스</span>\n  lab<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">done</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> opts <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      method<span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\n      url<span class=\"token operator\">:</span> <span class=\"token string\">'/users'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 서버 구동</span>\n    app<span class=\"token punctuation\">.</span><span class=\"token function\">inject</span><span class=\"token punctuation\">(</span>opts<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n      <span class=\"token comment\">// Code 검증 모듈로 결과값을 검증한다.</span>\n      Code<span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>statusCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      Code<span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">contain</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      Code<span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span>an<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// 비동기 코드이므로 done() 콜백함수로 종료를 알린다.</span>\n      <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드에서는 우리가 구현한 서버 객체를 <code class=\"language-text\">require()</code> 함수로 불러온다.\n기존의 서버 생성 코드에 <code class=\"language-text\">server</code> 객체를 노출시키는 코드 추가하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> Hapi <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hapi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 서버 객체 생성 및 설정 */</span>\n\n<span class=\"token comment\">// 서버 객체를 노출한다.</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> server<span class=\"token punctuation\">;</span></code></pre></div>\n<p>작성한 테스트 코드를 아래 명령어로 실행해보자.\n콘솔 화면을 통해 테스트 결과를 확인할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ node_modules/lab/bin/lab users.spec.js</code></pre></div>\n<h1 id=\"깔끔한-테스트를-위한-작업\" style=\"position:relative;\"><a href=\"#%EA%B9%94%EB%81%94%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%9E%91%EC%97%85\" aria-label=\"깔끔한 테스트를 위한 작업 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>깔끔한 테스트를 위한 작업</h1>\n<p>Api 서버 테스트를 여러번 수행할수록 서버에는 테스트 데이터가 쌓이게 된다.\n예를 들어 POST 프로토콜을 테스트 할 경우 데이터베이스에 데이터를 저장한다면 데이터가 계속 쌓이게 된다.\n어차피 개발서버에서 테스트 한다면 상관없을 수도 있으나 테스트 후에는 그 흔적이 남지 않아야 한다고 생각한다.\n이번 테스트 뿐만 아니라 다른 테스트에 영향을 미칠수 있기 때문이다.</p>\n<p>Lab 모듈에서는 <code class=\"language-text\">before()</code>와 <code class=\"language-text\">after()</code> 함수를 지원한다.\n<code class=\"language-text\">test()</code>로 테스트 케이스를 진행하기 전에 뭔가 작업을 하고 테스트 종료후 마무리 작업을 위한 함수다.\n<code class=\"language-text\">before()</code>에선 POST 프로토콜로 테스트 데이터를 입력하고 <code class=\"language-text\">after()</code>에서는 DELETE 프로토콜로 테스트 데이터를 삭제한다.  \n<code class=\"language-text\">test()</code>에서는 GET, PUT 프로토콜을 테스트한다.\n<code class=\"language-text\">before()</code>/<code class=\"language-text\">after()</code>는 <code class=\"language-text\">experiment()</code>에서 각 각 한번만 실행된다.\n매 테스트마다 실행하기 위한 <code class=\"language-text\">beforeEach()</code>/<code class=\"language-text\">afterEach()</code>함수도 지원한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> Code <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> Lab <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lab'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> lab <span class=\"token operator\">=</span> exports<span class=\"token punctuation\">.</span>lab <span class=\"token operator\">=</span> Lab<span class=\"token punctuation\">.</span><span class=\"token function\">script</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> app <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../../index.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nlab<span class=\"token punctuation\">.</span><span class=\"token function\">experiment</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/users'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// 테스트 데이터</span>\n  <span class=\"token keyword\">var</span> tester <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'Unit Tester'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 테스트 전에 post로 테스트 자원을 입력하는 프로토콜을 호출한다.</span>\n  lab<span class=\"token punctuation\">.</span><span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">done</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> opts <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n      url<span class=\"token operator\">:</span> <span class=\"token string\">'/users'</span><span class=\"token punctuation\">,</span>\n      payload<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> tester<span class=\"token punctuation\">.</span>name\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    app<span class=\"token punctuation\">.</span><span class=\"token function\">inject</span><span class=\"token punctuation\">(</span>opts<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      Code<span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>statusCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token number\">201</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      tester<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>tester<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 테스트 종료 후 테스트 자원을 삭제하는 프로토콜을 호출한다.</span>\n  lab<span class=\"token punctuation\">.</span><span class=\"token function\">after</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">done</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> opts <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      method<span class=\"token operator\">:</span> <span class=\"token string\">'DELETE'</span><span class=\"token punctuation\">,</span>\n      url<span class=\"token operator\">:</span> <span class=\"token string\">'/users?id='</span> <span class=\"token operator\">+</span> tester<span class=\"token punctuation\">.</span>id\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    app<span class=\"token punctuation\">.</span><span class=\"token function\">inject</span><span class=\"token punctuation\">(</span>opts<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      Code<span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>statusCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  lab<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">done</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> opts <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      method<span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\n      url<span class=\"token operator\">:</span> <span class=\"token string\">'/users'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    app<span class=\"token punctuation\">.</span><span class=\"token function\">inject</span><span class=\"token punctuation\">(</span>opts<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      Code<span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>statusCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      Code<span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">contain</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      Code<span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span>an<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// before()에서 입력한 테스트 데이터를 확인한다.</span>\n      Code<span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">[</span>tester<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>tester<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  lab<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET users/{id}'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">done</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> opts <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      method<span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\n      url   <span class=\"token operator\">:</span> <span class=\"token string\">'/users/'</span> <span class=\"token operator\">+</span> tester<span class=\"token punctuation\">.</span>id\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    app<span class=\"token punctuation\">.</span><span class=\"token function\">inject</span><span class=\"token punctuation\">(</span>opts<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      Code<span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>statusCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// before()에서 입력한 테스트 데이터를 확인한다.</span>\n      Code<span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>tester<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>만약 테스트가 많을 경우 한 테스트 케이스만 실행할 필요가 있다.\n반대로 특정 테스트는 스킵하고 싶을 때가 있는데 <code class=\"language-text\">lab.test()</code> 함수의 두 번째 파라메터로 <code class=\"language-text\">{only: Boolean, skip: Boolena}</code> 객체를 넘겨주면 가능하다.</p>\n<p>테스트 파일이 많아지면 매번 명령어로 실행하기 불가능하다.\n리눅스에 많이 사용하는 Makefile를 활용하면 이를 손쉽게 관리할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\"><span class=\"token symbol\">all</span><span class=\"token punctuation\">:</span> users auth\n\n<span class=\"token symbol\">users</span><span class=\"token punctuation\">:</span>\n  node_modules/lab/bin/lab app/routes/users/*.spec.js\n\n<span class=\"token symbol\">auth</span><span class=\"token punctuation\">:</span>\n  node_modules/lab/bin/lab app/routes/auth/*.spec.js</code></pre></div>\n<p>/users 프로토콜을 테스트할 때는 <code class=\"language-text\">make user</code>로 간단히 실행한다.\n<code class=\"language-text\">make</code> 명령어는 전체 테스트를 실행한다.\nMakefile은 프로젝트 루트폴더에 관리하는 것이 좋고, 스페이스가 아니라 반드시 '탭'을 사용해야 한다는 점을 주의하자.</p>\n<h1 id=\"테스트-결과\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EA%B2%B0%EA%B3%BC\" aria-label=\"테스트 결과 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 결과</h1>\n<p>Lab 모듈은 훌륭한 테스트 결과 문서를 제공한다.\nLab 명령어 실행시 <code class=\"language-text\">-r</code> 옵션은 리포트 형식을 정하는 옵션이다.\n<code class=\"language-text\">-r html</code> 옵션을 줘서 html 형식으로 테스트 결과를 출력하고 <code class=\"language-text\">-o report.html</code> 옵션을 추가하여 파일로 저장할 수 있다.\nMakefile을 아래처럼 수정해 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\"><span class=\"token symbol\">users</span><span class=\"token punctuation\">:</span>\n  node_modules/lab/bin/lab -o report.html -r html app/routes/users/*.spec.js</code></pre></div>\n<h1 id=\"grunt로-자동화\" style=\"position:relative;\"><a href=\"#grunt%EB%A1%9C-%EC%9E%90%EB%8F%99%ED%99%94\" aria-label=\"grunt로 자동화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Grunt로 자동화</h1>\n<p>지금까지의 작업을 Grunt로 자동화 해보자.\n우리는 <code class=\"language-text\">grunt test</code> 단 한줄의 명령어로 테스트 실행, 리포트 생성 및 생성된 리포트 열람의 작업을 수행할 수 있다.\n아래 명령어로 grunt 관련 모듈을 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install --save-dev grunt grunt-lab grunt-open</code></pre></div>\n<p>프로젝트 루트 폴더에 Gruntfile.js를 생성하고 아래 코드를 작성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">grunt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  grunt<span class=\"token punctuation\">.</span><span class=\"token function\">initConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// lab 명령어 관련 설정</span>\n    lab<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      files<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'app/**/*.spec.js'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 모든 테스트 파일을 수행한다.</span>\n      nodeEnv<span class=\"token operator\">:</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token constant\">DEBUG</span><span class=\"token operator\">:</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span>\n      color<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      verbose<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      timeout<span class=\"token operator\">:</span> <span class=\"token number\">7000</span><span class=\"token punctuation\">,</span>\n      parallel<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      reportFile<span class=\"token operator\">:</span> <span class=\"token string\">'report.html'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 리포트 파일을 생성한다.</span>\n      reporter<span class=\"token operator\">:</span> <span class=\"token string\">'html'</span><span class=\"token punctuation\">,</span>\n      coverage<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// 생성한 리프포트 파일을 크롬 브라우저로 열람한다.</span>\n    open<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      report<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        path<span class=\"token operator\">:</span> <span class=\"token string\">'report.html'</span><span class=\"token punctuation\">,</span>\n        app<span class=\"token operator\">:</span> <span class=\"token string\">'Google Chrome'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  grunt<span class=\"token punctuation\">.</span><span class=\"token function\">loadNpmTasks</span><span class=\"token punctuation\">(</span><span class=\"token string\">'grunt-lab'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  grunt<span class=\"token punctuation\">.</span><span class=\"token function\">loadNpmTasks</span><span class=\"token punctuation\">(</span><span class=\"token string\">'grunt-open'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  grunt<span class=\"token punctuation\">.</span><span class=\"token function\">registerTask</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'lab'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'open:report'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이제 grunt test 명령어를 수행해보자. 작성한 모든 테스트가 실행되고, report.html에 결과를 저장한 뒤, 크롬 브라우져가 열릴 것이다.</p>\n<p><img src=\"/assets/imgs/2015/hapi-test-run-grunt.png\">\n<img src=\"/assets/imgs/2015/hapi-test-coverage-1.png\">\n<img src=\"/assets/imgs/2015/hapi-test-coverage-2.png\"></p>\n<p>전체 코드: <a href=\"https://github.com/jeonghwan-kim/hapi_study/tree/09_test\">https://github.com/jeonghwan-kim/hapi<em>study/tree/09</em>test</a></p>","fields":{"dateStr":"2015년 02월 19일","date":"2015-02-19T18:50:23.000Z","slug":"/hapi-test/","beforeGatsby":true},"frontmatter":{"title":"Hapi 테스트 코드","tags":["hapijs","test"],"seriesId":"f390bf73-face-589a-be3e-5d38fc5f704b","videoId":null},"tableOfContents":"<ul>\n<li><a href=\"#%EB%9D%BC%EC%9A%B0%ED%8C%85-%ED%85%8C%EC%8A%A4%ED%8A%B8\">라우팅 테스트</a></li>\n<li><a href=\"#%EA%B9%94%EB%81%94%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%9E%91%EC%97%85\">깔끔한 테스트를 위한 작업</a></li>\n<li><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EA%B2%B0%EA%B3%BC\">테스트 결과</a></li>\n<li><a href=\"#grunt%EB%A1%9C-%EC%9E%90%EB%8F%99%ED%99%94\">Grunt로 자동화</a></li>\n</ul>"},"series":{"id":"f390bf73-face-589a-be3e-5d38fc5f704b","title":"Hapi.js로 API 서버 시작하기"},"video":null,"allMarkdownRemark":{"nodes":[{"id":"8a5e64d3-5ad7-5113-9752-99272410a942","fields":{"slug":"/start-with-hapi/","date":"2015-02-14T16:15:06.000Z"},"frontmatter":{"title":"Hapi 시작하기","seriesId":"f390bf73-face-589a-be3e-5d38fc5f704b"}},{"id":"dab2c7a8-dd59-55c2-8903-95a9f1742232","fields":{"slug":"/hapijs-joi/","date":"2015-02-14T17:43:54.000Z"},"frontmatter":{"title":"Hapi 파라매터 검증, Joi","seriesId":"f390bf73-face-589a-be3e-5d38fc5f704b"}},{"id":"8df9709d-281b-56e7-af9d-182823518a79","fields":{"slug":"/hapi-logging-good/","date":"2015-02-16T10:23:33.000Z"},"frontmatter":{"title":"Hapi 로깅, Good","seriesId":"f390bf73-face-589a-be3e-5d38fc5f704b"}},{"id":"2f1e7166-7e7f-5a94-ab23-fd9358e18317","fields":{"slug":"/hapi-auth/","date":"2015-02-18T20:41:16.000Z"},"frontmatter":{"title":"Hapi 인증","seriesId":"f390bf73-face-589a-be3e-5d38fc5f704b"}},{"id":"c7003df2-680e-53bd-921e-321ef3d4b7e7","fields":{"slug":"/hapi-test/","date":"2015-02-19T18:50:23.000Z"},"frontmatter":{"title":"Hapi 테스트 코드","seriesId":"f390bf73-face-589a-be3e-5d38fc5f704b"}},{"id":"b23fd909-fca2-5bc1-87da-adb6a48895db","fields":{"slug":"/hapi-api-server-scaffold/","date":"2015-02-22T12:00:26.000Z"},"frontmatter":{"title":"Hapi Api 서버 스캐폴드","seriesId":"f390bf73-face-589a-be3e-5d38fc5f704b"}}]}},"pageContext":{"slug":"/hapi-test/","date":"2015-02-19T18:50:23.000Z","seriesId":"f390bf73-face-589a-be3e-5d38fc5f704b","videoId":null,"previous":{"fields":{"slug":"/wordpress-and-grunt/","date":"2015-02-18T21:35:59.000Z","beforeGatsby":true},"frontmatter":{"title":"워드프레스에 Grunt 설정하기","category":"dev","permalink":"/wordpress-and-grunt/","seriesId":null,"videoId":null}},"next":{"fields":{"slug":"/hapi-api-server-scaffold/","date":"2015-02-22T12:00:26.000Z","beforeGatsby":true},"frontmatter":{"title":"Hapi Api 서버 스캐폴드","category":"series","permalink":"/hapi-api-server-scaffold/","seriesId":"f390bf73-face-589a-be3e-5d38fc5f704b","videoId":null}}}}}