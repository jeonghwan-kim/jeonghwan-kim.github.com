{"componentChunkName":"component---src-templates-blog-post-blog-post-tsx","path":"/hapi-logging-good/","result":{"data":{"site":{"siteMetadata":{"title":"김정환 블로그","url":"https://jeonghwan-kim.github.io"}},"markdownRemark":{"id":"8df9709d-281b-56e7-af9d-182823518a79","excerpt":"익스프레스에 winton 로깅 모듈이 있듯이 Hapi에서는 Good이라는 좋은 로깅 모듈이 있다. 이번 글에서는 Hapi 프레임웍에서의 로깅 방법에 대해 알아보자. Good 모듈로 로깅시 리포터 모듈을 함께 추가해야한다. Good 모듈은 hapi…","html":"<p>익스프레스에 winton 로깅 모듈이 있듯이 Hapi에서는 <a href=\"https://github.com/hapijs/good\">Good</a>이라는 좋은 로깅 모듈이 있다. 이번 글에서는 Hapi 프레임웍에서의 로깅 방법에 대해 알아보자.</p>\n<p>Good 모듈로 로깅시 리포터 모듈을 함께 추가해야한다. Good 모듈은 hapi 프레임웍에서 내뿜는 이벤트를 감지하는 역할을 하는 것 같다. 실제 출력(콘솔이나 파일 등)은 리포터 모듈을 통해 동작하는 것이다. 출력 방식에 따라 아래와 같은 리포터 모듈을 사용할 수 있다.</p>\n<ul>\n    <li><a href=\"https://github.com/hapijs/good-console\">good-console</a>: 콘솔에 출력</li>\n    <li><a href=\"https://github.com/hapijs/good-file\">good-file</a>: 파일에 출력</li>\n    <li><a href=\"https://github.com/hapijs/good-http\">good-http</a>: 네트웍으로 출력 (전송)</li>\n</ul>\n<h1 id=\"loghelper\" style=\"position:relative;\"><a href=\"#loghelper\" aria-label=\"loghelper permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>logHelper</h1>\n<p><a href=\"https://github.com/hapijs/good\">예제</a>에 나온 코드를 app/components/logHelper/index.js 모듈로 분리해 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"use strict\"</span>\n\n<span class=\"token keyword\">var</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> opts <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  opsInterval<span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n  reporters<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      reporter<span class=\"token operator\">:</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"good-console\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      args<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          request<span class=\"token operator\">:</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span>\n          response<span class=\"token operator\">:</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span>\n          log<span class=\"token operator\">:</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span>\n          error<span class=\"token operator\">:</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      reporter<span class=\"token operator\">:</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"good-file\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      args<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          path<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"../../../logs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          format<span class=\"token operator\">:</span> <span class=\"token string\">\"YYYYMMDD-hhmmss\"</span><span class=\"token punctuation\">,</span>\n          prefix<span class=\"token operator\">:</span> <span class=\"token string\">\"hapi\"</span><span class=\"token punctuation\">,</span>\n          extension<span class=\"token operator\">:</span> <span class=\"token string\">\"log\"</span><span class=\"token punctuation\">,</span>\n          rotate<span class=\"token operator\">:</span> <span class=\"token string\">\"daily\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n          request<span class=\"token operator\">:</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span>\n          response<span class=\"token operator\">:</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span>\n          log<span class=\"token operator\">:</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span>\n          error<span class=\"token operator\">:</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">server</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  server<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n      register<span class=\"token operator\">:</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"good\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      options<span class=\"token operator\">:</span> opts<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> err\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>파일과 콘솔에 로그를 출력하도록 설정했다. 설정한 로그타입은 총 네 가지.</p>\n<ul>\n    <li>request: 프로토콜 요청시 로그 출력. 파라매터 값, 클라이언트 정보 등을 표시한다.</li>\n    <li>response: 요청에 한 응답시 로그 출력. http 상태 코드, 수행 시간 등을 표시한다.</li>\n    <li>log: 코드 사이 사이에 입력한 로그를 출력한다.</li>\n    <li>error: http 상태코드 5xx인 것만 로깅한다.</li>\n</ul>\n<h1 id=\"로그-함수\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EA%B7%B8-%ED%95%A8%EC%88%98\" aria-label=\"로그 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로그 함수</h1>\n<p>console.log()로 출력하면 로그 메세지가 제대로 출력되지 않는다. Hapi에서 제공하는 server객체나 request 객체의 log() 함수로 로깅하도록 되어 있다(<a href=\"http://hapijs.com/tutorials/logging\">참고</a>). log() 함수는 총 3개의 파라매터를 받는다. <code>log(tag, message, timestamp)</code></p>\n<ul>\n    <li>tag: 로깅 태그</li>\n    <li>messgae: 로깅할 문자열 혹은 자바스크립트 객체</li>\n    <li>timestamp: 로깅 시간, default: Date.now()</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">insert</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> reply</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  users<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 로깅 예제</span>\n  req<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"info\"</span><span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\" is inserted.\"</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">reply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> users<span class=\"token operator\">:</span> users <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>/users (post) 라우팅 로직 안에 위와 같이 로그를 뿌리도록 설정한다. 아래는 콘솔에선 보는 로그 화면이다. 파일도 동일하게 동작한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">150216/011404.736, [request,info], data: asdf is inserted.\n150216/011404.732, [response], http://localhost:8000: post /users {} 200 (7ms)</code></pre></div>\n<p>전체 코드: <a href=\"https://github.com/jeonghwan-kim/hapi_study/tree/07_good\">https://github.com/jeonghwan-kim/hapi<em>study/tree/07</em>good</a></p>","fields":{"dateStr":"2015년 02월 16일","date":"2015-02-16T10:23:33.000Z","slug":"/hapi-logging-good/"},"frontmatter":{"title":"Hapi 로깅, Good","tags":["hapijs"],"seriesId":"f390bf73-face-589a-be3e-5d38fc5f704b","videoId":null},"tableOfContents":"<ul>\n<li><a href=\"#loghelper\">logHelper</a></li>\n<li><a href=\"#%EB%A1%9C%EA%B7%B8-%ED%95%A8%EC%88%98\">로그 함수</a></li>\n</ul>"},"series":{"id":"f390bf73-face-589a-be3e-5d38fc5f704b","title":"Hapi.js로 API 서버 시작하기"},"video":null,"allMarkdownRemark":{"nodes":[{"id":"8a5e64d3-5ad7-5113-9752-99272410a942","fields":{"slug":"/start-with-hapi/","date":"2015-02-14T16:15:06.000Z"},"frontmatter":{"title":"Hapi 시작하기","seriesId":"f390bf73-face-589a-be3e-5d38fc5f704b"}},{"id":"dab2c7a8-dd59-55c2-8903-95a9f1742232","fields":{"slug":"/hapijs-joi/","date":"2015-02-14T17:43:54.000Z"},"frontmatter":{"title":"Hapi 파라매터 검증, Joi","seriesId":"f390bf73-face-589a-be3e-5d38fc5f704b"}},{"id":"8df9709d-281b-56e7-af9d-182823518a79","fields":{"slug":"/hapi-logging-good/","date":"2015-02-16T10:23:33.000Z"},"frontmatter":{"title":"Hapi 로깅, Good","seriesId":"f390bf73-face-589a-be3e-5d38fc5f704b"}},{"id":"2f1e7166-7e7f-5a94-ab23-fd9358e18317","fields":{"slug":"/hapi-auth/","date":"2015-02-18T20:41:16.000Z"},"frontmatter":{"title":"Hapi 인증","seriesId":"f390bf73-face-589a-be3e-5d38fc5f704b"}},{"id":"c7003df2-680e-53bd-921e-321ef3d4b7e7","fields":{"slug":"/hapi-test/","date":"2015-02-19T18:50:23.000Z"},"frontmatter":{"title":"Hapi 테스트 코드","seriesId":"f390bf73-face-589a-be3e-5d38fc5f704b"}},{"id":"b23fd909-fca2-5bc1-87da-adb6a48895db","fields":{"slug":"/hapi-api-server-scaffold/","date":"2015-02-22T12:00:26.000Z"},"frontmatter":{"title":"Hapi Api 서버 스캐폴드","seriesId":"f390bf73-face-589a-be3e-5d38fc5f704b"}}]}},"pageContext":{"slug":"/hapi-logging-good/","date":"2015-02-16T10:23:33.000Z","seriesId":"f390bf73-face-589a-be3e-5d38fc5f704b","videoId":null,"previous":{"fields":{"slug":"/hapijs-joi/","date":"2015-02-14T17:43:54.000Z","beforeGatsby":true},"frontmatter":{"title":"Hapi 파라매터 검증, Joi","category":"series","permalink":"/hapijs-joi/","seriesId":"f390bf73-face-589a-be3e-5d38fc5f704b","videoId":null}},"next":{"fields":{"slug":"/hapi-auth/","date":"2015-02-18T20:41:16.000Z","beforeGatsby":true},"frontmatter":{"title":"Hapi 인증","category":"series","permalink":"/hapi-auth/","seriesId":"f390bf73-face-589a-be3e-5d38fc5f704b","videoId":null}}}}}