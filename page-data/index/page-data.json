{"componentChunkName":"component---src-pages-index-tsx","path":"/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"개츠비 문서를 봤을때 눈에 띄었던 것이 이미지 처리 방식이다.\n화면 스크롤에 따라 이미지를 로딩하는 것(lazy load)은 이전에 만들어 봐서 익숙했지만 새로운 몇 가지가 더 있는것 같았다. 이미지를 가지고 있는 화면을 로딩할 때, 뿌옇게 보여주다가 원본 이미지를 보여주는 효과(blur up)가 마치 미디엄의 고급스러운 분위기를 자아냈다.\n브라우져 너비…","fields":{"slug":"/dev/2020/08/19/gatsby-image.html","dateStr":"2020년 08월 19일","date":"2020-08-19T00:00:00.000Z"},"frontmatter":{"title":"개츠비의 이미지 처리 방식"}},{"excerpt":"Gatsby.js 프로젝트를 보면서 react-helmet을 발견했다.\n개발 용어로 \"헬멧\"이라는 단어는 친숙한데 노드의 웹 프레임워크인 익스프레스에서 본 기억이 있다.\n보안과 관련된 미들웨어인데 헬멧이라는 이름처럼 웹 어플리케이션을 안전하게 지켜 주는 그런 도구로 알고 있다. 그런데 react-helmet도 비슷한 것인가하고 휙 지나쳤더니 전혀 아니더라…","fields":{"slug":"/dev/2020/08/15/react-helmet.html","dateStr":"2020년 08월 15일","date":"2020-08-15T00:00:00.000Z"},"frontmatter":{"title":"react-helmet의 동작 방식"}},{"excerpt":"뷰와 리액트를 사용한 이후 컴포넌트 기반으로 접근하는 것이 개발을 무척 단순하고 빠르게 만들었다.\n이를 기반한 정적 사이트 생성기도 나왔는데 리액트의 개츠비(gatsby)와 뷰의 뷰프레스(vue-press)가 자주 보였다. 내 블로그도 정적 사이트 생성기를 이용해서 관리하고 있다.\n루비 기반의 지킬(jekyll)이라는 툴인데 깃헙 페이지에 무료로 관리하려…","fields":{"slug":"/dev/2020/07/30/gatsby.html","dateStr":"2020년 07월 30일","date":"2020-07-30T00:00:00.000Z"},"frontmatter":{"title":"Gatsby.js 훑어보기"}},{"excerpt":"이제 프론트엔드 개발에 웹팩은 항상 달고 다닌다.\nES6+ 뿐만 아니라 타입스크립트를 사용하려면 이것 없이는 쉽지 않다. 웹팩과 더불어 필수로 사용하는 것이 webpack-dev-server이다.\n잼스택(JAM Stack)으로 개발된 결과물을 바로 바로 확인하려면 개발용 웹서버가 필요한데 바로 webpack-dev-server의 역할이다. 번들링한 JS,…","fields":{"slug":"/dev/2020/07/18/webpack-dev-middleware.html","dateStr":"2020년 07월 18일","date":"2020-07-18T00:00:00.000Z"},"frontmatter":{"title":"웹팩 개발 서버로 부족하다면 webpack-dev-middleware를 사용해 보자"}},{"excerpt":"시퀄라이즈로 모델링하는 방법을 한 번 정리한 적이 있는데 sequelize.define() 함수를 사용했었다.\n시퀄라이즈 4 버전을 사용했는데 노드js에 클래스 문법이 들어오기 전이었다. 이번에 데이터베이스 사용할 기회가 있어서 오랜만에 시퀄라이스 문서를 보는데 Model 클래스를 따로 제공하고 있더라. 리액트도 일반적으로는 Component 클래스를 확…","fields":{"slug":"/dev/2020/07/06/sequelize-model.html","dateStr":"2020년 07월 06일","date":"2020-07-06T00:00:00.000Z"},"frontmatter":{"title":"시퀄라이즈 Model 클래스 활용하기"}},{"excerpt":"스타일시트 전처리 언어인 sass를 사용하는데 노드 환경에서는 node-sass를 이용해 css 코드로 변환한다.\n전처리 언어 중 less를 먼저 사용했는데 점차 sass를 사용하는 분위기였다.\nc언어 구현체가 있는 sass의 빠른 빌드 속도 때문이듯 하다.\n요즘엔 거의 sass만 사용한다. sass 환경의 프로젝트에서 이따금 이런 오류를 접하게 된다. …","fields":{"slug":"/dev/2020/06/27/node-sass.html","dateStr":"2020년 06월 27일","date":"2020-06-27T00:00:00.000Z"},"frontmatter":{"title":"node-sass가 노드 버전에 의존적이 이유"}},{"excerpt":"해외에 나가기 전 꼭 챙겨야 하는 것이 여권(passport)이다.\n출국장에서 나의 신원을 확인해 주는 것이고 해외 입국장에서도 입국을 허가받을 수 있는 수단이기 때문이다. 서비스를 사용할 때도 등록된 사용자임이 확인되어야 기능을 사용할 수 있고 그렇지 않은 경우 일부 제한된다.\n이것이 바로 로그인인데 노드에서는 패스포트(passport) 패키지를 많이 …","fields":{"slug":"/dev/2020/06/20/passport.html","dateStr":"2020년 06월 20일","date":"2020-06-20T00:00:00.000Z"},"frontmatter":{"title":"패스포트 동작 원리와 인증 구현"}},{"excerpt":"폼(Form)은 웹 개발 할 때 반드시 다뤄야 하는 기술이다.\n로그인 화면, 글 작성 화면, 데이터를 다루는 커머는 어드민 화면까지 폼은 웹 개발에 있어서 폭넓게 사용되고 있다. 돌이켜 보면 그 때마다 적당한 폼 관련 라이브러리를 사용해서 화면을 만들었다. 앵귤러의 ngForm 뷰의 vee-validate 리액트의 antd 하지만 브라우져가 자동으로 처리…","fields":{"slug":"/dev/2020/06/08/html5-form-validation.html","dateStr":"2020년 06월 08일","date":"2020-06-08T00:00:00.000Z"},"frontmatter":{"title":"HTML5 폼 검증에 대해 정리해 보자"}},{"excerpt":"토이프로젝트를 하면서 테스트 코드를 어떻게 작성할까 고민이다.\n보통은 1) 함수나 클래스 단위의 유닛 테스트나 2)기능 단위의 통합 테스트를 한다.\n이번에는 유닛 테스트 보다는 통합 테스트를 먼저 시작했다.\n학습 목표에 따라 여러가지 대체 기술을 사용하려면 탄탄한 통합테스트가 준비되어 있어야하기 때문이다. 화면을 검증하는 방법에는 마땅히 좋은 아이디어가 …","fields":{"slug":"/dev/2020/05/25/supertest.html","dateStr":"2020년 05월 25일","date":"2020-05-25T00:00:00.000Z"},"frontmatter":{"title":"Node.js로 만든 API 테스트(supertest)"}},{"excerpt":"내가 파일 이름을 만들때 사용했던 방식은 이런 순서대로 거쳐왔다. 스네이크 케이스(snake_case) → 케밥 케이스(cabab-case) → 카멜 케이스(camelCase) 가령 \"foo bar\"라는 의미를 가진 파일을 만든다면, 스네이크 케이스: foo_bar 케밥 케이스: foo-bar 카멜 케이스: fooBar 단어 중간에 언더 스코어를 넣은 방…","fields":{"slug":"/dev/2020/05/18/filename.html","dateStr":"2020년 05월 18일","date":"2020-05-18T00:00:00.000Z"},"frontmatter":{"title":"파일명 컨벤션과 웹팩/노드 오류"}}]}},"pageContext":{}}}