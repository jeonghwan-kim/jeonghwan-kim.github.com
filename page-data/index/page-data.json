{"componentChunkName":"component---src-pages-index-tsx","path":"/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"이번에 스타일드 컴포넌츠(styled-components)를 사용해 보고 기존 방식과의 차이점, 그리고 왜 이것이 더 나은지를 정리해 보고자 한다. 기존 방식의 문제점 기존에는 사스(sass)를 사용해서 스타일 요소를 관리했다.\n리액트 컴포넌트로 예를 들자면 컴포넌트 이름과 동일한 CSS 클래스네임을 정의해서 컴포넌트의 클래스명으로 지정하는 방식이다.\n이…","fields":{"slug":"/dev/2020/10/25/styled-components.html","dateStr":"2020년 10월 25일","date":"2020-10-25T00:00:00.000Z"},"frontmatter":{"title":"styled-component로 리액트 컴포넌트 만들기"}},{"excerpt":"일 년 정도 리액트, 리덕스 조합으로 사용해 봤다.\n뷰(vue)나 모빅스(mobx)에 비해 러닝커브가 있다고 했지만 반복하고 시간이 지나니 익숙해 지더라. 그러던 중 신규 프로젝트에 상태관리 라이브러리로 모빅스를 사용해 보자는 의견이 팀에서 나왔고 비교적 단순해 보였다.\n사용해 본 결과, 역시 단순하다. 문서 기준으로 기본 개념을 정리해 보자. 기본 개념…","fields":{"slug":"/dev/2020/10/10/mobx.html","dateStr":"2020년 10월 10일","date":"2020-10-10T00:00:00.000Z"},"frontmatter":{"title":"상태관리 라이브러리 mobx"}},{"excerpt":"브라우져에서 웹 페이지 로딩 성능을 좌우하는 요소 중 하나가 리소스를 다운로드 하는것이다.\n이미지, 폰트, 자바스크립트, 스타일시트 등 HTML 문서는 다양한 리소스를 가지고 웹페이지를 만들어내기 때문에 미리 다운로드 해야한다. 다운로드할 파일의 크기가 페이지 로딩 성능에 영향을 주는 것은 인터넷 환경에서 자명하다.\n그렇기 때문에 이미지 크기를 줄이고 코…","fields":{"slug":"/dev/2020/08/21/gatsby-prefetch.html","dateStr":"2020년 08월 21일","date":"2020-08-21T00:00:00.000Z"},"frontmatter":{"title":"개츠비 프리로딩과 프리패치"}},{"excerpt":"개츠비 문서를 봤을때 눈에 띄었던 것이 이미지 처리 방식이다.\n화면 스크롤에 따라 이미지를 로딩하는 것(lazy load)은 이전에 만들어 봐서 익숙했지만 새로운 몇 가지가 더 있는것 같았다. 이미지를 가지고 있는 화면을 로딩할 때, 뿌옇게 보여주다가 원본 이미지를 보여주는 효과(blur up)가 마치 미디엄의 고급스러운 분위기를 자아냈다.\n브라우져 너비…","fields":{"slug":"/dev/2020/08/19/gatsby-image.html","dateStr":"2020년 08월 19일","date":"2020-08-19T00:00:00.000Z"},"frontmatter":{"title":"개츠비의 이미지 처리 방식"}},{"excerpt":"Gatsby.js 프로젝트를 보면서 react-helmet을 발견했다.\n개발 용어로 \"헬멧\"이라는 단어는 친숙한데 노드의 웹 프레임워크인 익스프레스에서 본 기억이 있다.\n보안과 관련된 미들웨어인데 헬멧이라는 이름처럼 웹 어플리케이션을 안전하게 지켜 주는 그런 도구로 알고 있다. 그런데 react-helmet도 비슷한 것인가하고 휙 지나쳤더니 전혀 아니더라…","fields":{"slug":"/dev/2020/08/15/react-helmet.html","dateStr":"2020년 08월 15일","date":"2020-08-15T00:00:00.000Z"},"frontmatter":{"title":"react-helmet의 동작 방식"}},{"excerpt":"뷰와 리액트를 사용한 이후 컴포넌트 기반으로 접근하는 것이 개발을 무척 단순하고 빠르게 만들었다.\n이를 기반한 정적 사이트 생성기도 나왔는데 리액트의 개츠비(gatsby)와 뷰의 뷰프레스(vue-press)가 자주 보였다. 내 블로그도 정적 사이트 생성기를 이용해서 관리하고 있다.\n루비 기반의 지킬(jekyll)이라는 툴인데 깃헙 페이지에 무료로 관리하려…","fields":{"slug":"/dev/2020/07/30/gatsby.html","dateStr":"2020년 07월 30일","date":"2020-07-30T00:00:00.000Z"},"frontmatter":{"title":"Gatsby.js 훑어보기"}},{"excerpt":"이제 프론트엔드 개발에 웹팩은 항상 달고 다닌다.\nES6+ 뿐만 아니라 타입스크립트를 사용하려면 이것 없이는 쉽지 않다. 웹팩과 더불어 필수로 사용하는 것이 webpack-dev-server이다.\n잼스택(JAM Stack)으로 개발된 결과물을 바로 바로 확인하려면 개발용 웹서버가 필요한데 바로 webpack-dev-server의 역할이다. 번들링한 JS,…","fields":{"slug":"/dev/2020/07/18/webpack-dev-middleware.html","dateStr":"2020년 07월 18일","date":"2020-07-18T00:00:00.000Z"},"frontmatter":{"title":"웹팩 개발 서버로 부족하다면 webpack-dev-middleware를 사용해 보자"}},{"excerpt":"시퀄라이즈로 모델링하는 방법을 한 번 정리한 적이 있는데 sequelize.define() 함수를 사용했었다.\n시퀄라이즈 4 버전을 사용했는데 노드js에 클래스 문법이 들어오기 전이었다. 이번에 데이터베이스 사용할 기회가 있어서 오랜만에 시퀄라이스 문서를 보는데 Model 클래스를 따로 제공하고 있더라. 리액트도 일반적으로는 Component 클래스를 확…","fields":{"slug":"/dev/2020/07/06/sequelize-model.html","dateStr":"2020년 07월 06일","date":"2020-07-06T00:00:00.000Z"},"frontmatter":{"title":"시퀄라이즈 Model 클래스 활용하기"}},{"excerpt":"스타일시트 전처리 언어인 sass를 사용하는데 노드 환경에서는 node-sass를 이용해 css 코드로 변환한다.\n전처리 언어 중 less를 먼저 사용했는데 점차 sass를 사용하는 분위기였다.\nc언어 구현체가 있는 sass의 빠른 빌드 속도 때문이듯 하다.\n요즘엔 거의 sass만 사용한다. sass 환경의 프로젝트에서 이따금 이런 오류를 접하게 된다. …","fields":{"slug":"/dev/2020/06/27/node-sass.html","dateStr":"2020년 06월 27일","date":"2020-06-27T00:00:00.000Z"},"frontmatter":{"title":"node-sass가 노드 버전에 의존적이 이유"}},{"excerpt":"해외에 나가기 전 꼭 챙겨야 하는 것이 여권(passport)이다.\n출국장에서 나의 신원을 확인해 주는 것이고 해외 입국장에서도 입국을 허가받을 수 있는 수단이기 때문이다. 서비스를 사용할 때도 등록된 사용자임이 확인되어야 기능을 사용할 수 있고 그렇지 않은 경우 일부 제한된다.\n이것이 바로 로그인인데 노드에서는 패스포트(passport) 패키지를 많이 …","fields":{"slug":"/dev/2020/06/20/passport.html","dateStr":"2020년 06월 20일","date":"2020-06-20T00:00:00.000Z"},"frontmatter":{"title":"패스포트 동작 원리와 인증 구현"}}]}},"pageContext":{}},"staticQueryHashes":["1591182808"]}