{"componentChunkName":"component---src-pages-index-tsx","path":"/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"처음 들었을 때 \"p\"가 무슨 뜻일지 궁금했다. 홈페이지에서 바로 찾을 수 없었고 인터넷에 검색해도 잘 나오지 않았다. performant npm '승진, 성능 기준에 맞는' 이런 뜻인데 '고성능 npm'이라고 이해했다. 회사 동료의 제안으로 사용하게 된\n이 패키지 매니져가 이름처럼 빠르고 성능도 좋았다. npm보다 기능이 부족하거나 사용상 혼란스러운 부…","frontmatter":{"slug":"/2023/10/20/pnpm","date":"2023-10-20T00:00:00.000Z","title":"pnpm"}},{"excerpt":"마침내 마지막 4편을 정리할 시간이다. 1장. 레프 훅 랜더링과 무관하게 지속할 수 있는 값을 제공 상태 훅과 비슷하지만 리랜더징 하지않음 Dialog, OrderForm 활용 2장. 제어 폼 제어 컴포넌트 이해 제어 컴포넌트 폼을 재사용하기 위한 MyForm useForm, getFieldProps Form, Field, ErrorMessage Orde…","frontmatter":{"slug":"/2023/06/24/lecture-react-season2-part4-ch5","date":"2023-06-24T00:04:05.000Z","title":"[리액트 2부] 4편 최종정리"}},{"excerpt":"메모이제이션. 캐시로 성능을 높이는 프로그래밍 기법이다. 이번에는 메모이제이션에 대해 알아본 뒤 리액트의 useMemo와 useCallback을 살펴볼 것이다. 각 훅을 직접 만들어 구조를 파악하고 리액트 성능 개선 방법을 이해한다. 메모이제이션 n이 자연수일 때 1에서 n까지의 곱을 계승 또는 팩토리얼이라고 한다. 알고리즘 문제로 많이 사용하는 것인데 …","frontmatter":{"slug":"/2023/06/24/lecture-react-season2-part4-ch4","date":"2023-06-24T00:04:04.000Z","title":"[리액트 2부] 4.4 메모이제이션 훅"}},{"excerpt":"리듀서 훅에 대해 알아보자. 상태 훅으로 상태를 관리하다가 규모가 커지고 관리 방식이 복잡해질 즈음에 꺼내는 훅이다. 둘의 역할이 비슷해 인터페이스나 구조도 유사할 것 같다. 훅을 만들면서 구조를 이해하고 차이도 짚어 보겠다. 회원가입 폼 예제 이번엔 회원가입 폼을 예제로 다루겠다. 필드에 입력값을 검사하고 오류 메세지를 보여주는 기능이 있다. 입력값과 …","frontmatter":{"slug":"/2023/06/24/lecture-react-season2-part4-ch3","date":"2023-06-24T00:04:03.000Z","title":"[리액트 2부] 4.3 리듀서 훅"}},{"excerpt":"1편에서 주문 폼을 비제어 컴포넌트로 구현했다. 입력 값을 브라우저의 상태 관리에 맞기고 검증도 브라우져의 기본 동작을 활용했다. 폼을 제출할 때 입력값을 얻기 위해 리액트 레프 객체를 연결했다. 이번에는 제어 컴포넌트로 폼을 변경해보자. 입력 값을 리액트 상태와 오류 메세지를 리액트 상태로 관리해 검증 기능을 커스터마이징할 수 있다. 폼을 제출할 때 입…","frontmatter":{"slug":"/2023/06/24/lecture-react-season2-part4-ch2","date":"2023-06-24T00:04:02.000Z","title":"[리액트 2부] 4.2 제어 폼"}},{"excerpt":"3편에서 학습한 기본 훅을 이용해 어플리케이션을 함수 컴포넌트로 다시 만들었다. 일부 남은 것이 있는데 레프 객체를 사용하는 부분이다. Dialog: 레프 객체로 앨리먼트에 접근, 버튼 포커스 OrderForm: 제출 이벤트 처리 시 레프 객체로 입력 값 조회 useRef 직접 만들기 함수 컴포넌트에서 레프 객체를 사용할 방법을 궁리해 보자. 컴포넌트가 …","frontmatter":{"slug":"/2023/06/24/lecture-react-season2-part4-ch1","date":"2023-06-24T00:04:01.000Z","title":"[리액트 2부] 4.1 레프 훅"}},{"excerpt":"목차 레프 훅 제어 폼 리듀서 훅 메모이제이션 훅 최종정리","frontmatter":{"slug":"/2023/06/24/lecture-react-season2-part4","date":"2023-06-24T00:04:00.000Z","title":"[리액트 2부] 4편 추가훅"}},{"excerpt":"마침내 3편 내용을 정리할 시간이다. 1장. 클래스/함수형 컴포넌트 새로운 프로젝트 소개 클래스와 함수 비교: 상태 관리, 고정 값 클래스와 함수: 리액트 컴포넌트 리액트 훅: 함수 컴포넌트에 UI 역할을 제공 2장. 상태 훅 문제 구현: 클로져, 배열 훅 구조와 규칙 3장. 부수효과 훅 문제 정의: 순서 함수와 컴포넌트 구현: 지연 실행, 의존성, 부수…","frontmatter":{"slug":"/2023/06/24/lecture-react-season2-part3-ch7","date":"2023-06-24T00:03:07.000Z","title":"[리액트 2부] 3편 최종정리"}},{"excerpt":"기본 훅 세 개를 모두 파악했다. useState, useEffect, useContext로 어플리케이션을 함수 컴포넌트와 훅으로 다시 만들자. MyRouter: Router 2편에서 만든 라우터의 역할은 다음과 같다. routerContext: 라우트 관련 값 전달 Router: 컨택스트에게 상태 path 제공 (공급자) Routes: 요청 경로에 해당…","frontmatter":{"slug":"/2023/06/24/lecture-react-season2-part3-ch6","date":"2023-06-24T00:03:06.000Z","title":"[리액트 2부] 3.6 훅 활용 2"}},{"excerpt":"useContext 훅을 만들고 리액트가 함수 컴포넌트에서 컨택스트를 어떻게 사용하는지 이해한다. 고차 컴포넌트와 훅 리액트 컨택스트는 여러 컴포넌트에게 인자를 자유롭게 전달할 수 있는데 두 가지 단계에 걸쳐 가능하다. 첫째, 컨택스트에게 데이터를 제공할 공급자로 렌더트리를 감싼다. 라우터 컨택스트를 제공하기 위해 Router를 만들고 이를 App에서 사…","frontmatter":{"slug":"/2023/06/24/lecture-react-season2-part3-ch5","date":"2023-06-24T00:03:05.000Z","title":"[리액트 2부] 3.5 컨택스트 훅"}}]}},"pageContext":{}},"staticQueryHashes":["2263867198"]}