{"version":3,"sources":["webpack:///./src/components/Tag/style.ts","webpack:///./src/pages/tags/index.tsx"],"names":["TagItem","styled","div","TagName","h2","Colors","Primary","Fonts","Fixed","TagPostList","ul","TagPostItem","li","SpaceUnit","Black","data","TagPage","d1","allMarkdownRemark","nodes","forEach","node","tags","frontmatter","length","tag","fields","date","slug","title","permalink","category","push","link","d2","item","sort","a","b","toLowerCase","SEO","url","site","siteMetadata","description","small","Section","Icon","type","IconType","Tag","size","map","key","id","to","className"],"mappings":"gQAGaA,EAAUC,IAAOC,IAAV,qEAAGD,CAAH,MAEPE,EAAUF,IAAOG,GAAV,qEAAGH,CAAH,uDAGPI,IAAOC,QACDC,IAAMC,OAIZC,EAAcR,IAAOS,GAAV,yEAAGT,CAAH,wCAKXU,EAAcV,IAAOW,GAAV,yEAAGX,CAAH,oGACLY,cAGNR,IAAOS,OCyEPC,GAFEC,UA7Ec,SAAC,GAAa,IAAXD,EAAW,EAAXA,KACxBE,EAEF,GAEJF,EAAKG,kBAAkBC,MAAMC,SAAQ,SAAAC,GAAQ,IACnCC,EAASD,EAAKE,YAAdD,KACJA,GAAQA,EAAKE,OAAS,GACxBF,EAAKF,SAAQ,SAAAK,GAAO,MACKJ,EAAKK,OAApBC,EADU,EACVA,KAAMC,EADI,EACJA,KADI,EAEqBP,EAAKE,YAAfM,GAFX,EAEVC,UAFU,EAECC,SAFD,EAEWF,OAExBZ,EAAGQ,KACNR,EAAGQ,GAAO,IAEZR,EAAGQ,GAAKO,KAAK,CAAEC,KAAML,EAAMD,OAAME,gBAKvC,IAAIK,EAAK,GACT,IAAK,IAAMC,KAAQlB,EACjBiB,EAAGF,KAAK,CACNP,IAAKU,EACLd,KAAMJ,EAAGkB,KAOb,OAJAD,EAAGE,MAAK,SAACC,EAAGC,GACV,OAAOD,EAAEZ,IAAIc,cAAgBD,EAAEb,IAAIc,cAAgB,GAAK,KAIxD,kBAAC,IAAD,KACE,kBAACC,EAAA,EAAD,CACEX,MAAM,KACNY,IAAQ1B,EAAK2B,KAAKC,aAAaF,IAA5B,QACHG,YAAY,aAEd,kBAAC,IAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,CACEjB,MACE,oCACE,kBAACkB,EAAA,EAAD,CAAMC,KAAMC,IAASC,IAAKC,KAAM,IADlC,OAMDjB,EAAGkB,KAAI,SAAAjB,GACN,OACE,kBAAC,EAAD,CAAgBkB,IAAKlB,EAAKV,KACxB,kBAAC,EAAD,CAAgB6B,GAAInB,EAAKV,KACvB,kBAAC,OAAD,CAAM8B,GAAE,IAAMpB,EAAKV,IAAO+B,UAAU,kBAApC,IACIrB,EAAKV,MAGX,kBAAC,EAAD,KACGU,EAAKd,KACHe,MAAK,SAACC,EAAGC,GACR,OAAOD,EAAEV,KAAOW,EAAEX,MAAQ,EAAI,KAE/ByB,KAAI,SAAA/B,GACH,OACE,kBAAC,EAAD,CAAoBgC,IAAKhC,EAAKY,MAC5B,kBAAC,OAAD,CAAMsB,GAAIlC,EAAKY,MAAOZ,EAAKQ,oBAgBjC","file":"component---src-pages-tags-index-tsx-1ab4d2b4c128b3cdffd7.js","sourcesContent":["import styled from \"styled-components\"\nimport { Colors, Fonts, SpaceUnit } from \"../../styles/style-variables\"\n\nexport const TagItem = styled.div``\n\nexport const TagName = styled.h2`\n  a {\n    text-decoration: none;\n    color: ${Colors.Primary};\n    font-family: ${Fonts.Fixed};\n  }\n`\n\nexport const TagPostList = styled.ul`\n  padding-left: 20px;\n  list-style: none;\n`\n\nexport const TagPostItem = styled.li`\n  margin-bottom: ${SpaceUnit()};\n  a {\n    text-decoration: none;\n    color: ${Colors.Black};\n    &:hover,\n    &:focus {\n      text-decoration: underline;\n    }\n  }\n`\n","import { graphql, Link, PageProps } from \"gatsby\"\nimport React from \"react\"\nimport Icon from \"../../components/Icon\"\nimport { IconType } from \"../../components/Icon/style\"\nimport { PlainLayout } from \"../../components/layout\"\nimport Section from \"../../components/Section\"\nimport SEO from \"../../components/SEO\"\nimport * as Styled from \"../../components/Tag/style\"\nimport { MarkdownRemark } from \"../../models/markdown-remark\"\nimport { Container } from \"../../styles/style-variables\"\n\ntype P = PageProps<{\n  site: any\n  allMarkdownRemark: { nodes: MarkdownRemark[] }\n}>\n\nconst TagPage: React.FC<P> = ({ data }) => {\n  const d1: {\n    [k in string]: { link: string; title: string; date: string }[]\n  } = {}\n\n  data.allMarkdownRemark.nodes.forEach(node => {\n    const { tags } = node.frontmatter\n    if (tags && tags.length > 0) {\n      tags.forEach(tag => {\n        const { date, slug } = node.fields\n        const { permalink, category, title } = node.frontmatter\n        const link = permalink || `/${category}${slug}`\n        if (!d1[tag]) {\n          d1[tag] = []\n        }\n        d1[tag].push({ link: slug, date, title })\n      })\n    }\n  })\n\n  let d2 = []\n  for (const item in d1) {\n    d2.push({\n      tag: item,\n      node: d1[item],\n    })\n  }\n  d2.sort((a, b) => {\n    return a.tag.toLowerCase() > b.tag.toLowerCase() ? 1 : -1\n  })\n\n  return (\n    <PlainLayout>\n      <SEO\n        title=\"태그\"\n        url={`${data.site.siteMetadata.url}/tags`}\n        description=\"태그 목록입니다\"\n      />\n      <Container small>\n        <Section\n          title={\n            <>\n              <Icon type={IconType.Tag} size={4} />\n              태그\n            </>\n          }\n        >\n          {d2.map(item => {\n            return (\n              <Styled.TagItem key={item.tag}>\n                <Styled.TagName id={item.tag}>\n                  <Link to={`#${item.tag}`} className=\"tag-title-link\">\n                    #{item.tag}\n                  </Link>\n                </Styled.TagName>\n                <Styled.TagPostList>\n                  {item.node\n                    .sort((a, b) => {\n                      return a.date > b.date ? -1 : 1\n                    })\n                    .map(node => {\n                      return (\n                        <Styled.TagPostItem key={node.link}>\n                          <Link to={node.link}>{node.title}</Link>\n                        </Styled.TagPostItem>\n                      )\n                    })}\n                </Styled.TagPostList>\n              </Styled.TagItem>\n            )\n          })}\n        </Section>\n      </Container>\n    </PlainLayout>\n  )\n}\n\nexport default TagPage\n\nexport const data = graphql`\n  query {\n    site {\n      siteMetadata {\n        url\n      }\n    }\n    allMarkdownRemark {\n      nodes {\n        frontmatter {\n          tags\n          title\n          permalink\n          category\n        }\n        fields {\n          slug\n          date\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}