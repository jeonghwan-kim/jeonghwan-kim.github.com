{"version":3,"sources":["webpack:///./src/pages/category/series.tsx","webpack:///./src/components/Category/style.ts","webpack:///./src/pages/category/index.tsx","webpack:///./src/components/PostList/style.ts","webpack:///./src/components/PostList/index.tsx"],"names":["p","title","activeCategory","posts","data","allMarkdownRemark","edges","map","edge","node","pageQuery","CategoryList","styled","ul","CategoryListItem","li","SpaceUnit","Colors","Gray","Primary","lighten","CateogryPosts","hasHeaderBorder","aside","to","className","type","IconType","Article","size","PostList","slug","fields","frontmatter","meta","dateTime","date","dateStr","excerpt","PostItem","PostTitle","h2","PostMeta","div","PostSummary","Black","Widths","Mobile","id","key","dangerouslySetInnerHTML","__html"],"mappings":"6FACA,sFAGe,mBAAAA,GAAC,OACd,kBAAC,gBAAD,CACEC,MAAM,MACNC,eAAgB,SAChBC,MAAOH,EAAEI,KAAKC,kBAAkBC,MAAMC,KAAI,SAAAC,GAAI,OAAIA,EAAKC,WAIpD,IAAMC,EAAY,c,sQCTZC,EAAeC,IAAOC,GAAV,yEAAGD,CAAH,8CAMZE,EAAmBF,IAAOG,GAAV,6EAAGH,CAAH,2nBAGdI,YAAU,GAAMA,YAAU,GAK5BC,IAAOC,KASCF,aAAW,GACVA,YAAU,GAERC,IAAOE,QASbH,cACKA,aAAW,GACVA,cACPA,YAAU,GACCC,IAAOE,QAUTC,YAAQ,GAAKH,IAAOE,SAC/BF,IAAOE,S,YCpCTE,EAAwC,SAAC,GAAD,IACnDpB,EADmD,EACnDA,MACAE,EAFmD,EAEnDA,MACAD,EAHmD,EAGnDA,eAHmD,OAKnD,kBAAC,IAAD,CACEoB,iBAAe,EACfC,MACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,uCAEF,kBAAC,EAAD,KACE,kBAAC,OAAD,CAAMC,GAAG,YAAYC,UAAYvB,EAA4B,GAAX,UAAlD,OAEQ,KAEV,kBAAC,EAAD,KACE,kBAAC,OAAD,CACEsB,GAAG,mBACHC,UAA8B,WAAnBvB,EAA8B,SAAW,IAFtD,OAKQ,KAEV,kBAAC,EAAD,KACE,kBAAC,OAAD,CACEuB,UAA8B,QAAnBvB,EAA2B,SAAW,GACjDsB,GAAG,iBAFL,MAKQ,KAEV,kBAAC,EAAD,KACE,kBAAC,OAAD,CACEA,GAAG,kBACHC,UAA8B,UAAnBvB,EAA6B,SAAW,IAFrD,MAKQ,OAKd,kBAAC,IAAD,CAAKD,MAAK,OAASA,IACnB,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEA,MACE,oCACE,kBAAC,IAAD,CAAMyB,KAAMC,IAASC,QAASC,KAAM,IACnC5B,IAIL,kBAAC6B,EAAA,EAAD,CACE3B,MAAOA,EAAMI,KAAI,SAAAP,GAAC,MAAK,CACrB+B,KAAM/B,EAAEgC,OAAOD,KACf9B,MAAOD,EAAEiC,YAAYhC,MACrBiC,KAAM,0BAAMC,SAAUnC,EAAEgC,OAAOI,MAAOpC,EAAEgC,OAAOK,SAC/CC,QAAStC,EAAEsC,kBAeV5B,GAPE,mBAAAV,GAAC,OACd,kBAAC,EAAD,CACEC,MAAM,OACNE,MAAOH,EAAEI,KAAKC,kBAAkBC,MAAMC,KAAI,SAAAC,GAAI,OAAIA,EAAKC,WAIlC,e,+FCxFZqB,EAAWlB,IAAOC,GAAV,sEAAGD,CAAH,gCAKR2B,EAAW3B,IAAOG,GAAV,sEAAGH,CAAH,6EAITI,YAAU,IAKTwB,EAAY5B,IAAO6B,GAAV,uEAAG7B,CAAH,iCACXK,IAAOE,QACCH,eAGN0B,EAAW9B,IAAO+B,IAAV,sEAAG/B,CAAH,eACVK,IAAOC,MAGL0B,EAAchC,IAAOZ,EAAV,yEAAGY,CAAH,sEACbK,IAAO4B,MAEKC,IAAOC,QCWfjB,IA1BS,SAAC,GAAc,IAAZ3B,EAAY,EAAZA,MACzB,OACE,kBAAC,EAAD,CAAiB6C,GAAG,aACjB7C,EAAMI,KAAI,YAAoC,IAAjCN,EAAiC,EAAjCA,MAAO8B,EAA0B,EAA1BA,KAAMG,EAAoB,EAApBA,KAAMI,EAAc,EAAdA,QAC/B,OACE,kBAAC,EAAD,CAAiBW,IAAKlB,GACpB,kBAAC,OAAD,CAAMP,GAAIO,GACR,kBAAC,EAAD,CAAkBN,UAAU,mBACzBxB,GAEFiC,GAAQ,kBAAC,EAAD,KAAkBA,GAC1BI,GACC,kBAAC,EAAD,CACEY,wBAAyB,CACvBC,OAAQb","file":"component---src-pages-category-series-tsx-90b2cee0db08a85bd7d7.js","sourcesContent":["import { graphql } from \"gatsby\"\nimport React from \"react\"\nimport { CateogryPosts } from \".\"\n\nexport default p => (\n  <CateogryPosts\n    title=\"연재물\"\n    activeCategory={\"series\"}\n    posts={p.data.allMarkdownRemark.edges.map(edge => edge.node)}\n  />\n)\n\nexport const pageQuery = graphql`\n  {\n    allMarkdownRemark(\n      sort: { fields: fields___date, order: DESC }\n      filter: { frontmatter: { category: { eq: \"series\" } } }\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 200, format: PLAIN, truncate: true)\n          fields {\n            slug\n            dateStr: date(formatString: \"YYYY년 MM월 DD일\")\n            date\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n`\n","import styled from \"styled-components\"\nimport { lighten } from \"polished\"\nimport { Colors, SpaceUnit } from \"../../styles/style-variables\"\nexport const CategoryList = styled.ul`\n  list-style: none;\n  padding-left: 0;\n  margin: 0;\n`\n\nexport const CategoryListItem = styled.li`\n  a,\n  label {\n    padding: ${SpaceUnit(2)} ${SpaceUnit(4)};\n    display: flex;\n    align-items: center;\n  }\n  label {\n    color: ${Colors.Gray};\n    font-weight: 200;\n  }\n  a {\n    text-decoration: none;\n    &::before {\n      content: \"\";\n      border-radius: 50%;\n      display: inline-block;\n      margin-left: ${SpaceUnit(-3)};\n      margin-right: ${SpaceUnit(3)};\n      position: absolute;\n      border: solid 0 ${Colors.Primary};\n      transition: border-width linear 0.1s;\n    }\n    &.active {\n      &::before {\n        border-top-left-radius: 0;\n        border-bottom-left-radius: 0;\n        border-top-right-radius: 4px;\n        border-bottom-right-radius: 4px;\n        height: ${SpaceUnit()};\n        margin-left: ${SpaceUnit(-4)};\n        margin-right: ${SpaceUnit()};\n        width: ${SpaceUnit(3)};\n        background-color: ${Colors.Primary};\n      }\n    }\n    &:not(.active):hover {\n      &::before {\n        border-width: 4px;\n        transition: border-width linear 0.1s;\n      }\n    }\n    &:hover {\n      background-color: ${lighten(0.4, Colors.Primary)};\n      color: ${Colors.Primary};\n      cursor: pointer;\n    }\n  }\n`\n","import { graphql, Link } from \"gatsby\"\nimport React, { FC } from \"react\"\nimport Content, { Section } from \"../../components/layout/content\"\nimport Layout from \"../../components/layout\"\nimport PostList from \"../../components/PostList\"\nimport SEO from \"../../components/seo\"\nimport { MarkdownRemark } from \"../../models/markdown-remark\"\nimport Icon from \"../../components/icon\"\nimport * as Styled from \"../../components/Category/style\"\nimport { IconType } from \"../../components/Icon/style\"\n\ninterface CateogryPostsProps {\n  title: string\n  posts: MarkdownRemark[]\n  activeCategory?: string\n}\n\nexport const CateogryPosts: FC<CateogryPostsProps> = ({\n  title,\n  posts,\n  activeCategory,\n}) => (\n  <Layout\n    hasHeaderBorder\n    aside={\n      <Styled.CategoryList>\n        <Styled.CategoryListItem>\n          <label>글분류</label>\n        </Styled.CategoryListItem>\n        <Styled.CategoryListItem>\n          <Link to=\"/category\" className={!activeCategory ? \"active\" : \"\"}>\n            모든글\n          </Link>{\" \"}\n        </Styled.CategoryListItem>\n        <Styled.CategoryListItem>\n          <Link\n            to=\"/category/series\"\n            className={activeCategory === \"series\" ? \"active\" : \"\"}\n          >\n            연재물\n          </Link>{\" \"}\n        </Styled.CategoryListItem>\n        <Styled.CategoryListItem>\n          <Link\n            className={activeCategory === \"dev\" ? \"active\" : \"\"}\n            to=\"/category/dev\"\n          >\n            개발\n          </Link>{\" \"}\n        </Styled.CategoryListItem>\n        <Styled.CategoryListItem>\n          <Link\n            to=\"/category/think\"\n            className={activeCategory === \"think\" ? \"active\" : \"\"}\n          >\n            생각\n          </Link>{\" \"}\n        </Styled.CategoryListItem>\n      </Styled.CategoryList>\n    }\n  >\n    <SEO title={`분류: ${title}`} />\n    <Content>\n      <Section\n        title={\n          <>\n            <Icon type={IconType.Article} size={4} />\n            {title}\n          </>\n        }\n      >\n        <PostList\n          posts={posts.map(p => ({\n            slug: p.fields.slug,\n            title: p.frontmatter.title,\n            meta: <time dateTime={p.fields.date}>{p.fields.dateStr}</time>,\n            excerpt: p.excerpt,\n          }))}\n        />\n      </Section>\n    </Content>\n  </Layout>\n)\n\nexport default p => (\n  <CateogryPosts\n    title=\"모든 글\"\n    posts={p.data.allMarkdownRemark.edges.map(edge => edge.node)}\n  />\n)\n\nexport const pageQuery = graphql`\n  {\n    allMarkdownRemark(sort: { fields: fields___date, order: DESC }) {\n      edges {\n        node {\n          excerpt(pruneLength: 200, format: PLAIN, truncate: true)\n          fields {\n            slug\n            dateStr: date(formatString: \"YYYY년 MM월 DD일\")\n            date\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n`\n","import styled from \"styled-components\"\nimport { Colors, SpaceUnit, Widths } from \"../../styles/style-variables\"\n\nexport const PostList = styled.ul`\n  list-style: none;\n  padding: 0;\n`\n\nexport const PostItem = styled.li`\n  a {\n    text-decoration: none;\n  }\n  margin: ${SpaceUnit(7)} 0;\n  text-decoration: none;\n  display: block;\n`\n\nexport const PostTitle = styled.h2`\n  color: ${Colors.Primary};\n  margin-bottom: ${SpaceUnit()};\n`\n\nexport const PostMeta = styled.div`\n  color: ${Colors.Gray};\n`\n\nexport const PostSummary = styled.p`\n  color: ${Colors.Black};\n  line-height: 1.5em;\n  @media (max-width: ${Widths.Mobile}) {\n    display: none;\n  }\n`\n","import { Link } from \"gatsby\"\nimport React, { FC, ReactNode } from \"react\"\nimport * as Styled from \"./style\"\n\nexport interface PostItemType {\n  title: ReactNode\n  slug: string\n  meta?: ReactNode\n  excerpt?: string\n}\nexport interface P {\n  posts: PostItemType[]\n}\n\nconst PostList: FC<P> = ({ posts }) => {\n  return (\n    <Styled.PostList id=\"post-list\">\n      {posts.map(({ title, slug, meta, excerpt }) => {\n        return (\n          <Styled.PostItem key={slug}>\n            <Link to={slug}>\n              <Styled.PostTitle className=\"post-item-title\">\n                {title}\n              </Styled.PostTitle>\n              {meta && <Styled.PostMeta>{meta}</Styled.PostMeta>}\n              {excerpt && (\n                <Styled.PostSummary\n                  dangerouslySetInnerHTML={{\n                    __html: excerpt,\n                  }}\n                />\n              )}\n            </Link>\n          </Styled.PostItem>\n        )\n      })}\n    </Styled.PostList>\n  )\n}\n\nexport default PostList\n"],"sourceRoot":""}