{"version":3,"sources":["webpack:///./src/pages/category/series.tsx","webpack:///./src/pages/category/index.tsx","webpack:///./src/components/post-list.tsx"],"names":["p","title","posts","data","allMarkdownRemark","edges","map","edge","node","pageQuery","CateogryPosts","className","slug","fields","frontmatter","meta","dateTime","date","dateStr","excerpt","PostList","id","key","to","dangerouslySetInnerHTML","__html"],"mappings":"6FACA,sFAGe,mBAACA,GAAD,OAAO,kBAAC,gBAAD,CAAeC,MAAM,MAAMC,MAAOF,EAAEG,KAAKC,kBAAkBC,MAAMC,KAAI,SAAAC,GAAI,OAAIA,EAAKC,WAEjG,IAAMC,EAAY,c,kCCNzB,wKAcaC,EAAwC,SAAC,GAAD,IAAET,EAAF,EAAEA,MAAOC,EAAT,EAASA,MAAT,OACnD,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKD,MAAK,OAASA,IACnB,yBAAKU,UAAU,QACb,6BAASA,UAAU,SACjB,yBAAKA,UAAU,2BACb,4BAAKV,GACL,kBAAC,IAAD,CAAUC,MAAOA,EAAMI,KAAI,SAAAN,GAAC,MAAK,CAC/BY,KAAMZ,EAAEa,OAAOD,KACfX,MAAOD,EAAEc,YAAYb,MACrBc,KAAM,0BAAMC,SAAUhB,EAAEa,OAAOI,MAAOjB,EAAEa,OAAOK,SAC/CC,QAASnB,EAAEmB,mBAQV,mBAACnB,GAAD,OAAO,kBAACU,EAAD,CAAeT,MAAM,OAAOC,MAAOF,EAAEG,KAAKC,kBAAkBC,MAAMC,KAAI,SAAAC,GAAI,OAAIA,EAAKC,WAElG,IAAMC,EAAY,c,kCCnCzB,+CA4CeW,IA5BS,SAAC,GAAY,IAAXlB,EAAW,EAAXA,MACxB,OACE,wBAAImB,GAAG,YAAYV,UAAU,aAC1BT,EAAMI,KAAI,YAAkC,IAAhCL,EAAgC,EAAhCA,MAAOW,EAAyB,EAAzBA,KAAMG,EAAmB,EAAnBA,KAAMI,EAAa,EAAbA,QAC9B,OACE,wBAAIG,IAAKV,EAAMD,UAAU,aACvB,kBAAC,OAAD,CAAMY,GAAIX,GACR,wBAAID,UAAU,mBAAmBV,GAChCc,GACC,yBAAKJ,UAAU,kBAAkBI,GAGlCI,GACC,uBACAR,UAAU,oBACVa,wBAAyB,CACvBC,OAAQN,a","file":"component---src-pages-category-series-tsx-4e8126eb46dac24cdb42.js","sourcesContent":["import { graphql } from \"gatsby\";\nimport React from \"react\";\nimport { CateogryPosts } from \".\";\n\nexport default (p) => <CateogryPosts title=\"연재물\" posts={p.data.allMarkdownRemark.edges.map(edge => edge.node)} />\n\nexport const pageQuery = graphql`{\n  allMarkdownRemark(sort: {fields: fields___date, order: DESC}, filter: {frontmatter: {category: {eq: \"series\"}}}) {\n    edges {\n      node {\n        excerpt(pruneLength: 200, format: PLAIN, truncate: true)\n        fields {\n          slug\n          dateStr: date(formatString: \"YYYY년 MM월 DD일\")\n          date\n        }\n        frontmatter {\n          title\n        }\n      }\n    }\n  }\n}`\n","import React, { FC } from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport Layout from \"../../components/layout/layout\"\nimport SEO from \"../../components/seo\"\nimport './index.scss';\nimport PostList from \"../../components/post-list\";\nimport { MarkdownRemark } from \"../../models/markdown-remark\";\n\n\ninterface CateogryPostsProps {\n  title: string;\n  posts: MarkdownRemark[]\n}\n\nexport const CateogryPosts: FC<CateogryPostsProps> = ({title, posts}) => (\n  <Layout>\n      <SEO title={`분류: ${title}`} />\n      <div className=\"home\">\n        <section className=\"posts\">\n          <div className=\"section-inner container\">\n            <h2>{title}</h2>\n            <PostList posts={posts.map(p => ({\n              slug: p.fields.slug,\n              title: p.frontmatter.title,\n              meta: <time dateTime={p.fields.date}>{p.fields.dateStr}</time>,\n              excerpt: p.excerpt\n            }))} />\n          </div>\n        </section>\n      </div>\n    </Layout>\n)\n\nexport default (p) => <CateogryPosts title=\"모든 글\" posts={p.data.allMarkdownRemark.edges.map(edge => edge.node)} />\n\nexport const pageQuery = graphql`\n{\n  allMarkdownRemark(sort: { fields: fields___date, order: DESC }) {\n    edges {\n      node {\n        excerpt(pruneLength: 200, format: PLAIN, truncate: true)\n        fields {\n          slug\n          dateStr: date(formatString: \"YYYY년 MM월 DD일\")\n          date\n        }\n        frontmatter {\n          title\n        }\n      }\n    }\n  }\n}\n`","import React, { FC, ReactNode } from \"react\";\nimport { MarkdownRemark, Frontmatter, Fields } from \"../models/markdown-remark\";\nimport { Link } from \"gatsby\";\n\nimport './post-list.scss'\n\nexport interface PostItemType {\n  title: ReactNode;\n  slug: string;\n  meta?: ReactNode;\n  excerpt?: string;\n}\nexport interface P {\n  posts: PostItemType[]\n}\n\nconst PostList: FC<P> = ({posts}) => {\n  return(\n    <ul id=\"post-list\" className=\"post-list\">\n      {posts.map(({title, slug, meta, excerpt}) => {\n        return (\n          <li key={slug} className=\"post-item\" >\n            <Link to={slug}>\n              <h2 className=\"post-item-title\">{title}</h2>\n              {meta && (\n                <div className=\"post-item-meta\">{meta}</div>\n\n              )}\n              {excerpt && (\n                <p\n                className=\"post-item-summary\"\n                dangerouslySetInnerHTML={{\n                  __html: excerpt,\n                }}\n              ></p>\n              )}\n            </Link>\n          </li>\n        )\n      })}\n    </ul>\n  )\n}\n\nexport default PostList;\n"],"sourceRoot":""}