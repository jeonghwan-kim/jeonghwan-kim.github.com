{"version":3,"file":"component---src-pages-tags-index-tsx-0d9d779a26e2818e247e.js","mappings":"4QAGaA,EAAUC,EAAAA,QAAAA,IAAAA,WAAH,0DAAGA,CAAH,CAAb,KAEMC,EAAUD,EAAAA,QAAAA,GAAAA,WAAH,0DAAGA,CAAH,uDAGPE,EAAAA,GAAAA,QACMC,EAAAA,GAAAA,OAINC,EAAcJ,EAAAA,QAAAA,GAAAA,WAAH,8DAAGA,CAAH,CAAjB,uCAKMK,EAAcL,EAAAA,QAAAA,GAAAA,WAAH,8DAAGA,CAAH,qGACLM,EAAAA,EAAAA,MAGNJ,EAAAA,GAAAA,OCoEb,EA7EiC,SAAC,GAAc,IAAZK,EAAW,EAAXA,KAC5BC,EAAN,GAIAD,EAAAA,kBAAAA,MAAAA,SAAqC,SAAAE,GACnC,IAAQC,EAASD,EAAjB,iBACIC,GAAQA,EAAAA,OAAZ,GACEA,EAAAA,SAAa,SAAAC,GACX,MAAuBF,EAAvB,OAAQG,EAAR,OAAcC,EAAd,OACA,EAAuCJ,EAAvC,YAA6BK,GAA7B,gCAEKN,EAAL,KACEA,EAAAA,GAAAA,IAEFA,EAAAA,GAAAA,KAAa,CAAEO,KAAF,EAAcH,KAAd,EAAoBE,MAAAA,UAKvC,IAAIE,EAAJ,GACA,IAAK,IAAL,OACEA,EAAAA,KAAQ,CACNL,IADM,EAENF,KAAMD,EAAGS,KAOb,OAJAD,EAAAA,MAAQ,cACN,OAAOE,EAAAA,IAAAA,cAAsBC,EAAAA,IAAtBD,cAAAA,GAAP,KAIA,0BACE,qBACEJ,MADF,KAEEM,IAAQb,EAAAA,KAAAA,aAAL,IAFL,QAGEc,YAAY,aAEd,sBAAWC,OAAK,GACd,qBACER,MACE,gCACE,qBAAMS,KAAMC,EAAAA,EAAAA,IAAcC,KAAM,IADlC,OAMDT,EAAA,KAAO,SAAAC,GACN,OACE,gBAAC,EAAD,CAAgBS,IAAKT,EAAKN,KACxB,gBAAC,EAAD,CAAgBgB,GAAIV,EAAKN,KACvB,wBAAMiB,GAAE,IAAMX,EAAd,IAA0BY,UAAU,kBAApC,IACIZ,EAHR,MAME,gBAAC,EAAD,KACGA,EAAA,WACO,cACJ,OAAOC,EAAAA,KAASC,EAATD,MAAAA,EAAP,KAFH,KAIM,SAAAT,GACH,OACE,gBAAC,EAAD,CAAoBiB,IAAKjB,EAAKM,MAC5B,wBAAMa,GAAInB,EAAKM,MAAON,EAF1B","sources":["webpack://gatsby-starter-default/./src/components/Tag/style.ts","webpack://gatsby-starter-default/./src/pages/tags/index.tsx"],"sourcesContent":["import styled from \"styled-components\"\nimport { Colors, Fonts, SpaceUnit } from \"../../styles/style-variables\"\n\nexport const TagItem = styled.div``\n\nexport const TagName = styled.h2`\n  a {\n    text-decoration: none;\n    color: ${Colors.Primary};\n    font-family: ${Fonts.Fixed};\n  }\n`\n\nexport const TagPostList = styled.ul`\n  padding-left: 20px;\n  list-style: none;\n`\n\nexport const TagPostItem = styled.li`\n  margin-bottom: ${SpaceUnit()};\n  a {\n    text-decoration: none;\n    color: ${Colors.Black};\n    &:hover,\n    &:focus {\n      text-decoration: underline;\n    }\n  }\n`\n","import { graphql, Link, PageProps } from \"gatsby\"\nimport React from \"react\"\nimport { Query } from \"../../../graphql-types\"\nimport Icon from \"../../components/Icon\"\nimport { IconType } from \"../../components/Icon/style\"\nimport { PlainLayout } from \"../../components/layout\"\nimport Section from \"../../components/Section\"\nimport SEO from \"../../components/SEO\"\nimport * as Styled from \"../../components/Tag/style\"\nimport { Container } from \"../../styles/style-variables\"\n\ntype Props = PageProps<Query>\n\nconst TagPage: React.FC<Props> = ({ data }) => {\n  const d1: {\n    [k in string]: { link: string; title: string; date: string }[]\n  } = {}\n\n  data.allMarkdownRemark.nodes.forEach(node => {\n    const { tags } = node.frontmatter\n    if (tags && tags.length > 0) {\n      tags.forEach(tag => {\n        const { date, slug } = node.fields\n        const { permalink, category, title } = node.frontmatter\n        const link = permalink || `/${category}${slug}`\n        if (!d1[tag]) {\n          d1[tag] = []\n        }\n        d1[tag].push({ link: slug, date, title })\n      })\n    }\n  })\n\n  let d2 = []\n  for (const item in d1) {\n    d2.push({\n      tag: item,\n      node: d1[item],\n    })\n  }\n  d2.sort((a, b) => {\n    return a.tag.toLowerCase() > b.tag.toLowerCase() ? 1 : -1\n  })\n\n  return (\n    <PlainLayout>\n      <SEO\n        title=\"태그\"\n        url={`${data.site.siteMetadata.url}/tags`}\n        description=\"태그 목록입니다\"\n      />\n      <Container small>\n        <Section\n          title={\n            <>\n              <Icon type={IconType.Tag} size={4} />\n              태그\n            </>\n          }\n        >\n          {d2.map(item => {\n            return (\n              <Styled.TagItem key={item.tag}>\n                <Styled.TagName id={item.tag}>\n                  <Link to={`#${item.tag}`} className=\"tag-title-link\">\n                    #{item.tag}\n                  </Link>\n                </Styled.TagName>\n                <Styled.TagPostList>\n                  {item.node\n                    .sort((a, b) => {\n                      return a.date > b.date ? -1 : 1\n                    })\n                    .map(node => {\n                      return (\n                        <Styled.TagPostItem key={node.link}>\n                          <Link to={node.link}>{node.title}</Link>\n                        </Styled.TagPostItem>\n                      )\n                    })}\n                </Styled.TagPostList>\n              </Styled.TagItem>\n            )\n          })}\n        </Section>\n      </Container>\n    </PlainLayout>\n  )\n}\n\nexport default TagPage\n\nexport const data = graphql`\n  query {\n    site {\n      siteMetadata {\n        url\n      }\n    }\n    allMarkdownRemark {\n      nodes {\n        frontmatter {\n          tags\n          title\n          permalink\n          category\n        }\n        fields {\n          slug\n          date\n        }\n      }\n    }\n  }\n`\n"],"names":["TagItem","styled","TagName","Colors","Fonts","TagPostList","TagPostItem","SpaceUnit","data","d1","node","tags","tag","date","slug","title","link","d2","item","a","b","url","description","small","type","IconType","size","key","id","to","className"],"sourceRoot":""}